<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1382" onload="init(evt)" viewBox="0 0 1200 1382" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1365"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1365"> </text>
<g id="frames">
<g>
<title>all (542 samples, 100.00%)</title><rect x="10.0" y="1331.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1342.0">all</text>
</g>
<g>
<title>[unknown] (2 samples, 0.37%)</title><rect x="10.0" y="1315.0" width="4.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>__vsnprintf (1 samples, 0.18%)</title><rect x="10.0" y="1299.0" width="2.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>/usr/lib64/libc-2.17.so (1 samples, 0.18%)</title><rect x="10.0" y="1283.0" width="2.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.18%)</title><rect x="12.2" y="1299.0" width="2.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="15.2" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (30 samples, 5.54%)</title><rect x="14.4" y="1315.0" width="65.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.4" y="1326.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (2 samples, 0.37%)</title><rect x="14.4" y="1299.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.4" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (2 samples, 0.37%)</title><rect x="14.4" y="1283.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.4" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.commitOffsets (1 samples, 0.18%)</title><rect x="14.4" y="1267.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.4" y="1278.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1016925085.linkToTargetMethod (1 samples, 0.18%)</title><rect x="14.4" y="1251.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.4" y="1262.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.18%)</title><rect x="14.4" y="1235.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.18%)</title><rect x="16.5" y="1267.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.5" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.18%)</title><rect x="16.5" y="1251.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.5" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.18%)</title><rect x="16.5" y="1235.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.18%)</title><rect x="16.5" y="1219.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.5" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.18%)</title><rect x="16.5" y="1203.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.5" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.18%)</title><rect x="16.5" y="1187.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.18%)</title><rect x="16.5" y="1171.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.5" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.18%)</title><rect x="16.5" y="1155.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.18%)</title><rect x="16.5" y="1139.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.18%)</title><rect x="16.5" y="1123.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.18%)</title><rect x="16.5" y="1107.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.5" y="1118.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.18%)</title><rect x="16.5" y="1091.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.5" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.18%)</title><rect x="16.5" y="1075.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.5" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.18%)</title><rect x="16.5" y="1059.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.5" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerLastTemporaryDirectBuffer (1 samples, 0.18%)</title><rect x="16.5" y="1043.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.5" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.18%)</title><rect x="16.5" y="1027.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.18%)</title><rect x="16.5" y="1011.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.18%)</title><rect x="16.5" y="995.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.18%)</title><rect x="16.5" y="979.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="19.5" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.18%)</title><rect x="16.5" y="963.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.5" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (28 samples, 5.17%)</title><rect x="18.7" y="1299.0" width="61.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="21.7" y="1310.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.18%)</title><rect x="18.7" y="1283.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.7" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.18%)</title><rect x="18.7" y="1267.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.7" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1221516237.accept (1 samples, 0.18%)</title><rect x="18.7" y="1251.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.7" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.18%)</title><rect x="18.7" y="1235.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.7" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.18%)</title><rect x="18.7" y="1219.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.7" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.37%)</title><rect x="20.9" y="1283.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.9" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (2 samples, 0.37%)</title><rect x="20.9" y="1267.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.9" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.18%)</title><rect x="20.9" y="1251.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.9" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.18%)</title><rect x="20.9" y="1235.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.9" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.18%)</title><rect x="20.9" y="1219.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.9" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.18%)</title><rect x="20.9" y="1203.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.9" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.18%)</title><rect x="20.9" y="1187.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="23.9" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.18%)</title><rect x="20.9" y="1171.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.9" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.18%)</title><rect x="20.9" y="1155.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="23.9" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.18%)</title><rect x="20.9" y="1139.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="23.9" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (1 samples, 0.18%)</title><rect x="23.1" y="1251.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.1" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.&lt;init&gt; (1 samples, 0.18%)</title><rect x="23.1" y="1235.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="26.1" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (2 samples, 0.37%)</title><rect x="25.2" y="1283.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="28.2" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.18%)</title><rect x="25.2" y="1267.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.2" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.18%)</title><rect x="25.2" y="1251.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="28.2" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.18%)</title><rect x="25.2" y="1235.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="28.2" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.18%)</title><rect x="25.2" y="1219.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.2" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.18%)</title><rect x="25.2" y="1203.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="28.2" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.18%)</title><rect x="25.2" y="1187.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.2" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.18%)</title><rect x="25.2" y="1171.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="28.2" y="1182.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (1 samples, 0.18%)</title><rect x="27.4" y="1267.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="30.4" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$306/954011835.accept (1 samples, 0.18%)</title><rect x="27.4" y="1251.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="30.4" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$resumePartitions$73 (1 samples, 0.18%)</title><rect x="27.4" y="1235.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="30.4" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.resume (1 samples, 0.18%)</title><rect x="27.4" y="1219.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="30.4" y="1230.0"></text>
</g>
<g>
<title>java/lang/System.nanoTime (1 samples, 0.18%)</title><rect x="27.4" y="1203.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="30.4" y="1214.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.18%)</title><rect x="27.4" y="1187.0" width="2.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="30.4" y="1198.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.18%)</title><rect x="27.4" y="1171.0" width="2.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="30.4" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.18%)</title><rect x="29.6" y="1283.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="32.6" y="1294.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (13 samples, 2.40%)</title><rect x="31.8" y="1283.0" width="28.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="34.8" y="1294.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1223954879.accept (13 samples, 2.40%)</title><rect x="31.8" y="1267.0" width="28.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="34.8" y="1278.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$71 (13 samples, 2.40%)</title><rect x="31.8" y="1251.0" width="28.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="34.8" y="1262.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (5 samples, 0.92%)</title><rect x="31.8" y="1235.0" width="10.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.8" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (5 samples, 0.92%)</title><rect x="31.8" y="1219.0" width="10.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="34.8" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (5 samples, 0.92%)</title><rect x="31.8" y="1203.0" width="10.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.8" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (5 samples, 0.92%)</title><rect x="31.8" y="1187.0" width="10.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="34.8" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (5 samples, 0.92%)</title><rect x="31.8" y="1171.0" width="10.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="34.8" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (5 samples, 0.92%)</title><rect x="31.8" y="1155.0" width="10.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.8" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.18%)</title><rect x="31.8" y="1139.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.18%)</title><rect x="31.8" y="1123.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="34.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.18%)</title><rect x="31.8" y="1107.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="34.8" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.74%)</title><rect x="33.9" y="1139.0" width="8.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="36.9" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.74%)</title><rect x="33.9" y="1123.0" width="8.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="36.9" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (4 samples, 0.74%)</title><rect x="33.9" y="1107.0" width="8.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="36.9" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (8 samples, 1.48%)</title><rect x="42.7" y="1235.0" width="17.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="45.7" y="1246.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (8 samples, 1.48%)</title><rect x="42.7" y="1219.0" width="17.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="45.7" y="1230.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.37%)</title><rect x="55.7" y="1203.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="58.7" y="1214.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.37%)</title><rect x="55.7" y="1187.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="58.7" y="1198.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.37%)</title><rect x="55.7" y="1171.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="58.7" y="1182.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.37%)</title><rect x="55.7" y="1155.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="58.7" y="1166.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.18%)</title><rect x="57.9" y="1139.0" width="2.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="60.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 1.66%)</title><rect x="60.1" y="1283.0" width="19.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="63.1" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 1.66%)</title><rect x="60.1" y="1267.0" width="19.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="63.1" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 1.29%)</title><rect x="60.1" y="1251.0" width="15.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="63.1" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 0.74%)</title><rect x="60.1" y="1235.0" width="8.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="63.1" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 0.74%)</title><rect x="60.1" y="1219.0" width="8.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="63.1" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.18%)</title><rect x="60.1" y="1203.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="63.1" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.37%)</title><rect x="62.3" y="1203.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="65.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.37%)</title><rect x="62.3" y="1187.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="65.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.18%)</title><rect x="62.3" y="1171.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="65.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.maybeRegisterConnectionMetrics (1 samples, 0.18%)</title><rect x="62.3" y="1155.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="65.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.18%)</title><rect x="62.3" y="1139.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="65.3" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.18%)</title><rect x="62.3" y="1123.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="65.3" y="1134.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.18%)</title><rect x="62.3" y="1107.0" width="2.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="65.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.18%)</title><rect x="64.4" y="1171.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="67.4" y="1182.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.18%)</title><rect x="64.4" y="1155.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="67.4" y="1166.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.18%)</title><rect x="64.4" y="1139.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="67.4" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.18%)</title><rect x="64.4" y="1123.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="67.4" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.18%)</title><rect x="64.4" y="1107.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="67.4" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.18%)</title><rect x="64.4" y="1091.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="67.4" y="1102.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_EPollArrayWrapper_epollWait (1 samples, 0.18%)</title><rect x="64.4" y="1075.0" width="2.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="67.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.failExpiredRequests (1 samples, 0.18%)</title><rect x="66.6" y="1203.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="69.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.access$300 (1 samples, 0.18%)</title><rect x="66.6" y="1187.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="69.6" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 0.55%)</title><rect x="68.8" y="1235.0" width="6.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="71.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 0.55%)</title><rect x="68.8" y="1219.0" width="6.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="71.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 0.55%)</title><rect x="68.8" y="1203.0" width="6.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="71.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 0.55%)</title><rect x="68.8" y="1187.0" width="6.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="71.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.18%)</title><rect x="68.8" y="1171.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="71.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.18%)</title><rect x="68.8" y="1155.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="71.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.18%)</title><rect x="68.8" y="1139.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="71.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.37%)</title><rect x="71.0" y="1171.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="74.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.37%)</title><rect x="71.0" y="1155.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="74.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (2 samples, 0.37%)</title><rect x="71.0" y="1139.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="74.0" y="1150.0"></text>
</g>
<g>
<title>java/util/Optional.of (2 samples, 0.37%)</title><rect x="71.0" y="1123.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="74.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.18%)</title><rect x="75.3" y="1251.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="78.3" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.18%)</title><rect x="75.3" y="1235.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="78.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.18%)</title><rect x="75.3" y="1219.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="78.3" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.18%)</title><rect x="75.3" y="1203.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="78.3" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.18%)</title><rect x="75.3" y="1187.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="78.3" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.18%)</title><rect x="75.3" y="1171.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="78.3" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.18%)</title><rect x="75.3" y="1155.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="78.3" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.18%)</title><rect x="75.3" y="1139.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="78.3" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.18%)</title><rect x="75.3" y="1123.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="78.3" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.18%)</title><rect x="75.3" y="1107.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="78.3" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.18%)</title><rect x="75.3" y="1091.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="78.3" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.cancellationRequested (1 samples, 0.18%)</title><rect x="75.3" y="1075.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="78.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.18%)</title><rect x="77.5" y="1251.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="80.5" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.18%)</title><rect x="77.5" y="1235.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="80.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.18%)</title><rect x="77.5" y="1219.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="80.5" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.18%)</title><rect x="77.5" y="1203.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="80.5" y="1214.0"></text>
</g>
<g>
<title>java/lang/Thread.run (236 samples, 43.54%)</title><rect x="79.7" y="1315.0" width="513.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="82.7" y="1326.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (236 samples, 43.54%)</title><rect x="79.7" y="1299.0" width="513.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="82.7" y="1310.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (236 samples, 43.54%)</title><rect x="79.7" y="1283.0" width="513.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="82.7" y="1294.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/1325189724.run (221 samples, 40.77%)</title><rect x="81.8" y="1267.0" width="481.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="84.8" y="1278.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/1..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (221 samples, 40.77%)</title><rect x="81.8" y="1251.0" width="481.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="84.8" y="1262.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTas..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (221 samples, 40.77%)</title><rect x="81.8" y="1235.0" width="481.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="84.8" y="1246.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (218 samples, 40.22%)</title><rect x="81.8" y="1219.0" width="474.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="84.8" y="1230.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleTh..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (1 samples, 0.18%)</title><rect x="90.6" y="1203.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="93.6" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (33 samples, 6.09%)</title><rect x="92.7" y="1203.0" width="71.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="95.7" y="1214.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (33 samples, 6.09%)</title><rect x="92.7" y="1187.0" width="71.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="95.7" y="1198.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (33 samples, 6.09%)</title><rect x="92.7" y="1171.0" width="71.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="95.7" y="1182.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (33 samples, 6.09%)</title><rect x="92.7" y="1155.0" width="71.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="95.7" y="1166.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (33 samples, 6.09%)</title><rect x="92.7" y="1139.0" width="71.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="95.7" y="1150.0">com/line..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (33 samples, 6.09%)</title><rect x="92.7" y="1123.0" width="71.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="95.7" y="1134.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (19 samples, 3.51%)</title><rect x="92.7" y="1107.0" width="41.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="95.7" y="1118.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (11 samples, 2.03%)</title><rect x="92.7" y="1091.0" width="24.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="95.7" y="1102.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (11 samples, 2.03%)</title><rect x="92.7" y="1075.0" width="24.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="95.7" y="1086.0">c..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.18%)</title><rect x="112.3" y="1059.0" width="2.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="115.3" y="1070.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.18%)</title><rect x="112.3" y="1043.0" width="2.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="115.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.18%)</title><rect x="114.5" y="1059.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="117.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.18%)</title><rect x="114.5" y="1043.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="117.5" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.18%)</title><rect x="114.5" y="1027.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="117.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.18%)</title><rect x="114.5" y="1011.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="117.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.18%)</title><rect x="114.5" y="995.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="117.5" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (8 samples, 1.48%)</title><rect x="116.7" y="1091.0" width="17.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="119.7" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (1 samples, 0.18%)</title><rect x="116.7" y="1075.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="119.7" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (7 samples, 1.29%)</title><rect x="118.9" y="1075.0" width="15.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="121.9" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.37%)</title><rect x="125.4" y="1059.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="128.4" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.37%)</title><rect x="125.4" y="1043.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="128.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.37%)</title><rect x="125.4" y="1027.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="128.4" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (2 samples, 0.37%)</title><rect x="129.7" y="1059.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="132.7" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (12 samples, 2.21%)</title><rect x="134.1" y="1107.0" width="26.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="137.1" y="1118.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (12 samples, 2.21%)</title><rect x="134.1" y="1091.0" width="26.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="137.1" y="1102.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.37%)</title><rect x="134.1" y="1075.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="137.1" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.37%)</title><rect x="134.1" y="1059.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="137.1" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (10 samples, 1.85%)</title><rect x="138.5" y="1075.0" width="21.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="141.5" y="1086.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (10 samples, 1.85%)</title><rect x="138.5" y="1059.0" width="21.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="141.5" y="1070.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (10 samples, 1.85%)</title><rect x="138.5" y="1043.0" width="21.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="141.5" y="1054.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.37%)</title><rect x="138.5" y="1027.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="141.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.18%)</title><rect x="140.6" y="1011.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="143.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.18%)</title><rect x="140.6" y="995.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="143.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.18%)</title><rect x="142.8" y="1027.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="145.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.18%)</title><rect x="142.8" y="1011.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="145.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.18%)</title><rect x="142.8" y="995.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="145.8" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.18%)</title><rect x="142.8" y="979.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="145.8" y="990.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.18%)</title><rect x="142.8" y="963.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="145.8" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.55%)</title><rect x="145.0" y="1027.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="148.0" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.18%)</title><rect x="151.5" y="1027.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="154.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.18%)</title><rect x="151.5" y="1011.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="154.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.18%)</title><rect x="151.5" y="995.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="154.5" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.18%)</title><rect x="151.5" y="979.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="154.5" y="990.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.18%)</title><rect x="151.5" y="963.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="154.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 0.55%)</title><rect x="153.7" y="1027.0" width="6.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="156.7" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.55%)</title><rect x="153.7" y="1011.0" width="6.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="156.7" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.55%)</title><rect x="153.7" y="995.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="156.7" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.37%)</title><rect x="160.2" y="1107.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="163.2" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.37%)</title><rect x="160.2" y="1091.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="163.2" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.37%)</title><rect x="160.2" y="1075.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="163.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (2 samples, 0.37%)</title><rect x="160.2" y="1059.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="163.2" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (156 samples, 28.78%)</title><rect x="164.6" y="1203.0" width="339.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="167.6" y="1214.0">com/linecorp/decaton/processor/runtime/Process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (34 samples, 6.27%)</title><rect x="164.6" y="1187.0" width="74.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="167.6" y="1198.0">com/line..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (32 samples, 5.90%)</title><rect x="168.9" y="1171.0" width="69.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="171.9" y="1182.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (28 samples, 5.17%)</title><rect x="177.6" y="1155.0" width="61.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="180.6" y="1166.0">ch/qos..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.18%)</title><rect x="179.8" y="1139.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="182.8" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.18%)</title><rect x="179.8" y="1123.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="182.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.18%)</title><rect x="179.8" y="1107.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="182.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.18%)</title><rect x="179.8" y="1091.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="182.8" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.18%)</title><rect x="179.8" y="1075.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="182.8" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (26 samples, 4.80%)</title><rect x="182.0" y="1139.0" width="56.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="185.0" y="1150.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.remove (24 samples, 4.43%)</title><rect x="186.3" y="1123.0" width="52.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="189.3" y="1134.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 1.29%)</title><rect x="223.4" y="1107.0" width="15.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="226.4" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.37%)</title><rect x="238.6" y="1187.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="241.6" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.37%)</title><rect x="238.6" y="1171.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="241.6" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.37%)</title><rect x="238.6" y="1155.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="241.6" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (29 samples, 5.35%)</title><rect x="243.0" y="1187.0" width="63.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="246.0" y="1198.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (29 samples, 5.35%)</title><rect x="243.0" y="1171.0" width="63.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="246.0" y="1182.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (12 samples, 2.21%)</title><rect x="245.1" y="1155.0" width="26.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="248.1" y="1166.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (12 samples, 2.21%)</title><rect x="245.1" y="1139.0" width="26.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="248.1" y="1150.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (9 samples, 1.66%)</title><rect x="249.5" y="1123.0" width="19.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="252.5" y="1134.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 0.74%)</title><rect x="253.8" y="1107.0" width="8.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="256.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (4 samples, 0.74%)</title><rect x="253.8" y="1091.0" width="8.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="256.8" y="1102.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.74%)</title><rect x="253.8" y="1075.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="256.8" y="1086.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.18%)</title><rect x="258.2" y="1059.0" width="2.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="261.2" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.18%)</title><rect x="258.2" y="1043.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="261.2" y="1054.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.18%)</title><rect x="260.4" y="1059.0" width="2.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="263.4" y="1070.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.18%)</title><rect x="262.5" y="1107.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="265.5" y="1118.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.18%)</title><rect x="264.7" y="1107.0" width="2.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="267.7" y="1118.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.18%)</title><rect x="266.9" y="1107.0" width="2.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="269.9" y="1118.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.18%)</title><rect x="269.1" y="1123.0" width="2.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="272.1" y="1134.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (16 samples, 2.95%)</title><rect x="271.3" y="1155.0" width="34.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="274.3" y="1166.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (13 samples, 2.40%)</title><rect x="277.8" y="1139.0" width="28.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="280.8" y="1150.0">ch..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (13 samples, 2.40%)</title><rect x="277.8" y="1123.0" width="28.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="280.8" y="1134.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (12 samples, 2.21%)</title><rect x="280.0" y="1107.0" width="26.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="283.0" y="1118.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 1.11%)</title><rect x="293.0" y="1091.0" width="13.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="296.0" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.37%)</title><rect x="297.4" y="1075.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="300.4" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.37%)</title><rect x="297.4" y="1059.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="300.4" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.18%)</title><rect x="299.6" y="1043.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="302.6" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.18%)</title><rect x="299.6" y="1027.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="302.6" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.18%)</title><rect x="299.6" y="1011.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="302.6" y="1022.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.37%)</title><rect x="301.7" y="1075.0" width="4.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="304.7" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (78 samples, 14.39%)</title><rect x="306.1" y="1187.0" width="169.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="309.1" y="1198.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (78 samples, 14.39%)</title><rect x="306.1" y="1171.0" width="169.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="309.1" y="1182.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1487619603.process (64 samples, 11.81%)</title><rect x="310.4" y="1155.0" width="139.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="313.4" y="1166.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (64 samples, 11.81%)</title><rect x="310.4" y="1139.0" width="139.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="313.4" y="1150.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (64 samples, 11.81%)</title><rect x="310.4" y="1123.0" width="139.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="313.4" y="1134.0">com/linecorp/deca..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.18%)</title><rect x="317.0" y="1107.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="320.0" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.18%)</title><rect x="317.0" y="1091.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="320.0" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.18%)</title><rect x="317.0" y="1075.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="320.0" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.18%)</title><rect x="317.0" y="1059.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="320.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.18%)</title><rect x="317.0" y="1043.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="320.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.18%)</title><rect x="317.0" y="1027.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="320.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (56 samples, 10.33%)</title><rect x="319.2" y="1107.0" width="121.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="322.2" y="1118.0">com/linecorp/de..</text>
</g>
<g>
<title>java/lang/Thread.sleep (56 samples, 10.33%)</title><rect x="319.2" y="1091.0" width="121.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="322.2" y="1102.0">java/lang/Threa..</text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.18%)</title><rect x="325.7" y="1075.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="328.7" y="1086.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.18%)</title><rect x="325.7" y="1059.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="328.7" y="1070.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.18%)</title><rect x="325.7" y="1043.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="328.7" y="1054.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.18%)</title><rect x="325.7" y="1027.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="328.7" y="1038.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.18%)</title><rect x="325.7" y="1011.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="328.7" y="1022.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.18%)</title><rect x="325.7" y="995.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="328.7" y="1006.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.18%)</title><rect x="325.7" y="979.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="328.7" y="990.0"></text>
</g>
<g>
<title>AdapterHandlerLibrary::create_native_wrapper(methodHandle) (1 samples, 0.18%)</title><rect x="325.7" y="963.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="328.7" y="974.0"></text>
</g>
<g>
<title>SharedRuntime::generate_native_wrapper(MacroAssembler*, methodHandle, int, BasicType*, VMRegPair*, BasicType) (1 samples, 0.18%)</title><rect x="325.7" y="947.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="328.7" y="958.0"></text>
</g>
<g>
<title>nmethod::new_native_nmethod(methodHandle, int, CodeBuffer*, int, int, int, int, int, OopMapSet*) (1 samples, 0.18%)</title><rect x="325.7" y="931.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="328.7" y="942.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.18%)</title><rect x="325.7" y="915.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="328.7" y="926.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.18%)</title><rect x="325.7" y="899.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="328.7" y="910.0"></text>
</g>
<g>
<title>JVM_Sleep (49 samples, 9.04%)</title><rect x="327.9" y="1075.0" width="106.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="330.9" y="1086.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.55%)</title><rect x="334.4" y="1059.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="337.4" y="1070.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.18%)</title><rect x="340.9" y="1059.0" width="2.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="343.9" y="1070.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.37%)</title><rect x="343.1" y="1059.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="346.1" y="1070.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (40 samples, 7.38%)</title><rect x="347.5" y="1059.0" width="87.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="350.5" y="1070.0">os::sleep(..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.18%)</title><rect x="364.9" y="1043.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="367.9" y="1054.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.55%)</title><rect x="367.0" y="1043.0" width="6.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="370.0" y="1054.0"></text>
</g>
<g>
<title>__pthread_cond_init (2 samples, 0.37%)</title><rect x="373.6" y="1043.0" width="4.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="376.6" y="1054.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (15 samples, 2.77%)</title><rect x="377.9" y="1043.0" width="32.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="380.9" y="1054.0">__..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.18%)</title><rect x="410.6" y="1043.0" width="2.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="413.6" y="1054.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.18%)</title><rect x="412.8" y="1043.0" width="2.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="415.8" y="1054.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.18%)</title><rect x="414.9" y="1043.0" width="2.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="417.9" y="1054.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 0.74%)</title><rect x="417.1" y="1043.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="420.1" y="1054.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (1 samples, 0.18%)</title><rect x="425.8" y="1043.0" width="2.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="428.8" y="1054.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.37%)</title><rect x="428.0" y="1043.0" width="4.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="431.0" y="1054.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.18%)</title><rect x="432.4" y="1043.0" width="2.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="435.4" y="1054.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.18%)</title><rect x="434.5" y="1075.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="437.5" y="1086.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.18%)</title><rect x="436.7" y="1075.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="439.7" y="1086.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.18%)</title><rect x="438.9" y="1075.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="441.9" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.18%)</title><rect x="441.1" y="1107.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="444.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.55%)</title><rect x="443.2" y="1107.0" width="6.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="446.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.37%)</title><rect x="445.4" y="1091.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="448.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.37%)</title><rect x="445.4" y="1075.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="448.4" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (1 samples, 0.18%)</title><rect x="449.8" y="1155.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="452.8" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$288/370155892.complete (1 samples, 0.18%)</title><rect x="452.0" y="1155.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="455.0" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.lambda$pushDownStream$67 (1 samples, 0.18%)</title><rect x="452.0" y="1139.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="455.0" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.37%)</title><rect x="454.1" y="1155.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="457.1" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.37%)</title><rect x="454.1" y="1139.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="457.1" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.55%)</title><rect x="458.5" y="1155.0" width="6.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="461.5" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.55%)</title><rect x="458.5" y="1139.0" width="6.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="461.5" y="1150.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.37%)</title><rect x="458.5" y="1123.0" width="4.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="461.5" y="1134.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.18%)</title><rect x="462.8" y="1123.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="465.8" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.55%)</title><rect x="465.0" y="1155.0" width="6.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="468.0" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.55%)</title><rect x="465.0" y="1139.0" width="6.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="468.0" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.18%)</title><rect x="469.4" y="1123.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="472.4" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.18%)</title><rect x="469.4" y="1107.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="472.4" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (2 samples, 0.37%)</title><rect x="471.5" y="1155.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="474.5" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 2.40%)</title><rect x="475.9" y="1187.0" width="28.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="478.9" y="1198.0">ja..</text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.18%)</title><rect x="502.0" y="1171.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="505.0" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (24 samples, 4.43%)</title><rect x="504.2" y="1203.0" width="52.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="507.2" y="1214.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (21 samples, 3.87%)</title><rect x="510.7" y="1187.0" width="45.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="513.7" y="1198.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (21 samples, 3.87%)</title><rect x="510.7" y="1171.0" width="45.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="513.7" y="1182.0">java..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$293/1613742351.accept (21 samples, 3.87%)</title><rect x="510.7" y="1155.0" width="45.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="513.7" y="1166.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$45 (21 samples, 3.87%)</title><rect x="510.7" y="1139.0" width="45.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="513.7" y="1150.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/1219200556.complete (21 samples, 3.87%)</title><rect x="510.7" y="1123.0" width="45.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="513.7" y="1134.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$5 (21 samples, 3.87%)</title><rect x="510.7" y="1107.0" width="45.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="513.7" y="1118.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/456944376.complete (18 samples, 3.32%)</title><rect x="510.7" y="1091.0" width="39.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="513.7" y="1102.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (18 samples, 3.32%)</title><rect x="510.7" y="1075.0" width="39.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="513.7" y="1086.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (18 samples, 3.32%)</title><rect x="510.7" y="1059.0" width="39.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="513.7" y="1070.0">com..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (18 samples, 3.32%)</title><rect x="510.7" y="1043.0" width="39.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="513.7" y="1054.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (18 samples, 3.32%)</title><rect x="510.7" y="1027.0" width="39.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="513.7" y="1038.0">ch/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$276/787011348.complete (3 samples, 0.55%)</title><rect x="549.9" y="1091.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="552.9" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$null$70 (3 samples, 0.55%)</title><rect x="549.9" y="1075.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="552.9" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (3 samples, 0.55%)</title><rect x="556.5" y="1219.0" width="6.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="559.5" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.37%)</title><rect x="563.0" y="1267.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="566.0" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.37%)</title><rect x="563.0" y="1251.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="566.0" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.37%)</title><rect x="563.0" y="1235.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="566.0" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.37%)</title><rect x="563.0" y="1219.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="566.0" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (12 samples, 2.21%)</title><rect x="567.3" y="1267.0" width="26.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="570.3" y="1278.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (7 samples, 1.29%)</title><rect x="573.9" y="1251.0" width="15.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="576.9" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.74%)</title><rect x="580.4" y="1235.0" width="8.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="583.4" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.74%)</title><rect x="580.4" y="1219.0" width="8.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="583.4" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.74%)</title><rect x="580.4" y="1203.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="583.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.74%)</title><rect x="580.4" y="1187.0" width="8.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="583.4" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateOf (2 samples, 0.37%)</title><rect x="589.1" y="1251.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="592.1" y="1262.0"></text>
</g>
<g>
<title>sort_dep_arg_1(ciBaseObject**, ciBaseObject**) (1 samples, 0.18%)</title><rect x="593.5" y="1315.0" width="2.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="596.5" y="1326.0"></text>
</g>
<g>
<title>start_thread (273 samples, 50.37%)</title><rect x="595.6" y="1315.0" width="594.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="598.6" y="1326.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (273 samples, 50.37%)</title><rect x="595.6" y="1299.0" width="594.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="598.6" y="1310.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (19 samples, 3.51%)</title><rect x="595.6" y="1283.0" width="41.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="598.6" y="1294.0">Gan..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (19 samples, 3.51%)</title><rect x="595.6" y="1267.0" width="41.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="598.6" y="1278.0">G1P..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (19 samples, 3.51%)</title><rect x="595.6" y="1251.0" width="41.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="598.6" y="1262.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (17 samples, 3.14%)</title><rect x="597.8" y="1235.0" width="37.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="600.8" y="1246.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (9 samples, 1.66%)</title><rect x="608.7" y="1219.0" width="19.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="611.7" y="1230.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (3 samples, 0.55%)</title><rect x="619.6" y="1203.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="622.6" y="1214.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.18%)</title><rect x="623.9" y="1187.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="626.9" y="1198.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_v(oopDesc*, ExtendedOopClosure*) (1 samples, 0.18%)</title><rect x="626.1" y="1203.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="629.1" y="1214.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (3 samples, 0.55%)</title><rect x="628.3" y="1219.0" width="6.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="631.3" y="1230.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.18%)</title><rect x="634.8" y="1235.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="637.8" y="1246.0"></text>
</g>
<g>
<title>JavaThread::run() (253 samples, 46.68%)</title><rect x="637.0" y="1283.0" width="550.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="640.0" y="1294.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (253 samples, 46.68%)</title><rect x="637.0" y="1267.0" width="550.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="640.0" y="1278.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (252 samples, 46.49%)</title><rect x="637.0" y="1251.0" width="548.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="640.0" y="1262.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (250 samples, 46.13%)</title><rect x="637.0" y="1235.0" width="544.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="640.0" y="1246.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (246 samples, 45.39%)</title><rect x="637.0" y="1219.0" width="535.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="640.0" y="1230.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (246 samples, 45.39%)</title><rect x="637.0" y="1203.0" width="535.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="640.0" y="1214.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.18%)</title><rect x="637.0" y="1187.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="640.0" y="1198.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.18%)</title><rect x="637.0" y="1171.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="640.0" y="1182.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.18%)</title><rect x="637.0" y="1155.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="640.0" y="1166.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.18%)</title><rect x="637.0" y="1139.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="640.0" y="1150.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.18%)</title><rect x="637.0" y="1123.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="640.0" y="1134.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.18%)</title><rect x="637.0" y="1107.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="640.0" y="1118.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.18%)</title><rect x="637.0" y="1091.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="640.0" y="1102.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.18%)</title><rect x="637.0" y="1075.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="640.0" y="1086.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.18%)</title><rect x="637.0" y="1059.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="640.0" y="1070.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.18%)</title><rect x="637.0" y="1043.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="640.0" y="1054.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.18%)</title><rect x="637.0" y="1027.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="640.0" y="1038.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.18%)</title><rect x="637.0" y="1011.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="640.0" y="1022.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.18%)</title><rect x="637.0" y="995.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="640.0" y="1006.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.18%)</title><rect x="637.0" y="979.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="640.0" y="990.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.18%)</title><rect x="637.0" y="963.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="640.0" y="974.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.18%)</title><rect x="637.0" y="947.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="640.0" y="958.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.18%)</title><rect x="637.0" y="931.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="640.0" y="942.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.18%)</title><rect x="637.0" y="915.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="640.0" y="926.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (54 samples, 9.96%)</title><rect x="639.2" y="1187.0" width="117.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="642.2" y="1198.0">Compile::Code_..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.37%)</title><rect x="639.2" y="1171.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="642.2" y="1182.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.18%)</title><rect x="639.2" y="1155.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="642.2" y="1166.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.18%)</title><rect x="641.4" y="1155.0" width="2.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="644.4" y="1166.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.18%)</title><rect x="643.5" y="1171.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="646.5" y="1182.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.18%)</title><rect x="643.5" y="1155.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="646.5" y="1166.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.18%)</title><rect x="643.5" y="1139.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="646.5" y="1150.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.18%)</title><rect x="643.5" y="1123.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="646.5" y="1134.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 0.92%)</title><rect x="645.7" y="1171.0" width="10.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="648.7" y="1182.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.18%)</title><rect x="645.7" y="1155.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="648.7" y="1166.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 0.74%)</title><rect x="647.9" y="1155.0" width="8.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="650.9" y="1166.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.37%)</title><rect x="647.9" y="1139.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="650.9" y="1150.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.18%)</title><rect x="652.3" y="1139.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="655.3" y="1150.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.18%)</title><rect x="654.4" y="1139.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="657.4" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.37%)</title><rect x="656.6" y="1171.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="659.6" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.37%)</title><rect x="656.6" y="1155.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="659.6" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.18%)</title><rect x="656.6" y="1139.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="659.6" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.18%)</title><rect x="658.8" y="1139.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="661.8" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.18%)</title><rect x="658.8" y="1123.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="661.8" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (44 samples, 8.12%)</title><rect x="661.0" y="1171.0" width="95.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="664.0" y="1182.0">PhaseChaiti..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.18%)</title><rect x="663.1" y="1155.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="666.1" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.55%)</title><rect x="665.3" y="1155.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="668.3" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.18%)</title><rect x="667.5" y="1139.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="670.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.18%)</title><rect x="669.7" y="1139.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="672.7" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.18%)</title><rect x="669.7" y="1123.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="672.7" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.37%)</title><rect x="671.8" y="1155.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="674.8" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.18%)</title><rect x="671.8" y="1139.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="674.8" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.18%)</title><rect x="674.0" y="1139.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="677.0" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.18%)</title><rect x="674.0" y="1123.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="677.0" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 1.11%)</title><rect x="676.2" y="1155.0" width="13.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="679.2" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 1.66%)</title><rect x="689.3" y="1155.0" width="19.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="692.3" y="1166.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.18%)</title><rect x="691.4" y="1139.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="694.4" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.18%)</title><rect x="693.6" y="1139.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="696.6" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (6 samples, 1.11%)</title><rect x="695.8" y="1139.0" width="13.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="698.8" y="1150.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.18%)</title><rect x="704.5" y="1123.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="707.5" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.18%)</title><rect x="706.7" y="1123.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="709.7" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.18%)</title><rect x="708.9" y="1155.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="711.9" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.18%)</title><rect x="708.9" y="1139.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="711.9" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.37%)</title><rect x="711.0" y="1155.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="714.0" y="1166.0"></text>
</g>
<g>
<title>TypeNode::ideal_reg() const (1 samples, 0.18%)</title><rect x="713.2" y="1139.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="716.2" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.37%)</title><rect x="715.4" y="1155.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="718.4" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (2 samples, 0.37%)</title><rect x="715.4" y="1139.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="718.4" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.55%)</title><rect x="719.7" y="1155.0" width="6.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="722.7" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.18%)</title><rect x="724.1" y="1139.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="727.1" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.18%)</title><rect x="724.1" y="1123.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="727.1" y="1134.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (1 samples, 0.18%)</title><rect x="724.1" y="1107.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="727.1" y="1118.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.18%)</title><rect x="724.1" y="1091.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="727.1" y="1102.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (6 samples, 1.11%)</title><rect x="726.3" y="1155.0" width="13.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="729.3" y="1166.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (6 samples, 1.11%)</title><rect x="726.3" y="1139.0" width="13.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="729.3" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.18%)</title><rect x="726.3" y="1123.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="729.3" y="1134.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (5 samples, 0.92%)</title><rect x="728.5" y="1123.0" width="10.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="731.5" y="1134.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.37%)</title><rect x="728.5" y="1107.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="731.5" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.18%)</title><rect x="730.6" y="1091.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="733.6" y="1102.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (3 samples, 0.55%)</title><rect x="732.8" y="1107.0" width="6.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="735.8" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.18%)</title><rect x="737.2" y="1091.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="740.2" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.37%)</title><rect x="739.3" y="1155.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="742.3" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.37%)</title><rect x="739.3" y="1139.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="742.3" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.18%)</title><rect x="743.7" y="1155.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="746.7" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.18%)</title><rect x="743.7" y="1139.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="746.7" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.18%)</title><rect x="745.9" y="1155.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="748.9" y="1166.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.18%)</title><rect x="745.9" y="1139.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="748.9" y="1150.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 0.74%)</title><rect x="748.0" y="1155.0" width="8.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="751.0" y="1166.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.55%)</title><rect x="750.2" y="1139.0" width="6.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="753.2" y="1150.0"></text>
</g>
<g>
<title>_init (1 samples, 0.18%)</title><rect x="754.6" y="1123.0" width="2.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="757.6" y="1134.0"></text>
</g>
<g>
<title>Compile::Optimize() (183 samples, 33.76%)</title><rect x="756.8" y="1187.0" width="398.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="759.8" y="1198.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 0.37%)</title><rect x="756.8" y="1171.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="759.8" y="1182.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 0.37%)</title><rect x="756.8" y="1155.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="759.8" y="1166.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.18%)</title><rect x="756.8" y="1139.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="759.8" y="1150.0"></text>
</g>
<g>
<title>ConINode::Opcode() const (1 samples, 0.18%)</title><rect x="758.9" y="1139.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="761.9" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (5 samples, 0.92%)</title><rect x="761.1" y="1171.0" width="10.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="764.1" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (5 samples, 0.92%)</title><rect x="761.1" y="1155.0" width="10.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="764.1" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (4 samples, 0.74%)</title><rect x="763.3" y="1139.0" width="8.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="766.3" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.55%)</title><rect x="763.3" y="1123.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="766.3" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.55%)</title><rect x="763.3" y="1107.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="766.3" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.55%)</title><rect x="763.3" y="1091.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="766.3" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="763.3" y="1075.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="766.3" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="763.3" y="1059.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="766.3" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="763.3" y="1043.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="766.3" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="763.3" y="1027.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="766.3" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="763.3" y="1011.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="766.3" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="763.3" y="995.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="766.3" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="763.3" y="979.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="766.3" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="763.3" y="963.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="766.3" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="763.3" y="947.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="766.3" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="763.3" y="931.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="766.3" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="763.3" y="915.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="766.3" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="763.3" y="899.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="766.3" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.18%)</title><rect x="763.3" y="883.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="766.3" y="894.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.18%)</title><rect x="763.3" y="867.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="766.3" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.37%)</title><rect x="765.5" y="1075.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="768.5" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.37%)</title><rect x="765.5" y="1059.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="768.5" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.37%)</title><rect x="765.5" y="1043.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="768.5" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.37%)</title><rect x="765.5" y="1027.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="768.5" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.37%)</title><rect x="765.5" y="1011.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="768.5" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.37%)</title><rect x="765.5" y="995.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="768.5" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.37%)</title><rect x="765.5" y="979.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="768.5" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.37%)</title><rect x="765.5" y="963.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="768.5" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.18%)</title><rect x="765.5" y="947.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="768.5" y="958.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.18%)</title><rect x="765.5" y="931.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="768.5" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="947.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="770.6" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="931.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="770.6" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="915.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="770.6" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="899.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="770.6" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="883.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="770.6" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="867.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="770.6" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="851.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="770.6" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="835.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="770.6" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="819.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="770.6" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="803.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="770.6" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="787.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="770.6" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="771.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="770.6" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="755.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="770.6" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="739.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="770.6" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="723.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="770.6" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="707.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="770.6" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="691.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="770.6" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="675.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="770.6" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="659.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="770.6" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="643.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="770.6" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="627.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="770.6" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="611.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="770.6" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="595.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="770.6" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="579.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="770.6" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="563.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="770.6" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="547.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="770.6" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="531.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="770.6" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="515.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="770.6" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="499.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="770.6" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="483.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="770.6" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="467.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="770.6" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="451.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="770.6" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="435.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="770.6" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="419.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="770.6" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="403.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="770.6" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="387.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="770.6" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="371.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="770.6" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="355.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="770.6" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="339.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="770.6" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="323.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="770.6" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="307.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="770.6" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="291.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="770.6" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="275.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="770.6" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="259.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="770.6" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="243.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="770.6" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="227.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="770.6" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="211.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="770.6" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="195.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="770.6" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="179.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="770.6" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="163.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="770.6" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="147.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="770.6" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="131.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="770.6" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="115.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="770.6" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="99.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="770.6" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="83.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="770.6" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="67.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="770.6" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="51.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="770.6" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.18%)</title><rect x="767.6" y="35.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="770.6" y="46.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.18%)</title><rect x="769.8" y="1123.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="772.8" y="1134.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.18%)</title><rect x="769.8" y="1107.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="772.8" y="1118.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.18%)</title><rect x="772.0" y="1171.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="775.0" y="1182.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.18%)</title><rect x="772.0" y="1155.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="775.0" y="1166.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.18%)</title><rect x="772.0" y="1139.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="775.0" y="1150.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.18%)</title><rect x="772.0" y="1123.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="775.0" y="1134.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.18%)</title><rect x="772.0" y="1107.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="775.0" y="1118.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.18%)</title><rect x="772.0" y="1091.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="775.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (163 samples, 30.07%)</title><rect x="774.2" y="1171.0" width="354.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="777.2" y="1182.0">PhaseIdealLoop::build_and_optimize(bool, bool)</text>
</g>
<g>
<title>CountedLoopEndNode::Opcode() const (1 samples, 0.18%)</title><rect x="774.2" y="1155.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="777.2" y="1166.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.18%)</title><rect x="776.3" y="1155.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="779.3" y="1166.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.18%)</title><rect x="776.3" y="1139.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="779.3" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.18%)</title><rect x="776.3" y="1123.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="779.3" y="1134.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*) (1 samples, 0.18%)</title><rect x="776.3" y="1107.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="779.3" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 0.74%)</title><rect x="778.5" y="1155.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="781.5" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.18%)</title><rect x="787.2" y="1155.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="790.2" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (150 samples, 27.68%)</title><rect x="789.4" y="1155.0" width="326.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="792.4" y="1166.0">PhaseIdealLoop::build_loop_late(VectorSet&amp;, ..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (147 samples, 27.12%)</title><rect x="795.9" y="1139.0" width="320.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="798.9" y="1150.0">PhaseIdealLoop::build_loop_late_post(Node*)</text>
</g>
<g>
<title>Node::unique_ctrl_out() (1 samples, 0.18%)</title><rect x="795.9" y="1123.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="798.9" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (5 samples, 0.92%)</title><rect x="798.1" y="1123.0" width="10.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="801.1" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (141 samples, 26.01%)</title><rect x="809.0" y="1123.0" width="307.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="812.0" y="1134.0">PhaseIdealLoop::get_late_ctrl(Node*, Node*)</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (27 samples, 4.98%)</title><rect x="1057.2" y="1107.0" width="58.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1060.2" y="1118.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.37%)</title><rect x="1116.0" y="1155.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1119.0" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.55%)</title><rect x="1120.3" y="1155.0" width="6.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1123.3" y="1166.0"></text>
</g>
<g>
<title>LoadNNode::Opcode() const (1 samples, 0.18%)</title><rect x="1122.5" y="1139.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.18%)</title><rect x="1124.7" y="1139.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1127.7" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.18%)</title><rect x="1124.7" y="1123.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1127.7" y="1134.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.18%)</title><rect x="1126.9" y="1155.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1129.9" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (11 samples, 2.03%)</title><rect x="1129.0" y="1171.0" width="24.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.0" y="1182.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (11 samples, 2.03%)</title><rect x="1129.0" y="1155.0" width="24.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1132.0" y="1166.0">P..</text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.37%)</title><rect x="1129.0" y="1139.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1132.0" y="1150.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.18%)</title><rect x="1129.0" y="1123.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.0" y="1134.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.18%)</title><rect x="1129.0" y="1107.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1132.0" y="1118.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.18%)</title><rect x="1129.0" y="1091.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1132.0" y="1102.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.18%)</title><rect x="1131.2" y="1123.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.2" y="1134.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.18%)</title><rect x="1131.2" y="1107.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1134.2" y="1118.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.18%)</title><rect x="1131.2" y="1091.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.2" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.55%)</title><rect x="1133.4" y="1139.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.37%)</title><rect x="1135.6" y="1123.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1138.6" y="1134.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (2 samples, 0.37%)</title><rect x="1135.6" y="1107.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1138.6" y="1118.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.37%)</title><rect x="1139.9" y="1139.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.9" y="1150.0"></text>
</g>
<g>
<title>PhiNode::adr_type() const (1 samples, 0.18%)</title><rect x="1142.1" y="1123.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1145.1" y="1134.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (3 samples, 0.55%)</title><rect x="1144.3" y="1139.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1147.3" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.18%)</title><rect x="1144.3" y="1123.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.3" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.18%)</title><rect x="1144.3" y="1107.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.3" y="1118.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.18%)</title><rect x="1144.3" y="1091.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.3" y="1102.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.18%)</title><rect x="1146.5" y="1123.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.5" y="1134.0"></text>
</g>
<g>
<title>RegionNode::try_clean_mem_phi(PhaseGVN*) (1 samples, 0.18%)</title><rect x="1148.6" y="1123.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1151.6" y="1134.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.18%)</title><rect x="1150.8" y="1139.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.8" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.18%)</title><rect x="1150.8" y="1123.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1153.8" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.18%)</title><rect x="1150.8" y="1107.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.8" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.18%)</title><rect x="1150.8" y="1091.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.8" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.18%)</title><rect x="1150.8" y="1075.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.8" y="1086.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.18%)</title><rect x="1150.8" y="1059.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.8" y="1070.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.18%)</title><rect x="1150.8" y="1043.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.8" y="1054.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.18%)</title><rect x="1153.0" y="1171.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.0" y="1182.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.18%)</title><rect x="1153.0" y="1155.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.0" y="1166.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.18%)</title><rect x="1153.0" y="1139.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.0" y="1150.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.18%)</title><rect x="1153.0" y="1123.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.0" y="1134.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.18%)</title><rect x="1153.0" y="1107.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.0" y="1118.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.18%)</title><rect x="1153.0" y="1091.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.0" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 1.29%)</title><rect x="1155.2" y="1187.0" width="15.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.2" y="1198.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 1.29%)</title><rect x="1155.2" y="1171.0" width="15.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.2" y="1182.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 1.29%)</title><rect x="1155.2" y="1155.0" width="15.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.2" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 1.29%)</title><rect x="1155.2" y="1139.0" width="15.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.2" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 1.29%)</title><rect x="1155.2" y="1123.0" width="15.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.2" y="1134.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 1.29%)</title><rect x="1155.2" y="1107.0" width="15.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.2" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 1.11%)</title><rect x="1155.2" y="1091.0" width="13.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.2" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 1.11%)</title><rect x="1155.2" y="1075.0" width="13.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.2" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 1.11%)</title><rect x="1155.2" y="1059.0" width="13.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.2" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 1.11%)</title><rect x="1155.2" y="1043.0" width="13.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.2" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 1.11%)</title><rect x="1155.2" y="1027.0" width="13.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.2" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 1.11%)</title><rect x="1155.2" y="1011.0" width="13.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.2" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.55%)</title><rect x="1155.2" y="995.0" width="6.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1158.2" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.55%)</title><rect x="1155.2" y="979.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.2" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.37%)</title><rect x="1155.2" y="963.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.2" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.37%)</title><rect x="1155.2" y="947.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.2" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.37%)</title><rect x="1155.2" y="931.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.2" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.37%)</title><rect x="1155.2" y="915.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.2" y="926.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.18%)</title><rect x="1155.2" y="899.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.2" y="910.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_call(JVMState*, ciMethod*, ciMethod*, bool) (1 samples, 0.18%)</title><rect x="1155.2" y="883.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.2" y="894.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_inline(JVMState*, ciMethod*, ciMethod*, bool&amp;) (1 samples, 0.18%)</title><rect x="1155.2" y="867.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.2" y="878.0"></text>
</g>
<g>
<title>ciMemberName::get_vmtarget() const (1 samples, 0.18%)</title><rect x="1155.2" y="851.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.2" y="862.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.18%)</title><rect x="1155.2" y="835.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.2" y="846.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.18%)</title><rect x="1155.2" y="819.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.2" y="830.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.18%)</title><rect x="1155.2" y="803.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.2" y="814.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.18%)</title><rect x="1155.2" y="787.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.2" y="798.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.18%)</title><rect x="1155.2" y="771.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.2" y="782.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.18%)</title><rect x="1155.2" y="755.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.2" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.18%)</title><rect x="1157.3" y="899.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.3" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.18%)</title><rect x="1157.3" y="883.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.18%)</title><rect x="1157.3" y="867.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.18%)</title><rect x="1157.3" y="851.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.18%)</title><rect x="1157.3" y="835.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.3" y="846.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.18%)</title><rect x="1157.3" y="819.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.3" y="830.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.18%)</title><rect x="1157.3" y="803.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.3" y="814.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.18%)</title><rect x="1157.3" y="787.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.3" y="798.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.18%)</title><rect x="1157.3" y="771.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.18%)</title><rect x="1159.5" y="963.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.5" y="974.0"></text>
</g>
<g>
<title>ReplacedNodes::apply(Node*) (1 samples, 0.18%)</title><rect x="1159.5" y="947.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.5" y="958.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.55%)</title><rect x="1161.7" y="995.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.7" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.55%)</title><rect x="1161.7" y="979.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.7" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.55%)</title><rect x="1161.7" y="963.0" width="6.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.7" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.55%)</title><rect x="1161.7" y="947.0" width="6.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.55%)</title><rect x="1161.7" y="931.0" width="6.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.7" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.55%)</title><rect x="1161.7" y="915.0" width="6.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.55%)</title><rect x="1161.7" y="899.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.7" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.55%)</title><rect x="1161.7" y="883.0" width="6.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.7" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.55%)</title><rect x="1161.7" y="867.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.55%)</title><rect x="1161.7" y="851.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.55%)</title><rect x="1161.7" y="835.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.55%)</title><rect x="1161.7" y="819.0" width="6.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.55%)</title><rect x="1161.7" y="803.0" width="6.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.7" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.55%)</title><rect x="1161.7" y="787.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.7" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.55%)</title><rect x="1161.7" y="771.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.55%)</title><rect x="1161.7" y="755.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.55%)</title><rect x="1161.7" y="739.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.55%)</title><rect x="1161.7" y="723.0" width="6.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.55%)</title><rect x="1161.7" y="707.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.7" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.18%)</title><rect x="1161.7" y="691.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.7" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.18%)</title><rect x="1161.7" y="675.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.18%)</title><rect x="1161.7" y="659.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.18%)</title><rect x="1161.7" y="643.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.18%)</title><rect x="1161.7" y="627.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.18%)</title><rect x="1161.7" y="611.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.7" y="622.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.18%)</title><rect x="1161.7" y="595.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.7" y="606.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.18%)</title><rect x="1161.7" y="579.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.7" y="590.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.18%)</title><rect x="1161.7" y="563.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.7" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.18%)</title><rect x="1161.7" y="547.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.7" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.18%)</title><rect x="1161.7" y="531.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.7" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.18%)</title><rect x="1161.7" y="515.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.7" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.18%)</title><rect x="1161.7" y="499.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.7" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.18%)</title><rect x="1161.7" y="483.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.7" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.18%)</title><rect x="1161.7" y="467.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.7" y="478.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.18%)</title><rect x="1161.7" y="451.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.7" y="462.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.18%)</title><rect x="1161.7" y="435.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.7" y="446.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.18%)</title><rect x="1161.7" y="419.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.7" y="430.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.18%)</title><rect x="1161.7" y="403.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.7" y="414.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.18%)</title><rect x="1161.7" y="387.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.7" y="398.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.18%)</title><rect x="1161.7" y="371.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.7" y="382.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.18%)</title><rect x="1161.7" y="355.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.7" y="366.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.18%)</title><rect x="1161.7" y="339.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.7" y="350.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.18%)</title><rect x="1161.7" y="323.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.7" y="334.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.18%)</title><rect x="1161.7" y="307.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.7" y="318.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.37%)</title><rect x="1163.9" y="691.0" width="4.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.9" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.37%)</title><rect x="1163.9" y="675.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.9" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.37%)</title><rect x="1163.9" y="659.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.37%)</title><rect x="1163.9" y="643.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.37%)</title><rect x="1163.9" y="627.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.37%)</title><rect x="1163.9" y="611.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.37%)</title><rect x="1163.9" y="595.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.9" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.37%)</title><rect x="1163.9" y="579.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.9" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.37%)</title><rect x="1163.9" y="563.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.37%)</title><rect x="1163.9" y="547.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.37%)</title><rect x="1163.9" y="531.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.37%)</title><rect x="1163.9" y="515.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.37%)</title><rect x="1163.9" y="499.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.9" y="510.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.37%)</title><rect x="1163.9" y="483.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.9" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.18%)</title><rect x="1163.9" y="467.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.9" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.18%)</title><rect x="1163.9" y="451.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.18%)</title><rect x="1163.9" y="435.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.18%)</title><rect x="1163.9" y="419.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.18%)</title><rect x="1163.9" y="403.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.18%)</title><rect x="1163.9" y="387.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.9" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.18%)</title><rect x="1163.9" y="371.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.9" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.18%)</title><rect x="1163.9" y="355.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1166.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.18%)</title><rect x="1163.9" y="339.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.18%)</title><rect x="1163.9" y="323.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.18%)</title><rect x="1163.9" y="307.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.18%)</title><rect x="1163.9" y="291.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.9" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.18%)</title><rect x="1163.9" y="275.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.9" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.18%)</title><rect x="1163.9" y="259.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.18%)</title><rect x="1163.9" y="243.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.18%)</title><rect x="1163.9" y="227.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.18%)</title><rect x="1163.9" y="211.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.18%)</title><rect x="1163.9" y="195.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.9" y="206.0"></text>
</g>
<g>
<title>Parse::profile_taken_branch(int, bool) (1 samples, 0.18%)</title><rect x="1163.9" y="179.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.9" y="190.0"></text>
</g>
<g>
<title>UncommonTrapCallGenerator::generate(JVMState*) (1 samples, 0.18%)</title><rect x="1166.1" y="467.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.1" y="478.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.18%)</title><rect x="1166.1" y="451.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.1" y="462.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.18%)</title><rect x="1166.1" y="435.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.1" y="446.0"></text>
</g>
<g>
<title>ConNode::make(Compile*, Type const*) (1 samples, 0.18%)</title><rect x="1166.1" y="419.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.1" y="430.0"></text>
</g>
<g>
<title>ConNode::ConNode(Type const*) (1 samples, 0.18%)</title><rect x="1166.1" y="403.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.1" y="414.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.18%)</title><rect x="1168.2" y="1091.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.2" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.18%)</title><rect x="1168.2" y="1075.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.2" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.18%)</title><rect x="1168.2" y="1059.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.2" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.18%)</title><rect x="1168.2" y="1043.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.2" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.18%)</title><rect x="1168.2" y="1027.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.2" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.18%)</title><rect x="1168.2" y="1011.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.2" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.18%)</title><rect x="1168.2" y="995.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.2" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.18%)</title><rect x="1168.2" y="979.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.2" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.18%)</title><rect x="1168.2" y="963.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.2" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.18%)</title><rect x="1168.2" y="947.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.2" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.18%)</title><rect x="1168.2" y="931.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.2" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.18%)</title><rect x="1168.2" y="915.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.2" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.18%)</title><rect x="1168.2" y="899.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.2" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.18%)</title><rect x="1168.2" y="883.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.2" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.18%)</title><rect x="1168.2" y="867.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.2" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.18%)</title><rect x="1168.2" y="851.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.18%)</title><rect x="1168.2" y="835.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.18%)</title><rect x="1168.2" y="819.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.18%)</title><rect x="1168.2" y="803.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.2" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.18%)</title><rect x="1168.2" y="787.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.2" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.18%)</title><rect x="1168.2" y="771.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.18%)</title><rect x="1168.2" y="755.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.18%)</title><rect x="1168.2" y="739.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.18%)</title><rect x="1168.2" y="723.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.18%)</title><rect x="1168.2" y="707.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.2" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.18%)</title><rect x="1168.2" y="691.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.2" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.18%)</title><rect x="1168.2" y="675.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.18%)</title><rect x="1168.2" y="659.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.18%)</title><rect x="1168.2" y="643.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.18%)</title><rect x="1168.2" y="627.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.18%)</title><rect x="1168.2" y="611.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.18%)</title><rect x="1168.2" y="595.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.2" y="606.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.18%)</title><rect x="1168.2" y="579.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.2" y="590.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.18%)</title><rect x="1168.2" y="563.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.2" y="574.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.18%)</title><rect x="1168.2" y="547.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.2" y="558.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.18%)</title><rect x="1168.2" y="531.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.2" y="542.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.18%)</title><rect x="1168.2" y="515.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.2" y="526.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.18%)</title><rect x="1168.2" y="499.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.2" y="510.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.18%)</title><rect x="1168.2" y="483.0" width="2.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1171.2" y="494.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.18%)</title><rect x="1170.4" y="1187.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.4" y="1198.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.18%)</title><rect x="1170.4" y="1171.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.4" y="1182.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.37%)</title><rect x="1172.6" y="1219.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.6" y="1230.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.37%)</title><rect x="1172.6" y="1203.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.6" y="1214.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.37%)</title><rect x="1172.6" y="1187.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.6" y="1198.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.37%)</title><rect x="1172.6" y="1171.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.6" y="1182.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.18%)</title><rect x="1172.6" y="1155.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.6" y="1166.0"></text>
</g>
<g>
<title>IR::compute_code() (1 samples, 0.18%)</title><rect x="1172.6" y="1139.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.6" y="1150.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::ComputeLinearScanOrder(Compilation*, BlockBegin*) (1 samples, 0.18%)</title><rect x="1172.6" y="1123.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.6" y="1134.0"></text>
</g>
<g>
<title>ComputeLinearScanOrder::compute_dominator(BlockBegin*, BlockBegin*) (1 samples, 0.18%)</title><rect x="1172.6" y="1107.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.6" y="1118.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.18%)</title><rect x="1174.8" y="1155.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.8" y="1166.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.18%)</title><rect x="1174.8" y="1139.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.8" y="1150.0"></text>
</g>
<g>
<title>LinearScan::compute_local_live_sets() (1 samples, 0.18%)</title><rect x="1174.8" y="1123.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.8" y="1134.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.18%)</title><rect x="1174.8" y="1107.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.8" y="1118.0"></text>
</g>
<g>
<title>StringEventLog::log(Thread*, char const*, ...) (1 samples, 0.18%)</title><rect x="1176.9" y="1219.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.9" y="1230.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.18%)</title><rect x="1176.9" y="1203.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.9" y="1214.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.18%)</title><rect x="1176.9" y="1187.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.9" y="1198.0"></text>
</g>
<g>
<title>ciEnv::~ciEnv() (1 samples, 0.18%)</title><rect x="1179.1" y="1219.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.1" y="1230.0"></text>
</g>
<g>
<title>ciObjectFactory::remove_symbols() (1 samples, 0.18%)</title><rect x="1179.1" y="1203.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.1" y="1214.0"></text>
</g>
<g>
<title>CompileQueue::get() (2 samples, 0.37%)</title><rect x="1181.3" y="1235.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.3" y="1246.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.18%)</title><rect x="1181.3" y="1219.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.3" y="1230.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.18%)</title><rect x="1183.5" y="1219.0" width="2.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1186.5" y="1230.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.18%)</title><rect x="1185.6" y="1251.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.6" y="1262.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.18%)</title><rect x="1185.6" y="1235.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.6" y="1246.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.18%)</title><rect x="1185.6" y="1219.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.6" y="1230.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.18%)</title><rect x="1185.6" y="1203.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.6" y="1214.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.18%)</title><rect x="1185.6" y="1187.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.6" y="1198.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.18%)</title><rect x="1185.6" y="1171.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.6" y="1182.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.18%)</title><rect x="1187.8" y="1283.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.8" y="1294.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.18%)</title><rect x="1187.8" y="1267.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.8" y="1278.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.18%)</title><rect x="1187.8" y="1251.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.8" y="1262.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.18%)</title><rect x="1187.8" y="1235.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.8" y="1246.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.18%)</title><rect x="1187.8" y="1219.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.8" y="1230.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.18%)</title><rect x="1187.8" y="1203.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.8" y="1214.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.18%)</title><rect x="1187.8" y="1187.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.8" y="1198.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.18%)</title><rect x="1187.8" y="1171.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.8" y="1182.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.18%)</title><rect x="1187.8" y="1155.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.8" y="1166.0"></text>
</g>
</g>
</svg>
