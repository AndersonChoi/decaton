<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1014" onload="init(evt)" viewBox="0 0 1200 1014" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="997"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="997"> </text>
<g id="frames">
<g>
<title>all (1,311 samples, 100.00%)</title><rect x="10.0" y="963.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="974.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="10.0" y="947.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.08%)</title><rect x="10.0" y="931.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (302 samples, 23.04%)</title><rect x="10.9" y="947.0" width="271.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.9" y="958.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (302 samples, 23.04%)</title><rect x="10.9" y="931.0" width="271.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.9" y="942.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (4 samples, 0.31%)</title><rect x="10.9" y="915.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.9" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.31%)</title><rect x="10.9" y="899.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.9" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1942460504.accept (4 samples, 0.31%)</title><rect x="10.9" y="883.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.9" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (4 samples, 0.31%)</title><rect x="10.9" y="867.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.9" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.31%)</title><rect x="10.9" y="851.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.9" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.31%)</title><rect x="10.9" y="835.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.9" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (4 samples, 0.31%)</title><rect x="10.9" y="819.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.9" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (3 samples, 0.23%)</title><rect x="14.5" y="915.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.5" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (3 samples, 0.23%)</title><rect x="14.5" y="899.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.5" y="910.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.08%)</title><rect x="14.5" y="883.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.5" y="894.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.08%)</title><rect x="14.5" y="867.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.5" y="878.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.08%)</title><rect x="14.5" y="851.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.5" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.15%)</title><rect x="15.4" y="883.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.4" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.15%)</title><rect x="15.4" y="867.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.4" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.15%)</title><rect x="15.4" y="851.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.4" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.15%)</title><rect x="15.4" y="835.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.4" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.15%)</title><rect x="15.4" y="819.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.4" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="15.4" y="803.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.4" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="15.4" y="787.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.4" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="15.4" y="771.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.4" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$265/1774642028.test (1 samples, 0.08%)</title><rect x="15.4" y="755.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="18.4" y="766.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="16.3" y="803.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.3" y="814.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="16.3" y="787.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.3" y="798.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="16.3" y="771.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.3" y="782.0"></text>
</g>
<g>
<title>java/util/stream/Sink.end (1 samples, 0.08%)</title><rect x="16.3" y="755.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="19.3" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (2 samples, 0.15%)</title><rect x="17.2" y="915.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.2" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (2 samples, 0.15%)</title><rect x="17.2" y="899.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="20.2" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.15%)</title><rect x="17.2" y="883.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.2" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.15%)</title><rect x="17.2" y="867.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.2" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.15%)</title><rect x="17.2" y="851.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.2" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.15%)</title><rect x="17.2" y="835.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.2" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.15%)</title><rect x="17.2" y="819.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.2" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="17.2" y="803.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.2" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="18.1" y="803.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.1" y="814.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="18.1" y="787.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.1" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="18.1" y="771.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.1" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 0.15%)</title><rect x="19.0" y="915.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="22.0" y="926.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="19.0" y="899.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="22.0" y="910.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="19.0" y="883.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="22.0" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.elapsedNanos (1 samples, 0.08%)</title><rect x="19.9" y="899.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.9" y="910.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="19.9" y="883.0" width="0.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="22.9" y="894.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="19.9" y="867.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="22.9" y="878.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (215 samples, 16.40%)</title><rect x="20.8" y="915.0" width="193.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="23.8" y="926.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/340840234.accept (206 samples, 15.71%)</title><rect x="21.7" y="899.0" width="185.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="24.7" y="910.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$71 (206 samples, 15.71%)</title><rect x="21.7" y="883.0" width="185.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="24.7" y="894.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (158 samples, 12.05%)</title><rect x="21.7" y="867.0" width="142.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.7" y="878.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (158 samples, 12.05%)</title><rect x="21.7" y="851.0" width="142.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="24.7" y="862.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (158 samples, 12.05%)</title><rect x="21.7" y="835.0" width="142.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="24.7" y="846.0">com/linecorp/decat..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (158 samples, 12.05%)</title><rect x="21.7" y="819.0" width="142.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="24.7" y="830.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (158 samples, 12.05%)</title><rect x="21.7" y="803.0" width="142.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="24.7" y="814.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (158 samples, 12.05%)</title><rect x="21.7" y="787.0" width="142.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.7" y="798.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (100 samples, 7.63%)</title><rect x="21.7" y="771.0" width="90.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="24.7" y="782.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (19 samples, 1.45%)</title><rect x="21.7" y="755.0" width="17.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="24.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (19 samples, 1.45%)</title><rect x="21.7" y="739.0" width="17.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="24.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (9 samples, 0.69%)</title><rect x="30.7" y="723.0" width="8.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="33.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (9 samples, 0.69%)</title><rect x="30.7" y="707.0" width="8.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="33.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (11 samples, 0.84%)</title><rect x="38.8" y="755.0" width="9.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="41.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (11 samples, 0.84%)</title><rect x="38.8" y="739.0" width="9.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="41.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (6 samples, 0.46%)</title><rect x="39.7" y="723.0" width="5.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="42.7" y="734.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (6 samples, 0.46%)</title><rect x="39.7" y="707.0" width="5.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="42.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (4 samples, 0.31%)</title><rect x="45.1" y="723.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="48.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (70 samples, 5.34%)</title><rect x="48.7" y="755.0" width="63.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="51.7" y="766.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (70 samples, 5.34%)</title><rect x="48.7" y="739.0" width="63.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="51.7" y="750.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (69 samples, 5.26%)</title><rect x="48.7" y="723.0" width="62.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.7" y="734.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (69 samples, 5.26%)</title><rect x="48.7" y="707.0" width="62.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="51.7" y="718.0">java/u..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (68 samples, 5.19%)</title><rect x="49.6" y="691.0" width="61.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="52.6" y="702.0">sun/mi..</text>
</g>
<g>
<title>Unsafe_Unpark (61 samples, 4.65%)</title><rect x="49.6" y="675.0" width="54.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="52.6" y="686.0">Unsaf..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.23%)</title><rect x="50.5" y="659.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="53.5" y="670.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.08%)</title><rect x="53.2" y="659.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="56.2" y="670.0"></text>
</g>
<g>
<title>__pthread_cond_signal (39 samples, 2.97%)</title><rect x="54.1" y="659.0" width="35.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="57.1" y="670.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (3 samples, 0.23%)</title><rect x="89.2" y="659.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="92.2" y="670.0"></text>
</g>
<g>
<title>pthread_mutex_lock (14 samples, 1.07%)</title><rect x="91.9" y="659.0" width="12.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="94.9" y="670.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.23%)</title><rect x="104.5" y="675.0" width="2.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="107.5" y="686.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.23%)</title><rect x="107.2" y="675.0" width="2.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="110.2" y="686.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.08%)</title><rect x="109.9" y="675.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="112.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.08%)</title><rect x="110.8" y="723.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="113.8" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (50 samples, 3.81%)</title><rect x="111.7" y="771.0" width="45.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="114.7" y="782.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (50 samples, 3.81%)</title><rect x="111.7" y="755.0" width="45.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="114.7" y="766.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (50 samples, 3.81%)</title><rect x="111.7" y="739.0" width="45.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="114.7" y="750.0">java..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.23%)</title><rect x="154.0" y="723.0" width="2.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="157.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.38%)</title><rect x="156.7" y="771.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="159.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (3 samples, 0.23%)</title><rect x="156.7" y="755.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="159.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.23%)</title><rect x="156.7" y="739.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="159.7" y="750.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.23%)</title><rect x="156.7" y="723.0" width="2.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="159.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (2 samples, 0.15%)</title><rect x="159.4" y="755.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="162.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.15%)</title><rect x="159.4" y="739.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="162.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.23%)</title><rect x="161.2" y="771.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="164.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.23%)</title><rect x="161.2" y="755.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="164.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.23%)</title><rect x="161.2" y="739.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="164.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.15%)</title><rect x="162.1" y="723.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="165.1" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (6 samples, 0.46%)</title><rect x="163.9" y="867.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="166.9" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (6 samples, 0.46%)</title><rect x="163.9" y="851.0" width="5.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="166.9" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (8 samples, 0.61%)</title><rect x="169.3" y="867.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="172.3" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 0.61%)</title><rect x="169.3" y="851.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="172.3" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (8 samples, 0.61%)</title><rect x="169.3" y="835.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="172.3" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (33 samples, 2.52%)</title><rect x="176.5" y="867.0" width="29.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="179.5" y="878.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (11 samples, 0.84%)</title><rect x="194.5" y="851.0" width="9.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="197.5" y="862.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (11 samples, 0.84%)</title><rect x="194.5" y="835.0" width="9.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="197.5" y="846.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.15%)</title><rect x="194.5" y="819.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="197.5" y="830.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.15%)</title><rect x="194.5" y="803.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="197.5" y="814.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.15%)</title><rect x="194.5" y="787.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="197.5" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="195.4" y="771.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="198.4" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.08%)</title><rect x="195.4" y="755.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="198.4" y="766.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="195.4" y="739.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="198.4" y="750.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="195.4" y="723.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="198.4" y="734.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="195.4" y="707.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="198.4" y="718.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="195.4" y="691.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="198.4" y="702.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (6 samples, 0.46%)</title><rect x="196.3" y="819.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="199.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.15%)</title><rect x="199.9" y="803.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="202.9" y="814.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.23%)</title><rect x="201.7" y="819.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="204.7" y="830.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.15%)</title><rect x="204.4" y="851.0" width="1.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="207.4" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1172131546.linkToTargetMethod (1 samples, 0.08%)</title><rect x="206.2" y="867.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="209.2" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (1 samples, 0.08%)</title><rect x="206.2" y="851.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="209.2" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$276/1448354802.get$Lambda (1 samples, 0.08%)</title><rect x="206.2" y="835.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="209.2" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="206.2" y="819.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="209.2" y="830.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.15%)</title><rect x="207.1" y="899.0" width="1.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="210.1" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.08%)</title><rect x="208.9" y="899.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="211.9" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.08%)</title><rect x="208.9" y="883.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="211.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (5 samples, 0.38%)</title><rect x="209.8" y="899.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="212.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (5 samples, 0.38%)</title><rect x="209.8" y="883.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="212.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.38%)</title><rect x="209.8" y="867.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="212.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.38%)</title><rect x="209.8" y="851.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="212.8" y="862.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (5 samples, 0.38%)</title><rect x="209.8" y="835.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="212.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (76 samples, 5.80%)</title><rect x="214.3" y="915.0" width="68.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="217.3" y="926.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (74 samples, 5.64%)</title><rect x="216.1" y="899.0" width="66.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="219.1" y="910.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquire (1 samples, 0.08%)</title><rect x="217.0" y="883.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="220.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (37 samples, 2.82%)</title><rect x="217.9" y="883.0" width="33.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="220.9" y="894.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (2 samples, 0.15%)</title><rect x="217.9" y="867.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="220.9" y="878.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 0.08%)</title><rect x="217.9" y="851.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="220.9" y="862.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.08%)</title><rect x="217.9" y="835.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="220.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.08%)</title><rect x="218.8" y="851.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="221.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.08%)</title><rect x="218.8" y="835.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="221.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="219.7" y="867.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="222.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="219.7" y="851.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="222.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.08%)</title><rect x="219.7" y="835.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="222.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.08%)</title><rect x="219.7" y="819.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="222.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.08%)</title><rect x="219.7" y="803.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="222.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.08%)</title><rect x="219.7" y="787.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="222.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.hasField (1 samples, 0.08%)</title><rect x="219.7" y="771.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="222.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.08%)</title><rect x="219.7" y="755.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="222.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (34 samples, 2.59%)</title><rect x="220.6" y="867.0" width="30.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="223.6" y="878.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (34 samples, 2.59%)</title><rect x="220.6" y="851.0" width="30.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="223.6" y="862.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (31 samples, 2.36%)</title><rect x="220.6" y="835.0" width="27.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="223.6" y="846.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (31 samples, 2.36%)</title><rect x="220.6" y="819.0" width="27.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="223.6" y="830.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (19 samples, 1.45%)</title><rect x="221.5" y="803.0" width="17.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="224.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.08%)</title><rect x="221.5" y="787.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="224.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.movePartitionToEnd (1 samples, 0.08%)</title><rect x="221.5" y="771.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="224.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.moveToEnd (1 samples, 0.08%)</title><rect x="221.5" y="755.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="224.5" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.08%)</title><rect x="221.5" y="739.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="224.5" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.08%)</title><rect x="221.5" y="723.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="224.5" y="734.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.afterNodeRemoval (1 samples, 0.08%)</title><rect x="221.5" y="707.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="224.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (9 samples, 0.69%)</title><rect x="222.4" y="787.0" width="8.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="225.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (9 samples, 0.69%)</title><rect x="222.4" y="771.0" width="8.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="225.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (9 samples, 0.69%)</title><rect x="222.4" y="755.0" width="8.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="225.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (9 samples, 0.69%)</title><rect x="222.4" y="739.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="225.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (9 samples, 0.69%)</title><rect x="222.4" y="723.0" width="8.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="225.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (9 samples, 0.69%)</title><rect x="222.4" y="707.0" width="8.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="225.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (9 samples, 0.69%)</title><rect x="222.4" y="691.0" width="8.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="225.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (8 samples, 0.61%)</title><rect x="230.5" y="787.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="233.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (8 samples, 0.61%)</title><rect x="230.5" y="771.0" width="7.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="233.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (8 samples, 0.61%)</title><rect x="230.5" y="755.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="233.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.08%)</title><rect x="237.7" y="787.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="240.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.08%)</title><rect x="237.7" y="771.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="240.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.08%)</title><rect x="237.7" y="755.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="240.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.08%)</title><rect x="237.7" y="739.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="240.7" y="750.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.08%)</title><rect x="237.7" y="723.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="240.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (11 samples, 0.84%)</title><rect x="238.6" y="803.0" width="9.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="241.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (10 samples, 0.76%)</title><rect x="239.5" y="787.0" width="9.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="242.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (7 samples, 0.53%)</title><rect x="239.5" y="771.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="242.5" y="782.0"></text>
</g>
<g>
<title>java/util/Optional.of (7 samples, 0.53%)</title><rect x="239.5" y="755.0" width="6.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="242.5" y="766.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="244.9" y="739.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="247.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (3 samples, 0.23%)</title><rect x="245.8" y="771.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="248.8" y="782.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 0.23%)</title><rect x="245.8" y="755.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="248.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.15%)</title><rect x="248.5" y="835.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="251.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.15%)</title><rect x="248.5" y="819.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="251.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.15%)</title><rect x="248.5" y="803.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="251.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.15%)</title><rect x="248.5" y="787.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="251.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.15%)</title><rect x="248.5" y="771.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="251.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="248.5" y="755.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="251.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.08%)</title><rect x="249.4" y="755.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="252.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.08%)</title><rect x="250.3" y="835.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="253.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (13 samples, 0.99%)</title><rect x="251.2" y="883.0" width="11.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="254.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (12 samples, 0.92%)</title><rect x="251.2" y="867.0" width="10.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="254.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (9 samples, 0.69%)</title><rect x="251.2" y="851.0" width="8.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="254.2" y="862.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.15%)</title><rect x="251.2" y="835.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="254.2" y="846.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="251.2" y="819.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="254.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/2030256668.accept (1 samples, 0.08%)</title><rect x="252.1" y="819.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="255.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.08%)</title><rect x="252.1" y="803.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="255.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.08%)</title><rect x="252.1" y="787.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="255.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.08%)</title><rect x="252.1" y="771.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="255.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.08%)</title><rect x="252.1" y="755.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="255.1" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="252.1" y="739.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="255.1" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="252.1" y="723.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="255.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.08%)</title><rect x="253.0" y="835.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="256.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.08%)</title><rect x="253.0" y="819.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="256.0" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="253.0" y="803.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="256.0" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="253.0" y="787.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="256.0" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="253.0" y="771.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="256.0" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="253.0" y="755.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="256.0" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="253.0" y="739.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="256.0" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="253.0" y="723.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="256.0" y="734.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$236/270828079.get (1 samples, 0.08%)</title><rect x="253.0" y="707.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="256.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.15%)</title><rect x="253.9" y="835.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="256.9" y="846.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.15%)</title><rect x="253.9" y="819.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="256.9" y="830.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (2 samples, 0.15%)</title><rect x="253.9" y="803.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="256.9" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.08%)</title><rect x="253.9" y="787.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="256.9" y="798.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.08%)</title><rect x="253.9" y="771.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="256.9" y="782.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.08%)</title><rect x="253.9" y="755.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="256.9" y="766.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.08%)</title><rect x="254.8" y="787.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="257.8" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="254.8" y="771.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="257.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.08%)</title><rect x="254.8" y="755.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="257.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (4 samples, 0.31%)</title><rect x="255.7" y="835.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="258.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (4 samples, 0.31%)</title><rect x="255.7" y="819.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="258.7" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.15%)</title><rect x="256.6" y="803.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="259.6" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.15%)</title><rect x="256.6" y="787.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="259.6" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.15%)</title><rect x="256.6" y="771.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="259.6" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.15%)</title><rect x="256.6" y="755.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="259.6" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.15%)</title><rect x="256.6" y="739.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="259.6" y="750.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="256.6" y="723.0" width="0.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="259.6" y="734.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="257.5" y="723.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="260.5" y="734.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.08%)</title><rect x="257.5" y="707.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="260.5" y="718.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.08%)</title><rect x="257.5" y="691.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="260.5" y="702.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.08%)</title><rect x="257.5" y="675.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="260.5" y="686.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.08%)</title><rect x="257.5" y="659.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="260.5" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="257.5" y="643.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="260.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.08%)</title><rect x="258.4" y="803.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="261.4" y="814.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.08%)</title><rect x="258.4" y="787.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="261.4" y="798.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.08%)</title><rect x="258.4" y="771.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="261.4" y="782.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.08%)</title><rect x="258.4" y="755.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="261.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (3 samples, 0.23%)</title><rect x="259.3" y="851.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="262.3" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (3 samples, 0.23%)</title><rect x="259.3" y="835.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="262.3" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.23%)</title><rect x="259.3" y="819.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="262.3" y="830.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.15%)</title><rect x="260.2" y="803.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="263.2" y="814.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.15%)</title><rect x="260.2" y="787.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="263.2" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.15%)</title><rect x="260.2" y="771.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="263.2" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.15%)</title><rect x="260.2" y="755.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="263.2" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (2 samples, 0.15%)</title><rect x="260.2" y="739.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="263.2" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (2 samples, 0.15%)</title><rect x="260.2" y="723.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="263.2" y="734.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (2 samples, 0.15%)</title><rect x="260.2" y="707.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="263.2" y="718.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.08%)</title><rect x="261.1" y="691.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="264.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.08%)</title><rect x="262.0" y="867.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="265.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.invokeCompletedOffsetCommitCallbacks (1 samples, 0.08%)</title><rect x="262.0" y="851.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="265.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.08%)</title><rect x="262.0" y="835.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="265.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (6 samples, 0.46%)</title><rect x="262.9" y="883.0" width="5.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="265.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (6 samples, 0.46%)</title><rect x="262.9" y="867.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="265.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.08%)</title><rect x="262.9" y="851.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="265.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.08%)</title><rect x="262.9" y="835.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="265.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitResponse.&lt;init&gt; (1 samples, 0.08%)</title><rect x="262.9" y="819.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="265.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData.&lt;init&gt; (1 samples, 0.08%)</title><rect x="262.9" y="803.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="265.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData.fromStruct (1 samples, 0.08%)</title><rect x="262.9" y="787.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="265.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData$OffsetCommitResponseTopic.&lt;init&gt; (1 samples, 0.08%)</title><rect x="262.9" y="771.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="265.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData$OffsetCommitResponseTopic.fromStruct (1 samples, 0.08%)</title><rect x="262.9" y="755.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="265.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData$OffsetCommitResponsePartition.&lt;init&gt; (1 samples, 0.08%)</title><rect x="262.9" y="739.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="265.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (5 samples, 0.38%)</title><rect x="263.8" y="851.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="266.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="263.8" y="835.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="266.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (4 samples, 0.31%)</title><rect x="264.7" y="835.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="267.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.08%)</title><rect x="264.7" y="819.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="267.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.08%)</title><rect x="264.7" y="803.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="267.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.08%)</title><rect x="264.7" y="787.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="267.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.08%)</title><rect x="264.7" y="771.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="267.7" y="782.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.08%)</title><rect x="264.7" y="755.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="267.7" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.08%)</title><rect x="264.7" y="739.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="267.7" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.08%)</title><rect x="264.7" y="723.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="267.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (3 samples, 0.23%)</title><rect x="265.6" y="819.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="268.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (3 samples, 0.23%)</title><rect x="265.6" y="803.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="268.6" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.15%)</title><rect x="265.6" y="787.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="268.6" y="798.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.15%)</title><rect x="265.6" y="771.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="268.6" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.08%)</title><rect x="266.5" y="755.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="269.5" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_humongous(unsigned long, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="266.5" y="739.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="269.5" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::humongous_obj_allocate(unsigned long, unsigned char) (1 samples, 0.08%)</title><rect x="266.5" y="723.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="269.5" y="734.0"></text>
</g>
<g>
<title>HeapRegionManager::find_contiguous(unsigned long, bool) (1 samples, 0.08%)</title><rect x="266.5" y="707.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="269.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.08%)</title><rect x="267.4" y="787.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="270.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.08%)</title><rect x="267.4" y="771.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="270.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.08%)</title><rect x="267.4" y="755.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="270.4" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.08%)</title><rect x="267.4" y="739.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="270.4" y="750.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="267.4" y="723.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="270.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (11 samples, 0.84%)</title><rect x="268.3" y="883.0" width="9.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="271.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (9 samples, 0.69%)</title><rect x="270.1" y="867.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="273.1" y="878.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.23%)</title><rect x="271.0" y="851.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="274.0" y="862.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.15%)</title><rect x="271.0" y="835.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="274.0" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.08%)</title><rect x="271.9" y="819.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="274.9" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="271.9" y="803.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="274.9" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="271.9" y="787.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="274.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$256/1829330086.accept (1 samples, 0.08%)</title><rect x="272.8" y="835.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="275.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.08%)</title><rect x="272.8" y="819.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="275.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.08%)</title><rect x="272.8" y="803.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="275.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.08%)</title><rect x="272.8" y="787.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="275.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.08%)</title><rect x="272.8" y="771.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="275.8" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="272.8" y="755.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="275.8" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="272.8" y="739.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="275.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.08%)</title><rect x="273.7" y="851.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="276.7" y="862.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.&lt;init&gt; (1 samples, 0.08%)</title><rect x="273.7" y="835.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="276.7" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (1 samples, 0.08%)</title><rect x="273.7" y="819.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="276.7" y="830.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.entrySet (1 samples, 0.08%)</title><rect x="273.7" y="803.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="276.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (4 samples, 0.31%)</title><rect x="274.6" y="851.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="277.6" y="862.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.08%)</title><rect x="274.6" y="835.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="277.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (3 samples, 0.23%)</title><rect x="275.5" y="835.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="278.5" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.23%)</title><rect x="275.5" y="819.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="278.5" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.23%)</title><rect x="275.5" y="803.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="278.5" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.23%)</title><rect x="275.5" y="787.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="278.5" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.23%)</title><rect x="275.5" y="771.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="278.5" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.23%)</title><rect x="275.5" y="755.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="278.5" y="766.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.08%)</title><rect x="275.5" y="739.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="278.5" y="750.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.characteristics (1 samples, 0.08%)</title><rect x="275.5" y="723.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="278.5" y="734.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (2 samples, 0.15%)</title><rect x="276.4" y="739.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="279.4" y="750.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (2 samples, 0.15%)</title><rect x="276.4" y="723.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="279.4" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (2 samples, 0.15%)</title><rect x="276.4" y="707.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="279.4" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.15%)</title><rect x="276.4" y="691.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="279.4" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.15%)</title><rect x="276.4" y="675.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="279.4" y="686.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="276.4" y="659.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="279.4" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.08%)</title><rect x="277.3" y="659.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="280.3" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (1 samples, 0.08%)</title><rect x="277.3" y="643.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="280.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.08%)</title><rect x="278.2" y="883.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="281.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="278.2" y="867.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="281.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.milliseconds (1 samples, 0.08%)</title><rect x="278.2" y="851.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="281.2" y="862.0"></text>
</g>
<g>
<title>start_thread (1 samples, 0.08%)</title><rect x="278.2" y="835.0" width="0.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="281.2" y="846.0"></text>
</g>
<g>
<title>java_start(Thread*) (1 samples, 0.08%)</title><rect x="278.2" y="819.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="281.2" y="830.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.08%)</title><rect x="278.2" y="803.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="281.2" y="814.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.08%)</title><rect x="278.2" y="787.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="281.2" y="798.0"></text>
</g>
<g>
<title>thread_entry(JavaThread*, Thread*) (1 samples, 0.08%)</title><rect x="278.2" y="771.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="281.2" y="782.0"></text>
</g>
<g>
<title>JavaCalls::call_virtual(JavaValue*, Handle, KlassHandle, Symbol*, Symbol*, Thread*) (1 samples, 0.08%)</title><rect x="278.2" y="755.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="281.2" y="766.0"></text>
</g>
<g>
<title>JavaCalls::call_virtual(JavaValue*, KlassHandle, Symbol*, Symbol*, JavaCallArguments*, Thread*) (1 samples, 0.08%)</title><rect x="278.2" y="739.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="281.2" y="750.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle*, JavaCallArguments*, Thread*) (1 samples, 0.08%)</title><rect x="278.2" y="723.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="281.2" y="734.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="278.2" y="707.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="281.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (4 samples, 0.31%)</title><rect x="279.1" y="883.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="282.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.23%)</title><rect x="279.1" y="867.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="282.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.23%)</title><rect x="279.1" y="851.0" width="2.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="282.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.23%)</title><rect x="279.1" y="835.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="282.1" y="846.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.08%)</title><rect x="280.0" y="819.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="283.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.08%)</title><rect x="280.9" y="819.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="283.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.08%)</title><rect x="280.9" y="803.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="283.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Max.update (1 samples, 0.08%)</title><rect x="280.9" y="787.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="283.9" y="798.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="281.8" y="867.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="284.8" y="878.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="281.8" y="851.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="284.8" y="862.0"></text>
</g>
<g>
<title>java/lang/Thread.run (832 samples, 63.46%)</title><rect x="282.7" y="947.0" width="748.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="285.7" y="958.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (832 samples, 63.46%)</title><rect x="282.7" y="931.0" width="748.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="285.7" y="942.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (832 samples, 63.46%)</title><rect x="282.7" y="915.0" width="748.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="285.7" y="926.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/1505821178.run (568 samples, 43.33%)</title><rect x="285.4" y="899.0" width="511.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="288.4" y="910.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/150582..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (568 samples, 43.33%)</title><rect x="285.4" y="883.0" width="511.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="288.4" y="894.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (568 samples, 43.33%)</title><rect x="285.4" y="867.0" width="511.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="288.4" y="878.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (559 samples, 42.64%)</title><rect x="285.4" y="851.0" width="503.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="288.4" y="862.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenPr..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.08%)</title><rect x="298.9" y="835.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="301.9" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (1 samples, 0.08%)</title><rect x="299.8" y="835.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="302.8" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.08%)</title><rect x="299.8" y="819.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="302.8" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$197/1814896437.get (1 samples, 0.08%)</title><rect x="299.8" y="803.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="302.8" y="814.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.08%)</title><rect x="299.8" y="787.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="302.8" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="299.8" y="771.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="302.8" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="299.8" y="755.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="302.8" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="299.8" y="739.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="302.8" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="299.8" y="723.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="302.8" y="734.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="299.8" y="707.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="302.8" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="299.8" y="691.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="302.8" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (182 samples, 13.88%)</title><rect x="300.7" y="835.0" width="163.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="303.7" y="846.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (182 samples, 13.88%)</title><rect x="300.7" y="819.0" width="163.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="303.7" y="830.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (182 samples, 13.88%)</title><rect x="300.7" y="803.0" width="163.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="303.7" y="814.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="300.7" y="787.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="303.7" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="300.7" y="771.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="303.7" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="300.7" y="755.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="303.7" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="300.7" y="739.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="303.7" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="300.7" y="723.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="303.7" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (181 samples, 13.81%)</title><rect x="301.6" y="787.0" width="162.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="304.6" y="798.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (181 samples, 13.81%)</title><rect x="301.6" y="771.0" width="162.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="304.6" y="782.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (181 samples, 13.81%)</title><rect x="301.6" y="755.0" width="162.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="304.6" y="766.0">com/fasterxml/jackson..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (68 samples, 5.19%)</title><rect x="301.6" y="739.0" width="61.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="304.6" y="750.0">com/fa..</text>
</g>
<g>
<title>[vdso] (3 samples, 0.23%)</title><rect x="319.6" y="723.0" width="2.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="322.6" y="734.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.53%)</title><rect x="322.3" y="723.0" width="6.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="325.3" y="734.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.31%)</title><rect x="325.0" y="707.0" width="3.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="328.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (15 samples, 1.14%)</title><rect x="328.6" y="723.0" width="13.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="331.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (13 samples, 0.99%)</title><rect x="330.4" y="707.0" width="11.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="333.4" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (13 samples, 0.99%)</title><rect x="330.4" y="691.0" width="11.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="333.4" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="330.4" y="675.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="333.4" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="330.4" y="659.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="333.4" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (12 samples, 0.92%)</title><rect x="331.3" y="675.0" width="10.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="334.3" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (12 samples, 0.92%)</title><rect x="331.3" y="659.0" width="10.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="334.3" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (12 samples, 0.92%)</title><rect x="331.3" y="643.0" width="10.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="334.3" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (12 samples, 0.92%)</title><rect x="331.3" y="627.0" width="10.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="334.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (22 samples, 1.68%)</title><rect x="342.1" y="723.0" width="19.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="345.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (22 samples, 1.68%)</title><rect x="342.1" y="707.0" width="19.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="345.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.15%)</title><rect x="350.2" y="691.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="353.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.15%)</title><rect x="350.2" y="675.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="353.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (11 samples, 0.84%)</title><rect x="352.0" y="691.0" width="9.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="355.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (11 samples, 0.84%)</title><rect x="352.0" y="675.0" width="9.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="355.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (11 samples, 0.84%)</title><rect x="352.0" y="659.0" width="9.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="355.0" y="670.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="361.9" y="723.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="364.9" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (105 samples, 8.01%)</title><rect x="362.8" y="739.0" width="94.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="365.8" y="750.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.08%)</title><rect x="363.7" y="723.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="366.7" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.08%)</title><rect x="364.6" y="723.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="367.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (10 samples, 0.76%)</title><rect x="365.5" y="723.0" width="9.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="368.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (8 samples, 0.61%)</title><rect x="367.3" y="707.0" width="7.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="370.3" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (13 samples, 0.99%)</title><rect x="374.5" y="723.0" width="11.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="377.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 0.76%)</title><rect x="377.2" y="707.0" width="9.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="380.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (7 samples, 0.53%)</title><rect x="379.9" y="691.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="382.9" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (7 samples, 0.53%)</title><rect x="379.9" y="675.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="382.9" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="381.7" y="659.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="384.7" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="381.7" y="643.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="384.7" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="381.7" y="627.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="384.7" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="381.7" y="611.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="384.7" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="381.7" y="595.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="384.7" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="381.7" y="579.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="384.7" y="590.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="381.7" y="563.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="384.7" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="381.7" y="547.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="384.7" y="558.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="381.7" y="531.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="384.7" y="542.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.08%)</title><rect x="381.7" y="515.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="384.7" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (4 samples, 0.31%)</title><rect x="382.6" y="659.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="385.6" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (7 samples, 0.53%)</title><rect x="386.2" y="723.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="389.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (5 samples, 0.38%)</title><rect x="388.0" y="707.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="391.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (71 samples, 5.42%)</title><rect x="392.5" y="723.0" width="63.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="395.5" y="734.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (22 samples, 1.68%)</title><rect x="394.3" y="707.0" width="19.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="397.3" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.31%)</title><rect x="396.1" y="691.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="399.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.31%)</title><rect x="396.1" y="675.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="399.1" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.31%)</title><rect x="396.1" y="659.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="399.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (4 samples, 0.31%)</title><rect x="396.1" y="643.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="399.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.08%)</title><rect x="398.8" y="627.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="401.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (14 samples, 1.07%)</title><rect x="399.7" y="691.0" width="12.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="402.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (8 samples, 0.61%)</title><rect x="399.7" y="675.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="402.7" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.15%)</title><rect x="405.1" y="659.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="408.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (6 samples, 0.46%)</title><rect x="406.9" y="675.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="409.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (6 samples, 0.46%)</title><rect x="406.9" y="659.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="409.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (3 samples, 0.23%)</title><rect x="409.6" y="643.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="412.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (3 samples, 0.23%)</title><rect x="409.6" y="627.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="412.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.15%)</title><rect x="412.3" y="691.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="415.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.15%)</title><rect x="412.3" y="675.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="415.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 0.23%)</title><rect x="414.1" y="707.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="417.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (44 samples, 3.36%)</title><rect x="416.8" y="707.0" width="39.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="419.8" y="718.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (44 samples, 3.36%)</title><rect x="416.8" y="691.0" width="39.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="419.8" y="702.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="417.7" y="675.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="420.7" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (42 samples, 3.20%)</title><rect x="418.6" y="675.0" width="37.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="421.6" y="686.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (9 samples, 0.69%)</title><rect x="422.2" y="659.0" width="8.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="425.2" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.31%)</title><rect x="424.0" y="643.0" width="3.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="427.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.31%)</title><rect x="424.0" y="627.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="427.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.31%)</title><rect x="424.0" y="611.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="427.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.15%)</title><rect x="424.0" y="595.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="427.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.15%)</title><rect x="425.8" y="595.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="428.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.08%)</title><rect x="427.6" y="643.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="430.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.08%)</title><rect x="427.6" y="627.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="430.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.08%)</title><rect x="427.6" y="611.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="430.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.15%)</title><rect x="428.5" y="643.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="431.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.15%)</title><rect x="428.5" y="627.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="431.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (8 samples, 0.61%)</title><rect x="430.3" y="659.0" width="7.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="433.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (5 samples, 0.38%)</title><rect x="433.0" y="643.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="436.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.38%)</title><rect x="433.0" y="627.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="436.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.38%)</title><rect x="433.0" y="611.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="436.0" y="622.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (5 samples, 0.38%)</title><rect x="433.0" y="595.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="436.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.08%)</title><rect x="437.5" y="659.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="440.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (10 samples, 0.76%)</title><rect x="438.4" y="659.0" width="9.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="441.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (10 samples, 0.76%)</title><rect x="438.4" y="643.0" width="9.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="441.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (10 samples, 0.76%)</title><rect x="438.4" y="627.0" width="9.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="441.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (10 samples, 0.76%)</title><rect x="438.4" y="611.0" width="9.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="441.4" y="622.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (10 samples, 0.76%)</title><rect x="438.4" y="595.0" width="9.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="441.4" y="606.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (10 samples, 0.76%)</title><rect x="438.4" y="579.0" width="9.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="441.4" y="590.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (5 samples, 0.38%)</title><rect x="442.9" y="563.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="445.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (7 samples, 0.53%)</title><rect x="447.4" y="659.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="450.4" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.53%)</title><rect x="447.4" y="643.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="450.4" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.53%)</title><rect x="447.4" y="627.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="450.4" y="638.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (1 samples, 0.08%)</title><rect x="452.8" y="611.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="455.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (3 samples, 0.23%)</title><rect x="453.7" y="659.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="456.7" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (1 samples, 0.08%)</title><rect x="456.4" y="723.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="459.4" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (8 samples, 0.61%)</title><rect x="457.3" y="739.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="460.3" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (8 samples, 0.61%)</title><rect x="457.3" y="723.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="460.3" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (8 samples, 0.61%)</title><rect x="457.3" y="707.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="460.3" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (8 samples, 0.61%)</title><rect x="457.3" y="691.0" width="7.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="460.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (8 samples, 0.61%)</title><rect x="457.3" y="675.0" width="7.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="460.3" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (326 samples, 24.87%)</title><rect x="464.5" y="835.0" width="293.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="467.5" y="846.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (43 samples, 3.28%)</title><rect x="468.1" y="819.0" width="38.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="471.1" y="830.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.08%)</title><rect x="468.1" y="803.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="471.1" y="814.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (42 samples, 3.20%)</title><rect x="469.0" y="803.0" width="37.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="472.0" y="814.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (41 samples, 3.13%)</title><rect x="469.9" y="787.0" width="36.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="472.9" y="798.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (7 samples, 0.53%)</title><rect x="473.5" y="771.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="476.5" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 0.53%)</title><rect x="473.5" y="755.0" width="6.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="476.5" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (7 samples, 0.53%)</title><rect x="473.5" y="739.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="476.5" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.53%)</title><rect x="473.5" y="723.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="476.5" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (30 samples, 2.29%)</title><rect x="479.8" y="771.0" width="27.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="482.8" y="782.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (7 samples, 0.53%)</title><rect x="500.5" y="755.0" width="6.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="503.5" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 0.53%)</title><rect x="500.5" y="739.0" width="6.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="503.5" y="750.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.15%)</title><rect x="505.0" y="723.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="508.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (20 samples, 1.53%)</title><rect x="506.8" y="819.0" width="18.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="509.8" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (19 samples, 1.45%)</title><rect x="507.7" y="803.0" width="17.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="510.7" y="814.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (19 samples, 1.45%)</title><rect x="507.7" y="787.0" width="17.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="510.7" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (175 samples, 13.35%)</title><rect x="524.8" y="819.0" width="157.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="527.8" y="830.0">com/linecorp/decaton..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.38%)</title><rect x="525.7" y="803.0" width="4.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="528.7" y="814.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.31%)</title><rect x="526.6" y="787.0" width="3.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="529.6" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (169 samples, 12.89%)</title><rect x="530.2" y="803.0" width="152.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="533.2" y="814.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (77 samples, 5.87%)</title><rect x="537.4" y="787.0" width="69.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="540.4" y="798.0">com/lin..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="544.6" y="771.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="547.6" y="782.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="544.6" y="755.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="547.6" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="544.6" y="739.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="547.6" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="544.6" y="723.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="547.6" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="544.6" y="707.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="547.6" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="544.6" y="691.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="547.6" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.08%)</title><rect x="544.6" y="675.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="547.6" y="686.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (58 samples, 4.42%)</title><rect x="545.5" y="771.0" width="52.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="548.5" y="782.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (58 samples, 4.42%)</title><rect x="545.5" y="755.0" width="52.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="548.5" y="766.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (40 samples, 3.05%)</title><rect x="552.7" y="739.0" width="36.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="555.7" y="750.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (40 samples, 3.05%)</title><rect x="552.7" y="723.0" width="36.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="555.7" y="734.0">jav..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (40 samples, 3.05%)</title><rect x="552.7" y="707.0" width="36.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="555.7" y="718.0">jav..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (14 samples, 1.07%)</title><rect x="568.0" y="691.0" width="12.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="571.0" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (6 samples, 0.46%)</title><rect x="568.9" y="675.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="571.9" y="686.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.08%)</title><rect x="568.9" y="659.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="571.9" y="670.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.15%)</title><rect x="569.8" y="659.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="572.8" y="670.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="570.7" y="643.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="573.7" y="654.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (2 samples, 0.15%)</title><rect x="571.6" y="659.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="574.6" y="670.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="573.4" y="659.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="576.4" y="670.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="573.4" y="643.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="576.4" y="654.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (2 samples, 0.15%)</title><rect x="574.3" y="675.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="577.3" y="686.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.31%)</title><rect x="576.1" y="675.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="579.1" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.23%)</title><rect x="577.0" y="659.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="580.0" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (3 samples, 0.23%)</title><rect x="577.0" y="643.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="580.0" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (3 samples, 0.23%)</title><rect x="577.0" y="627.0" width="2.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="580.0" y="638.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="577.0" y="611.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="580.0" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.08%)</title><rect x="577.0" y="595.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="580.0" y="606.0"></text>
</g>
<g>
<title>MasterFreeRegionListMtSafeChecker::check() (1 samples, 0.08%)</title><rect x="577.0" y="579.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="580.0" y="590.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (2 samples, 0.15%)</title><rect x="577.9" y="611.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="580.9" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (2 samples, 0.15%)</title><rect x="577.9" y="595.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="580.9" y="606.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="578.8" y="579.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="581.8" y="590.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="578.8" y="563.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="581.8" y="574.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="578.8" y="547.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="581.8" y="558.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="579.7" y="675.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="582.7" y="686.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="580.6" y="691.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="583.6" y="702.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (8 samples, 0.61%)</title><rect x="581.5" y="691.0" width="7.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="584.5" y="702.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.31%)</title><rect x="588.7" y="739.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="591.7" y="750.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.08%)</title><rect x="592.3" y="739.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="595.3" y="750.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.23%)</title><rect x="593.2" y="739.0" width="2.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="596.2" y="750.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.15%)</title><rect x="595.9" y="739.0" width="1.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="598.9" y="750.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.08%)</title><rect x="597.7" y="771.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="600.7" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="597.7" y="755.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="600.7" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="597.7" y="739.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="600.7" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="597.7" y="723.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="600.7" y="734.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.08%)</title><rect x="597.7" y="707.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="600.7" y="718.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="598.6" y="771.0" width="0.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="601.6" y="782.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (8 samples, 0.61%)</title><rect x="599.5" y="771.0" width="7.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="602.5" y="782.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (8 samples, 0.61%)</title><rect x="606.8" y="787.0" width="7.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="609.8" y="798.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (2 samples, 0.15%)</title><rect x="606.8" y="771.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="609.8" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="606.8" y="755.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="609.8" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="606.8" y="739.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="609.8" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="606.8" y="723.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="609.8" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="606.8" y="707.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="609.8" y="718.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.08%)</title><rect x="607.7" y="755.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="610.7" y="766.0"></text>
</g>
<g>
<title>java/lang/Long.toString (6 samples, 0.46%)</title><rect x="608.6" y="771.0" width="5.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="611.6" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="608.6" y="755.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="611.6" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="608.6" y="739.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="611.6" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="608.6" y="723.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="611.6" y="734.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="608.6" y="707.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="611.6" y="718.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.38%)</title><rect x="609.5" y="755.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="612.5" y="766.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (76 samples, 5.80%)</title><rect x="614.0" y="787.0" width="68.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="617.0" y="798.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (73 samples, 5.57%)</title><rect x="616.7" y="771.0" width="65.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="619.7" y="782.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.15%)</title><rect x="616.7" y="755.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="619.7" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.15%)</title><rect x="616.7" y="739.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="619.7" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.15%)</title><rect x="616.7" y="723.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="619.7" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.15%)</title><rect x="616.7" y="707.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="619.7" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.15%)</title><rect x="618.5" y="755.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="621.5" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.15%)</title><rect x="618.5" y="739.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="621.5" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.15%)</title><rect x="618.5" y="723.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="621.5" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.15%)</title><rect x="618.5" y="707.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="621.5" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="619.4" y="691.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="622.4" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (69 samples, 5.26%)</title><rect x="620.3" y="755.0" width="62.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="623.3" y="766.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (65 samples, 4.96%)</title><rect x="623.9" y="739.0" width="58.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="626.9" y="750.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (31 samples, 2.36%)</title><rect x="654.5" y="723.0" width="27.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="657.5" y="734.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.23%)</title><rect x="672.5" y="707.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="675.5" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (5 samples, 0.38%)</title><rect x="675.2" y="707.0" width="4.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="678.2" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="678.8" y="691.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="681.8" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="678.8" y="675.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="681.8" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="678.8" y="659.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="681.8" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="678.8" y="643.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="681.8" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="678.8" y="627.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="681.8" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="678.8" y="611.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="681.8" y="622.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="678.8" y="595.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="681.8" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="678.8" y="579.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="681.8" y="590.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="678.8" y="563.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="681.8" y="574.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.08%)</title><rect x="678.8" y="547.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="681.8" y="558.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.23%)</title><rect x="679.7" y="707.0" width="2.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="682.7" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (59 samples, 4.50%)</title><rect x="682.4" y="819.0" width="53.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="685.4" y="830.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (59 samples, 4.50%)</title><rect x="682.4" y="803.0" width="53.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="685.4" y="814.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1724566529.process (36 samples, 2.75%)</title><rect x="685.1" y="787.0" width="32.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="688.1" y="798.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (31 samples, 2.36%)</title><rect x="689.6" y="771.0" width="27.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="692.6" y="782.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (26 samples, 1.98%)</title><rect x="692.3" y="755.0" width="23.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="695.3" y="766.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.23%)</title><rect x="693.2" y="739.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="696.2" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.23%)</title><rect x="693.2" y="723.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="696.2" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.23%)</title><rect x="693.2" y="707.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="696.2" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.23%)</title><rect x="693.2" y="691.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="696.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (3 samples, 0.23%)</title><rect x="693.2" y="675.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="696.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.08%)</title><rect x="695.0" y="659.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="698.0" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (6 samples, 0.46%)</title><rect x="695.9" y="739.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="698.9" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.46%)</title><rect x="695.9" y="723.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="698.9" y="734.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.46%)</title><rect x="695.9" y="707.0" width="5.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="698.9" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.23%)</title><rect x="701.3" y="739.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="704.3" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (13 samples, 0.99%)</title><rect x="704.0" y="739.0" width="11.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="707.0" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="714.8" y="723.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="717.8" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="714.8" y="707.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="717.8" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.15%)</title><rect x="715.7" y="755.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="718.7" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.31%)</title><rect x="717.5" y="787.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="720.5" y="798.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.31%)</title><rect x="717.5" y="771.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="720.5" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 0.61%)</title><rect x="721.1" y="787.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="724.1" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.31%)</title><rect x="724.7" y="771.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="727.7" y="782.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.23%)</title><rect x="724.7" y="755.0" width="2.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="727.7" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.08%)</title><rect x="727.4" y="755.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="730.4" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.08%)</title><rect x="728.3" y="787.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="731.3" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.08%)</title><rect x="728.3" y="771.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="731.3" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (7 samples, 0.53%)</title><rect x="729.2" y="787.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="732.2" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.31%)</title><rect x="731.9" y="771.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="734.9" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="734.6" y="755.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="737.6" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.08%)</title><rect x="735.5" y="819.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="738.5" y="830.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.08%)</title><rect x="735.5" y="803.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="738.5" y="814.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.08%)</title><rect x="735.5" y="787.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="738.5" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="735.5" y="771.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="738.5" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="735.5" y="755.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="738.5" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="735.5" y="739.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="738.5" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="735.5" y="723.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="738.5" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="735.5" y="707.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="738.5" y="718.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.08%)</title><rect x="735.5" y="691.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="738.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.15%)</title><rect x="736.4" y="819.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="739.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (22 samples, 1.68%)</title><rect x="738.2" y="819.0" width="19.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="741.2" y="830.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.46%)</title><rect x="742.7" y="803.0" width="5.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="745.7" y="814.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.46%)</title><rect x="742.7" y="787.0" width="5.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="745.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 0.76%)</title><rect x="748.1" y="803.0" width="9.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="751.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 0.76%)</title><rect x="748.1" y="787.0" width="9.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="751.1" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$290/1140882854.accept (10 samples, 0.76%)</title><rect x="748.1" y="771.0" width="9.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="751.1" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$45 (10 samples, 0.76%)</title><rect x="748.1" y="755.0" width="9.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="751.1" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/691406750.complete (10 samples, 0.76%)</title><rect x="748.1" y="739.0" width="9.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="751.1" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$5 (10 samples, 0.76%)</title><rect x="748.1" y="723.0" width="9.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="751.1" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$276/1448354802.complete (10 samples, 0.76%)</title><rect x="748.1" y="707.0" width="9.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="751.1" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$null$70 (10 samples, 0.76%)</title><rect x="748.1" y="691.0" width="9.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="751.1" y="702.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.31%)</title><rect x="753.5" y="675.0" width="3.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="756.5" y="686.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.31%)</title><rect x="753.5" y="659.0" width="3.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="756.5" y="670.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="757.1" y="803.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="760.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (24 samples, 1.83%)</title><rect x="758.0" y="835.0" width="21.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="761.0" y="846.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (22 samples, 1.68%)</title><rect x="759.8" y="819.0" width="19.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="762.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (22 samples, 1.68%)</title><rect x="759.8" y="803.0" width="19.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="762.8" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$290/1140882854.accept (22 samples, 1.68%)</title><rect x="759.8" y="787.0" width="19.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="762.8" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$45 (22 samples, 1.68%)</title><rect x="759.8" y="771.0" width="19.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="762.8" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/691406750.complete (22 samples, 1.68%)</title><rect x="759.8" y="755.0" width="19.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="762.8" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$5 (22 samples, 1.68%)</title><rect x="759.8" y="739.0" width="19.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="762.8" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/576430748.complete (14 samples, 1.07%)</title><rect x="759.8" y="723.0" width="12.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="762.8" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (14 samples, 1.07%)</title><rect x="759.8" y="707.0" width="12.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="762.8" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (14 samples, 1.07%)</title><rect x="759.8" y="691.0" width="12.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="762.8" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (14 samples, 1.07%)</title><rect x="759.8" y="675.0" width="12.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="762.8" y="686.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (14 samples, 1.07%)</title><rect x="759.8" y="659.0" width="12.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="762.8" y="670.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.23%)</title><rect x="769.7" y="643.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="772.7" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.23%)</title><rect x="769.7" y="627.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="772.7" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$276/1448354802.complete (8 samples, 0.61%)</title><rect x="772.4" y="723.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="775.4" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$null$70 (8 samples, 0.61%)</title><rect x="772.4" y="707.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="775.4" y="718.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (10 samples, 0.76%)</title><rect x="779.6" y="835.0" width="9.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="782.6" y="846.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.69%)</title><rect x="780.5" y="819.0" width="8.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="783.5" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.08%)</title><rect x="788.6" y="851.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="791.6" y="862.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.08%)</title><rect x="788.6" y="835.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="791.6" y="846.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.08%)</title><rect x="788.6" y="819.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="791.6" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="788.6" y="803.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="791.6" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (8 samples, 0.61%)</title><rect x="789.5" y="851.0" width="7.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="792.5" y="862.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="790.4" y="835.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="793.4" y="846.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.38%)</title><rect x="791.3" y="835.0" width="4.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="794.3" y="846.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.38%)</title><rect x="791.3" y="819.0" width="4.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="794.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.08%)</title><rect x="795.8" y="835.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="798.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (10 samples, 0.76%)</title><rect x="796.7" y="899.0" width="9.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="799.7" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.76%)</title><rect x="796.7" y="883.0" width="9.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="799.7" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 0.76%)</title><rect x="796.7" y="867.0" width="9.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="799.7" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 0.76%)</title><rect x="796.7" y="851.0" width="9.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="799.7" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/1505821178.run (6 samples, 0.46%)</title><rect x="800.3" y="835.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="803.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (251 samples, 19.15%)</title><rect x="805.7" y="899.0" width="225.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="808.7" y="910.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (241 samples, 18.38%)</title><rect x="813.8" y="883.0" width="216.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="816.8" y="894.0">java/util/concurrent/LinkedB..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (217 samples, 16.55%)</title><rect x="815.6" y="867.0" width="195.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="818.6" y="878.0">java/util/concurrent/lock..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (29 samples, 2.21%)</title><rect x="822.8" y="851.0" width="26.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="825.8" y="862.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (10 samples, 0.76%)</title><rect x="848.9" y="851.0" width="9.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="851.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.76%)</title><rect x="848.9" y="835.0" width="9.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="851.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 0.76%)</title><rect x="848.9" y="819.0" width="9.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="851.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 0.76%)</title><rect x="848.9" y="803.0" width="9.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="851.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (169 samples, 12.89%)</title><rect x="857.9" y="851.0" width="152.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="860.9" y="862.0">java/util/concurren..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (167 samples, 12.74%)</title><rect x="859.7" y="835.0" width="150.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="862.7" y="846.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.08%)</title><rect x="866.9" y="819.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="869.9" y="830.0"></text>
</g>
<g>
<title>Unsafe_Park (152 samples, 11.59%)</title><rect x="867.8" y="819.0" width="136.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="870.8" y="830.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.15%)</title><rect x="873.2" y="803.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="876.2" y="814.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.15%)</title><rect x="875.0" y="803.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="878.0" y="814.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (16 samples, 1.22%)</title><rect x="876.8" y="803.0" width="14.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="879.8" y="814.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (4 samples, 0.31%)</title><rect x="882.2" y="787.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="885.2" y="798.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.15%)</title><rect x="883.1" y="771.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="886.1" y="782.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="884.0" y="755.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="887.0" y="766.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.08%)</title><rect x="884.9" y="771.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="887.9" y="782.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (6 samples, 0.46%)</title><rect x="885.8" y="787.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="888.8" y="798.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="891.2" y="803.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="894.2" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.15%)</title><rect x="892.1" y="803.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="895.1" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="893.9" y="803.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="896.9" y="814.0"></text>
</g>
<g>
<title>__lll_lock_wait (8 samples, 0.61%)</title><rect x="894.8" y="803.0" width="7.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="897.8" y="814.0"></text>
</g>
<g>
<title>__lll_unlock_wake (29 samples, 2.21%)</title><rect x="902.0" y="803.0" width="26.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="905.0" y="814.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (55 samples, 4.20%)</title><rect x="928.1" y="803.0" width="49.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="931.1" y="814.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (10 samples, 0.76%)</title><rect x="977.6" y="803.0" width="9.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="980.6" y="814.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (3 samples, 0.23%)</title><rect x="986.6" y="803.0" width="2.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="989.6" y="814.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (5 samples, 0.38%)</title><rect x="989.3" y="803.0" width="4.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="992.3" y="814.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.15%)</title><rect x="993.8" y="803.0" width="1.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="996.8" y="814.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.31%)</title><rect x="995.6" y="803.0" width="3.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="998.6" y="814.0"></text>
</g>
<g>
<title>_init (1 samples, 0.08%)</title><rect x="999.2" y="803.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1002.2" y="814.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.08%)</title><rect x="1000.1" y="803.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1003.1" y="814.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.15%)</title><rect x="1001.0" y="803.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1004.0" y="814.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.15%)</title><rect x="1002.8" y="803.0" width="1.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1005.8" y="814.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.15%)</title><rect x="1004.6" y="819.0" width="1.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1007.6" y="830.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.08%)</title><rect x="1006.4" y="819.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1009.4" y="830.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.23%)</title><rect x="1007.3" y="819.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1010.3" y="830.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.08%)</title><rect x="1010.0" y="851.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1013.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.08%)</title><rect x="1010.9" y="867.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1013.9" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.08%)</title><rect x="1010.9" y="851.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1013.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.08%)</title><rect x="1010.9" y="835.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1013.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (21 samples, 1.60%)</title><rect x="1011.8" y="867.0" width="18.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1014.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (21 samples, 1.60%)</title><rect x="1011.8" y="851.0" width="18.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1014.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (21 samples, 1.60%)</title><rect x="1011.8" y="835.0" width="18.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1014.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (21 samples, 1.60%)</title><rect x="1011.8" y="819.0" width="18.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1014.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.08%)</title><rect x="1030.7" y="883.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1033.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.08%)</title><rect x="1031.6" y="947.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1034.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.08%)</title><rect x="1031.6" y="931.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1034.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="1031.6" y="915.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1034.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.08%)</title><rect x="1031.6" y="899.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1034.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.08%)</title><rect x="1031.6" y="883.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1034.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.08%)</title><rect x="1031.6" y="867.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1034.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.08%)</title><rect x="1031.6" y="851.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1034.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.08%)</title><rect x="1031.6" y="835.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1034.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.08%)</title><rect x="1031.6" y="819.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1034.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="1031.6" y="803.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1034.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="1031.6" y="787.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1034.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="1031.6" y="771.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1034.6" y="782.0"></text>
</g>
<g>
<title>start_thread (175 samples, 13.35%)</title><rect x="1032.5" y="947.0" width="157.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1035.5" y="958.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (175 samples, 13.35%)</title><rect x="1032.5" y="931.0" width="157.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1035.5" y="942.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (34 samples, 2.59%)</title><rect x="1032.5" y="915.0" width="30.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1035.5" y="926.0">Ga..</text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (1 samples, 0.08%)</title><rect x="1032.5" y="899.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1035.5" y="910.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (7 samples, 0.53%)</title><rect x="1033.4" y="899.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1036.4" y="910.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.53%)</title><rect x="1033.4" y="883.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1036.4" y="894.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.08%)</title><rect x="1033.4" y="867.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1036.4" y="878.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 0.46%)</title><rect x="1034.3" y="867.0" width="5.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1037.3" y="878.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (26 samples, 1.98%)</title><rect x="1039.7" y="899.0" width="23.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1042.7" y="910.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.53%)</title><rect x="1039.7" y="883.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1042.7" y="894.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.08%)</title><rect x="1039.7" y="867.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1042.7" y="878.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.08%)</title><rect x="1039.7" y="851.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1042.7" y="862.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.08%)</title><rect x="1040.6" y="867.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1043.6" y="878.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.38%)</title><rect x="1041.5" y="867.0" width="4.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1044.5" y="878.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (10 samples, 0.76%)</title><rect x="1046.0" y="883.0" width="9.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1049.0" y="894.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.08%)</title><rect x="1046.0" y="867.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1049.0" y="878.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.08%)</title><rect x="1046.0" y="851.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1049.0" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.08%)</title><rect x="1046.0" y="835.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1049.0" y="846.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.38%)</title><rect x="1046.9" y="867.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1049.9" y="878.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.15%)</title><rect x="1046.9" y="851.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1049.9" y="862.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.15%)</title><rect x="1046.9" y="835.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1049.9" y="846.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.08%)</title><rect x="1047.8" y="819.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1050.8" y="830.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.08%)</title><rect x="1047.8" y="803.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1050.8" y="814.0"></text>
</g>
<g>
<title>G1ParGCAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, unsigned char) (1 samples, 0.08%)</title><rect x="1047.8" y="787.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1050.8" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::par_allocate_during_gc(InCSetState, unsigned long, unsigned char) (1 samples, 0.08%)</title><rect x="1047.8" y="771.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1050.8" y="782.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.08%)</title><rect x="1047.8" y="755.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1050.8" y="766.0"></text>
</g>
<g>
<title>G1GCParPhaseTimesTracker::~G1GCParPhaseTimesTracker() (1 samples, 0.08%)</title><rect x="1048.7" y="851.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1051.7" y="862.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.15%)</title><rect x="1049.6" y="851.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1052.6" y="862.0"></text>
</g>
<g>
<title>CompilerThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1049.6" y="835.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1052.6" y="846.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1050.5" y="835.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1053.5" y="846.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.08%)</title><rect x="1050.5" y="819.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1053.5" y="830.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**), OopClosure*) (1 samples, 0.08%)</title><rect x="1050.5" y="803.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1053.5" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.31%)</title><rect x="1051.4" y="867.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1054.4" y="878.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.08%)</title><rect x="1051.4" y="851.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1054.4" y="862.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.15%)</title><rect x="1052.3" y="851.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1055.3" y="862.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.08%)</title><rect x="1054.1" y="851.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1057.1" y="862.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.08%)</title><rect x="1054.1" y="835.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1057.1" y="846.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (9 samples, 0.69%)</title><rect x="1055.0" y="883.0" width="8.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1058.0" y="894.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (9 samples, 0.69%)</title><rect x="1055.0" y="867.0" width="8.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1058.0" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (8 samples, 0.61%)</title><rect x="1055.0" y="851.0" width="7.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1058.0" y="862.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (8 samples, 0.61%)</title><rect x="1055.0" y="835.0" width="7.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1058.0" y="846.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (8 samples, 0.61%)</title><rect x="1055.0" y="819.0" width="7.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1058.0" y="830.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (7 samples, 0.53%)</title><rect x="1055.9" y="803.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1058.9" y="814.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (4 samples, 0.31%)</title><rect x="1057.7" y="787.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1060.7" y="798.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (2 samples, 0.15%)</title><rect x="1057.7" y="771.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1060.7" y="782.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.08%)</title><rect x="1059.5" y="771.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1062.5" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.08%)</title><rect x="1059.5" y="755.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1062.5" y="766.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.08%)</title><rect x="1059.5" y="739.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1062.5" y="750.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.08%)</title><rect x="1060.4" y="771.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1063.4" y="782.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.08%)</title><rect x="1061.3" y="787.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1064.3" y="798.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.08%)</title><rect x="1062.2" y="851.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1065.2" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.08%)</title><rect x="1062.2" y="835.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1065.2" y="846.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.08%)</title><rect x="1062.2" y="819.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1065.2" y="830.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="1062.2" y="803.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1065.2" y="814.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="1062.2" y="787.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1065.2" y="798.0"></text>
</g>
<g>
<title>JavaThread::run() (140 samples, 10.68%)</title><rect x="1063.1" y="915.0" width="126.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1066.1" y="926.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (140 samples, 10.68%)</title><rect x="1063.1" y="899.0" width="126.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1066.1" y="910.0">JavaThread::thre..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (140 samples, 10.68%)</title><rect x="1063.1" y="883.0" width="126.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1066.1" y="894.0">CompileBroker::c..</text>
</g>
<g>
<title>CompileBroker::collect_statistics(CompilerThread*, elapsedTimer, CompileTask*) (1 samples, 0.08%)</title><rect x="1063.1" y="867.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1066.1" y="878.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (138 samples, 10.53%)</title><rect x="1064.0" y="867.0" width="124.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1067.0" y="878.0">CompileBroker::..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (137 samples, 10.45%)</title><rect x="1064.0" y="851.0" width="123.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1067.0" y="862.0">C2Compiler::com..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (137 samples, 10.45%)</title><rect x="1064.0" y="835.0" width="123.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1067.0" y="846.0">Compile::Compil..</text>
</g>
<g>
<title>Compile::Code_Gen() (60 samples, 4.58%)</title><rect x="1064.0" y="819.0" width="54.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1067.0" y="830.0">Compi..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.15%)</title><rect x="1064.0" y="803.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1067.0" y="814.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.15%)</title><rect x="1064.0" y="787.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1067.0" y="798.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.08%)</title><rect x="1064.0" y="771.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1067.0" y="782.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.08%)</title><rect x="1064.0" y="755.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1067.0" y="766.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.08%)</title><rect x="1064.0" y="739.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1067.0" y="750.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="1064.0" y="723.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1067.0" y="734.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.08%)</title><rect x="1064.9" y="771.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1067.9" y="782.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.08%)</title><rect x="1064.9" y="755.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1067.9" y="766.0"></text>
</g>
<g>
<title>loadUSNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.08%)</title><rect x="1064.9" y="739.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1067.9" y="750.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 0.31%)</title><rect x="1065.8" y="803.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1068.8" y="814.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.15%)</title><rect x="1065.8" y="787.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1068.8" y="798.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (2 samples, 0.15%)</title><rect x="1065.8" y="771.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1068.8" y="782.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.15%)</title><rect x="1065.8" y="755.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1068.8" y="766.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.08%)</title><rect x="1067.6" y="787.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1070.6" y="798.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="1067.6" y="771.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1070.6" y="782.0"></text>
</g>
<g>
<title>DebugInformationRecorder::end_scopes(int, bool) (1 samples, 0.08%)</title><rect x="1068.5" y="787.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1071.5" y="798.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 0.38%)</title><rect x="1069.4" y="803.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1072.4" y="814.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.08%)</title><rect x="1069.4" y="787.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1072.4" y="798.0"></text>
</g>
<g>
<title>Matcher::is_bmi_pattern(Node*, Node*) (1 samples, 0.08%)</title><rect x="1069.4" y="771.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1072.4" y="782.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.23%)</title><rect x="1070.3" y="787.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1073.3" y="798.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.08%)</title><rect x="1071.2" y="771.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1074.2" y="782.0"></text>
</g>
<g>
<title>CallNode::match(ProjNode const*, Matcher const*) (1 samples, 0.08%)</title><rect x="1072.1" y="771.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1075.1" y="782.0"></text>
</g>
<g>
<title>RegionNode::Opcode() const (1 samples, 0.08%)</title><rect x="1073.0" y="787.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1076.0" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (6 samples, 0.46%)</title><rect x="1073.9" y="803.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1076.9" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (2 samples, 0.15%)</title><rect x="1073.9" y="787.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1076.9" y="798.0"></text>
</g>
<g>
<title>CFGLoop::compute_freq() (1 samples, 0.08%)</title><rect x="1073.9" y="771.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1076.9" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::create_loop_tree() (1 samples, 0.08%)</title><rect x="1074.8" y="771.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1077.8" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.31%)</title><rect x="1075.7" y="787.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1078.7" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (4 samples, 0.31%)</title><rect x="1075.7" y="771.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1078.7" y="782.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.08%)</title><rect x="1076.6" y="755.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1079.6" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.08%)</title><rect x="1077.5" y="755.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1080.5" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.08%)</title><rect x="1078.4" y="755.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1081.4" y="766.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.08%)</title><rect x="1078.4" y="739.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1081.4" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (43 samples, 3.28%)</title><rect x="1079.3" y="803.0" width="38.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1082.3" y="814.0">Pha..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.08%)</title><rect x="1080.2" y="787.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1083.2" y="798.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.08%)</title><rect x="1081.1" y="787.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1084.1" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.23%)</title><rect x="1082.0" y="787.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1085.0" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.15%)</title><rect x="1082.9" y="771.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1085.9" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1083.8" y="755.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1086.8" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.15%)</title><rect x="1084.7" y="787.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1087.7" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.15%)</title><rect x="1084.7" y="771.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1087.7" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1085.6" y="755.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1088.6" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 0.38%)</title><rect x="1086.5" y="787.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1089.5" y="798.0"></text>
</g>
<g>
<title>CreateExceptionNode::rule() const (1 samples, 0.08%)</title><rect x="1088.3" y="771.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1091.3" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::split_DEF(Node*, Block*, int, unsigned int, Node**, Node**, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.08%)</title><rect x="1089.2" y="771.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1092.2" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.08%)</title><rect x="1089.2" y="755.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1092.2" y="766.0"></text>
</g>
<g>
<title>loadRangeNode::rule() const (1 samples, 0.08%)</title><rect x="1090.1" y="771.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1093.1" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 0.76%)</title><rect x="1091.0" y="787.0" width="9.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1094.0" y="798.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.08%)</title><rect x="1095.5" y="771.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1098.5" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.23%)</title><rect x="1096.4" y="771.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1099.4" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1098.2" y="755.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1101.2" y="766.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.08%)</title><rect x="1099.1" y="771.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1102.1" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (6 samples, 0.46%)</title><rect x="1100.0" y="787.0" width="5.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1103.0" y="798.0"></text>
</g>
<g>
<title>MachNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1102.7" y="771.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1105.7" y="782.0"></text>
</g>
<g>
<title>MachOper::num_edges() const (1 samples, 0.08%)</title><rect x="1103.6" y="771.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1106.6" y="782.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.08%)</title><rect x="1104.5" y="771.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1107.5" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.23%)</title><rect x="1105.4" y="787.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1108.4" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.08%)</title><rect x="1107.2" y="771.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1110.2" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1107.2" y="755.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1110.2" y="766.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (1 samples, 0.08%)</title><rect x="1107.2" y="739.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1110.2" y="750.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.08%)</title><rect x="1107.2" y="723.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1110.2" y="734.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 0.23%)</title><rect x="1108.1" y="787.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1111.1" y="798.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (3 samples, 0.23%)</title><rect x="1108.1" y="771.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1111.1" y="782.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (3 samples, 0.23%)</title><rect x="1108.1" y="755.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1111.1" y="766.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.15%)</title><rect x="1108.1" y="739.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1111.1" y="750.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.08%)</title><rect x="1109.9" y="739.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1112.9" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.08%)</title><rect x="1110.8" y="787.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1113.8" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1110.8" y="771.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1113.8" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.08%)</title><rect x="1111.7" y="787.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1114.7" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.08%)</title><rect x="1112.6" y="787.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1115.6" y="798.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.08%)</title><rect x="1112.6" y="771.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1115.6" y="782.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 0.31%)</title><rect x="1113.5" y="787.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1116.5" y="798.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.15%)</title><rect x="1115.3" y="771.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1118.3" y="782.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.08%)</title><rect x="1117.1" y="787.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1120.1" y="798.0"></text>
</g>
<g>
<title>Compile::Optimize() (66 samples, 5.03%)</title><rect x="1118.0" y="819.0" width="59.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1121.0" y="830.0">Compil..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.08%)</title><rect x="1118.0" y="803.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1121.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.08%)</title><rect x="1118.9" y="803.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1121.9" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.08%)</title><rect x="1118.9" y="787.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1121.9" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1118.9" y="771.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1121.9" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1118.9" y="755.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1121.9" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1118.9" y="739.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1121.9" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1118.9" y="723.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.9" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1118.9" y="707.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1121.9" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1118.9" y="691.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1121.9" y="702.0"></text>
</g>
<g>
<title>PhiNode::adr_type() const (1 samples, 0.08%)</title><rect x="1118.9" y="675.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1121.9" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (53 samples, 4.04%)</title><rect x="1119.8" y="803.0" width="47.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1122.8" y="814.0">Phas..</text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.08%)</title><rect x="1119.8" y="787.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.8" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.15%)</title><rect x="1120.7" y="787.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1123.7" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.15%)</title><rect x="1122.5" y="787.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1125.5" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (43 samples, 3.28%)</title><rect x="1124.3" y="787.0" width="38.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1127.3" y="798.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (41 samples, 3.13%)</title><rect x="1126.1" y="771.0" width="36.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1129.1" y="782.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1127.0" y="755.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1130.0" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (39 samples, 2.97%)</title><rect x="1127.9" y="755.0" width="35.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1130.9" y="766.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.08%)</title><rect x="1155.8" y="739.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.8" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1155.8" y="723.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.8" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (6 samples, 0.46%)</title><rect x="1156.7" y="739.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.7" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1162.1" y="739.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.1" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1162.1" y="723.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.1" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.08%)</title><rect x="1163.0" y="787.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.0" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.23%)</title><rect x="1163.9" y="787.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.9" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.15%)</title><rect x="1164.8" y="771.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.8" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.08%)</title><rect x="1164.8" y="755.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.8" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1164.8" y="739.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.8" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1165.7" y="755.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.7" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1165.7" y="739.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1168.7" y="750.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.08%)</title><rect x="1165.7" y="723.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.7" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="1166.6" y="787.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.6" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1166.6" y="771.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.6" y="782.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1166.6" y="755.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.6" y="766.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1166.6" y="739.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.6" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (11 samples, 0.84%)</title><rect x="1167.5" y="803.0" width="9.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.5" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (11 samples, 0.84%)</title><rect x="1167.5" y="787.0" width="9.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.5" y="798.0"></text>
</g>
<g>
<title>BoolNode::hash() const (1 samples, 0.08%)</title><rect x="1167.5" y="771.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.5" y="782.0"></text>
</g>
<g>
<title>BoolNode::Opcode() const (1 samples, 0.08%)</title><rect x="1167.5" y="755.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.5" y="766.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.15%)</title><rect x="1168.4" y="771.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.4" y="782.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.08%)</title><rect x="1168.4" y="755.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.4" y="766.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1168.4" y="739.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.4" y="750.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1168.4" y="723.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.4" y="734.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1169.3" y="755.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.3" y="766.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.08%)</title><rect x="1169.3" y="739.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.3" y="750.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1169.3" y="723.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.3" y="734.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.08%)</title><rect x="1169.3" y="707.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.3" y="718.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.08%)</title><rect x="1169.3" y="691.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.3" y="702.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1169.3" y="675.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.3" y="686.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1170.2" y="771.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.2" y="782.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1171.1" y="771.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.1" y="782.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1172.0" y="771.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.0" y="782.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1172.9" y="771.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.9" y="782.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1173.8" y="771.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.8" y="782.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1174.7" y="771.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.7" y="782.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.08%)</title><rect x="1174.7" y="755.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.7" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1174.7" y="739.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.7" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1174.7" y="723.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.7" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1174.7" y="707.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.7" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1174.7" y="691.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.7" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1174.7" y="675.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.7" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1174.7" y="659.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.7" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1174.7" y="643.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.7" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1174.7" y="627.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.7" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1174.7" y="611.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.7" y="622.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1174.7" y="595.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.7" y="606.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1174.7" y="579.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.7" y="590.0"></text>
</g>
<g>
<title>StoreNode::Identity(PhaseTransform*) (2 samples, 0.15%)</title><rect x="1175.6" y="771.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.6" y="782.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (2 samples, 0.15%)</title><rect x="1175.6" y="755.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.6" y="766.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.15%)</title><rect x="1175.6" y="739.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.6" y="750.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.15%)</title><rect x="1175.6" y="723.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.6" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.84%)</title><rect x="1177.4" y="819.0" width="9.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.4" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.84%)</title><rect x="1177.4" y="803.0" width="9.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 0.84%)</title><rect x="1177.4" y="787.0" width="9.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.84%)</title><rect x="1177.4" y="771.0" width="9.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 0.84%)</title><rect x="1177.4" y="755.0" width="9.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.76%)</title><rect x="1177.4" y="739.0" width="9.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.4" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.53%)</title><rect x="1177.4" y="723.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.4" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.53%)</title><rect x="1177.4" y="707.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.53%)</title><rect x="1177.4" y="691.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.53%)</title><rect x="1177.4" y="675.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.53%)</title><rect x="1177.4" y="659.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.53%)</title><rect x="1177.4" y="643.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.4" y="654.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1177.4" y="627.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.4" y="638.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1177.4" y="611.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.4" y="622.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1177.4" y="595.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.4" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1177.4" y="579.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.4" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1177.4" y="563.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.4" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1177.4" y="547.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.4" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1177.4" y="531.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.4" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1177.4" y="515.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.4" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.08%)</title><rect x="1177.4" y="499.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.4" y="510.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1177.4" y="483.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.4" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1177.4" y="467.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.4" y="478.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1177.4" y="451.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.4" y="462.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1177.4" y="435.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.4" y="446.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.08%)</title><rect x="1177.4" y="419.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.4" y="430.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, KlassHandle&amp;, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1177.4" y="403.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.4" y="414.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.08%)</title><rect x="1177.4" y="387.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.4" y="398.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1177.4" y="371.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.4" y="382.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.08%)</title><rect x="1177.4" y="355.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.4" y="366.0"></text>
</g>
<g>
<title>SignatureStream::SignatureStream(Symbol*, bool) (1 samples, 0.08%)</title><rect x="1177.4" y="339.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.4" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.31%)</title><rect x="1178.3" y="627.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.3" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.31%)</title><rect x="1178.3" y="611.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.31%)</title><rect x="1178.3" y="595.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.31%)</title><rect x="1178.3" y="579.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.31%)</title><rect x="1178.3" y="563.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.31%)</title><rect x="1178.3" y="547.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.3" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.23%)</title><rect x="1178.3" y="531.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.3" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.23%)</title><rect x="1178.3" y="515.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.23%)</title><rect x="1178.3" y="499.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.23%)</title><rect x="1178.3" y="483.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.23%)</title><rect x="1178.3" y="467.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1178.3" y="451.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.3" y="462.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1178.3" y="435.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.3" y="446.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1178.3" y="419.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.3" y="430.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1178.3" y="403.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.3" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1178.3" y="387.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.3" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1178.3" y="371.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.3" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1178.3" y="355.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.3" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1178.3" y="339.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.3" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1178.3" y="323.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.3" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1178.3" y="307.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.3" y="318.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.08%)</title><rect x="1178.3" y="291.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.3" y="302.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1178.3" y="275.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.3" y="286.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1178.3" y="259.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.3" y="270.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.08%)</title><rect x="1178.3" y="243.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.3" y="254.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.08%)</title><rect x="1178.3" y="227.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.3" y="238.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.08%)</title><rect x="1178.3" y="211.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.3" y="222.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.08%)</title><rect x="1179.2" y="451.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.2" y="462.0"></text>
</g>
<g>
<title>PhiNode::slice_memory(TypePtr const*) const (1 samples, 0.08%)</title><rect x="1179.2" y="435.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.2" y="446.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.08%)</title><rect x="1179.2" y="419.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.2" y="430.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1180.1" y="451.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.1" y="462.0"></text>
</g>
<g>
<title>AddINode::add_ring(Type const*, Type const*) const (1 samples, 0.08%)</title><rect x="1180.1" y="435.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.1" y="446.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1180.1" y="419.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.1" y="430.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1180.1" y="403.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.1" y="414.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.08%)</title><rect x="1180.1" y="387.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.1" y="398.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.0" y="531.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.0" y="542.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.0" y="515.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.0" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.0" y="499.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.0" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.0" y="483.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.0" y="467.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.0" y="451.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.0" y="435.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.0" y="419.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.0" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.0" y="403.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.0" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.0" y="387.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.0" y="371.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.0" y="355.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.0" y="339.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.0" y="323.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.0" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.0" y="307.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.0" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.0" y="291.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.0" y="275.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.0" y="259.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.0" y="243.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.0" y="227.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.0" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.0" y="211.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.0" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.0" y="195.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.0" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.0" y="179.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.0" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.0" y="163.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.0" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.0" y="147.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.0" y="158.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1181.0" y="131.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.0" y="142.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1181.0" y="115.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.0" y="126.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1181.0" y="99.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.0" y="110.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.08%)</title><rect x="1181.0" y="83.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.0" y="94.0"></text>
</g>
<g>
<title>GraphKit::g1_mark_card(IdealKit&amp;, Node*, Node*, unsigned int, Node*, Node*, Node*, TypeFunc const*) (1 samples, 0.08%)</title><rect x="1181.0" y="67.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.0" y="78.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.08%)</title><rect x="1181.0" y="51.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.0" y="62.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.08%)</title><rect x="1181.0" y="35.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.0" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1181.9" y="627.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.9" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.9" y="611.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.9" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.9" y="595.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.9" y="579.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.9" y="563.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.9" y="547.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.9" y="531.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.9" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.9" y="515.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.9" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.9" y="499.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.9" y="483.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.9" y="467.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.9" y="451.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.9" y="435.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.9" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.9" y="419.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.9" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.9" y="403.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.9" y="387.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.9" y="371.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.9" y="355.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.9" y="339.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.9" y="350.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1181.9" y="323.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.9" y="334.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1181.9" y="307.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.9" y="318.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1181.9" y="291.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.9" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1181.9" y="275.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.9" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1181.9" y="259.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.9" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1181.9" y="243.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.9" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1181.9" y="227.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.9" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.08%)</title><rect x="1181.9" y="211.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.9" y="222.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1181.9" y="195.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.9" y="206.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1181.9" y="179.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.9" y="190.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1181.9" y="163.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.9" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1181.9" y="147.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.9" y="158.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.8" y="611.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.8" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.8" y="595.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.8" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.8" y="579.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.8" y="563.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.8" y="547.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.8" y="531.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.8" y="515.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.8" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.8" y="499.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.8" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.8" y="483.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.8" y="467.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.8" y="451.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.8" y="435.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.8" y="419.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.8" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.8" y="403.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.8" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.8" y="387.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.8" y="371.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.8" y="355.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.8" y="339.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.8" y="323.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.8" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.8" y="307.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.8" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.8" y="291.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.8" y="275.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.8" y="259.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.8" y="243.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.8" y="227.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.8" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.8" y="211.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.8" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.8" y="195.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.8" y="179.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.8" y="190.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.08%)</title><rect x="1182.8" y="163.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.8" y="174.0"></text>
</g>
<g>
<title>Parse::merge_memory_edges(MergeMemNode*, int, bool) (1 samples, 0.08%)</title><rect x="1182.8" y="147.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.8" y="158.0"></text>
</g>
<g>
<title>Parse::ensure_memory_phi(int, bool) (1 samples, 0.08%)</title><rect x="1182.8" y="131.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.8" y="142.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.08%)</title><rect x="1182.8" y="115.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.8" y="126.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.08%)</title><rect x="1182.8" y="99.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.8" y="110.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.23%)</title><rect x="1183.7" y="723.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.7" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.23%)</title><rect x="1183.7" y="707.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.7" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.23%)</title><rect x="1183.7" y="691.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.23%)</title><rect x="1183.7" y="675.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.23%)</title><rect x="1183.7" y="659.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.23%)</title><rect x="1183.7" y="643.0" width="2.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.23%)</title><rect x="1183.7" y="627.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.7" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.23%)</title><rect x="1183.7" y="611.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.7" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.23%)</title><rect x="1183.7" y="595.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.23%)</title><rect x="1183.7" y="579.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.23%)</title><rect x="1183.7" y="563.0" width="2.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.23%)</title><rect x="1183.7" y="547.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.23%)</title><rect x="1183.7" y="531.0" width="2.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.7" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.7" y="515.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.7" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.7" y="499.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1183.7" y="483.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.7" y="467.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.7" y="451.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.08%)</title><rect x="1183.7" y="435.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.7" y="446.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.08%)</title><rect x="1183.7" y="419.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.7" y="430.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1183.7" y="403.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.7" y="414.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.08%)</title><rect x="1183.7" y="387.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.7" y="398.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.08%)</title><rect x="1183.7" y="371.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.7" y="382.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.08%)</title><rect x="1183.7" y="355.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.7" y="366.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1183.7" y="339.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1186.7" y="350.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1184.6" y="515.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.6" y="526.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.08%)</title><rect x="1184.6" y="499.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.6" y="510.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1184.6" y="483.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.6" y="494.0"></text>
</g>
<g>
<title>CheckCastPPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1184.6" y="467.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.6" y="478.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1184.6" y="451.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.6" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1185.5" y="499.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.5" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1185.5" y="483.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1185.5" y="467.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1185.5" y="451.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1185.5" y="435.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1185.5" y="419.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.5" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1185.5" y="403.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.5" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1185.5" y="387.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1185.5" y="371.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1185.5" y="355.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1185.5" y="339.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1185.5" y="323.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.5" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1185.5" y="307.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.5" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1185.5" y="291.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1185.5" y="275.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1185.5" y="259.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1185.5" y="243.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.5" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1185.5" y="227.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.5" y="238.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1185.5" y="211.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.5" y="222.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1185.5" y="195.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.5" y="206.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1185.5" y="179.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.5" y="190.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.08%)</title><rect x="1185.5" y="163.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.5" y="174.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.08%)</title><rect x="1185.5" y="147.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.5" y="158.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.08%)</title><rect x="1185.5" y="131.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.5" y="142.0"></text>
</g>
<g>
<title>SignatureStream::SignatureStream(Symbol*, bool) (1 samples, 0.08%)</title><rect x="1185.5" y="115.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.5" y="126.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1186.4" y="739.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.4" y="750.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1186.4" y="723.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.4" y="734.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1186.4" y="707.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.4" y="718.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1186.4" y="691.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.4" y="702.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1186.4" y="675.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.4" y="686.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1186.4" y="659.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.4" y="670.0"></text>
</g>
<g>
<title>TypeInstPtr::xdual() const (1 samples, 0.08%)</title><rect x="1186.4" y="643.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.4" y="654.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.08%)</title><rect x="1186.4" y="627.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.4" y="638.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1187.3" y="851.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.3" y="862.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.08%)</title><rect x="1187.3" y="835.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.3" y="846.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.08%)</title><rect x="1187.3" y="819.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.3" y="830.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.08%)</title><rect x="1187.3" y="803.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.3" y="814.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.08%)</title><rect x="1187.3" y="787.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.3" y="798.0"></text>
</g>
<g>
<title>Compilation::emit_code_epilog(LIR_Assembler*) (1 samples, 0.08%)</title><rect x="1187.3" y="771.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.3" y="782.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_slow_case_stubs() (1 samples, 0.08%)</title><rect x="1187.3" y="755.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.3" y="766.0"></text>
</g>
<g>
<title>CounterOverflowStub::emit_code(LIR_Assembler*) (1 samples, 0.08%)</title><rect x="1187.3" y="739.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.3" y="750.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.08%)</title><rect x="1187.3" y="723.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.3" y="734.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.08%)</title><rect x="1187.3" y="707.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.3" y="718.0"></text>
</g>
<g>
<title>OopMap::deep_copy() (1 samples, 0.08%)</title><rect x="1187.3" y="691.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.3" y="702.0"></text>
</g>
<g>
<title>OopMap::OopMap(OopMap::DeepCopyToken, OopMap*) (1 samples, 0.08%)</title><rect x="1187.3" y="675.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.3" y="686.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.08%)</title><rect x="1188.2" y="867.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.2" y="878.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.08%)</title><rect x="1188.2" y="851.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.2" y="862.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.08%)</title><rect x="1188.2" y="835.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.2" y="846.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.08%)</title><rect x="1188.2" y="819.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.2" y="830.0"></text>
</g>
<g>
<title>NMethodSweeper::release_nmethod(nmethod*) (1 samples, 0.08%)</title><rect x="1188.2" y="803.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.2" y="814.0"></text>
</g>
<g>
<title>CodeHeap::deallocate(void*) (1 samples, 0.08%)</title><rect x="1188.2" y="787.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.2" y="798.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.08%)</title><rect x="1189.1" y="915.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.1" y="926.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.08%)</title><rect x="1189.1" y="899.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.1" y="910.0"></text>
</g>
<g>
<title>__sched_yield (1 samples, 0.08%)</title><rect x="1189.1" y="883.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1192.1" y="894.0"></text>
</g>
</g>
</svg>
