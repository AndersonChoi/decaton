<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (1,428 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2035.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2019.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2003.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1987.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1971.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1955.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1939.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1923.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1907.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1891.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1875.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1859.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1843.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1827.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1811.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1795.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1779.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1763.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1747.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1731.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1715.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1699.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1683.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1667.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1651.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1635.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1619.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1603.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1587.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1571.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1555.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1539.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1523.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1507.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1491.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1475.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1459.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1443.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1427.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1411.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1395.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1379.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1363.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1347.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1331.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1315.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1299.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1283.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1267.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1251.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1235.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1219.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1203.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1187.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1171.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1155.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1139.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1123.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1107.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1091.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1075.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1059.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1043.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1027.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1011.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="995.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="979.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="963.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="947.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="931.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="915.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="899.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="883.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="867.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="851.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="835.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="819.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="803.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="787.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="771.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="755.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="739.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="723.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="707.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="691.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="675.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="659.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="643.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="627.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="611.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="595.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="579.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="563.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="547.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="531.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="515.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="499.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="483.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="467.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="451.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="435.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="419.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="403.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="387.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="371.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="355.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="339.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="323.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="307.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="291.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="275.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="259.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="243.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="227.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="211.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="195.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="179.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="163.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="147.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="131.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="115.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="99.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="83.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="67.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="51.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="35.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="10.8" y="2035.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.8" y="2046.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.07%)</title><rect x="10.8" y="2019.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="13.8" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (327 samples, 22.90%)</title><rect x="11.7" y="2035.0" width="270.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="14.7" y="2046.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (326 samples, 22.83%)</title><rect x="12.5" y="2019.0" width="269.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.5" y="2030.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (4 samples, 0.28%)</title><rect x="12.5" y="2003.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="15.5" y="2014.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.28%)</title><rect x="12.5" y="1987.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="15.5" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1855519235.accept (4 samples, 0.28%)</title><rect x="12.5" y="1971.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.5" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (4 samples, 0.28%)</title><rect x="12.5" y="1955.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.5" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.21%)</title><rect x="13.3" y="1939.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.3" y="1950.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.21%)</title><rect x="13.3" y="1923.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.3" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (3 samples, 0.21%)</title><rect x="15.8" y="2003.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.8" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (2 samples, 0.14%)</title><rect x="16.6" y="1987.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.6" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.14%)</title><rect x="16.6" y="1971.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="19.6" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.14%)</title><rect x="16.6" y="1955.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="19.6" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.14%)</title><rect x="16.6" y="1939.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.6" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.14%)</title><rect x="16.6" y="1923.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="19.6" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.14%)</title><rect x="16.6" y="1907.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.6" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.14%)</title><rect x="16.6" y="1891.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.6" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="17.4" y="1875.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.4" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="17.4" y="1859.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.4" y="1870.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="17.4" y="1843.0" width="0.9" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="20.4" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (3 samples, 0.21%)</title><rect x="18.3" y="2003.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.3" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (3 samples, 0.21%)</title><rect x="18.3" y="1987.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.3" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="19.9" y="1971.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.9" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="19.9" y="1955.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="22.9" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="19.9" y="1939.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="22.9" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="19.9" y="1923.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.9" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="19.9" y="1907.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.9" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="19.9" y="1891.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="22.9" y="1902.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (245 samples, 17.16%)</title><rect x="20.7" y="2003.0" width="202.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="23.7" y="2014.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/128218554.accept (229 samples, 16.04%)</title><rect x="21.6" y="1987.0" width="189.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="24.6" y="1998.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$71 (227 samples, 15.90%)</title><rect x="23.2" y="1971.0" width="187.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="26.2" y="1982.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (185 samples, 12.96%)</title><rect x="23.2" y="1955.0" width="152.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="26.2" y="1966.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (185 samples, 12.96%)</title><rect x="23.2" y="1939.0" width="152.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="26.2" y="1950.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (185 samples, 12.96%)</title><rect x="23.2" y="1923.0" width="152.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="26.2" y="1934.0">com/linecorp/decato..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (185 samples, 12.96%)</title><rect x="23.2" y="1907.0" width="152.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="26.2" y="1918.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (185 samples, 12.96%)</title><rect x="23.2" y="1891.0" width="152.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.2" y="1902.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (161 samples, 11.27%)</title><rect x="41.4" y="1875.0" width="133.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="44.4" y="1886.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (90 samples, 6.30%)</title><rect x="42.2" y="1859.0" width="74.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="45.2" y="1870.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (90 samples, 6.30%)</title><rect x="42.2" y="1843.0" width="74.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="45.2" y="1854.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (90 samples, 6.30%)</title><rect x="42.2" y="1827.0" width="74.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="45.2" y="1838.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (90 samples, 6.30%)</title><rect x="42.2" y="1811.0" width="74.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="45.2" y="1822.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (90 samples, 6.30%)</title><rect x="42.2" y="1795.0" width="74.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="45.2" y="1806.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (78 samples, 5.46%)</title><rect x="52.1" y="1779.0" width="64.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="55.1" y="1790.0">sun/mis..</text>
</g>
<g>
<title>Unsafe_Unpark (66 samples, 4.62%)</title><rect x="53.0" y="1763.0" width="54.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="56.0" y="1774.0">Unsaf..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.14%)</title><rect x="53.0" y="1747.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="56.0" y="1758.0"></text>
</g>
<g>
<title>Parker::unpark() (4 samples, 0.28%)</title><rect x="54.6" y="1747.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="57.6" y="1758.0"></text>
</g>
<g>
<title>__pthread_cond_signal (48 samples, 3.36%)</title><rect x="57.9" y="1747.0" width="39.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="60.9" y="1758.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (3 samples, 0.21%)</title><rect x="97.6" y="1747.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="100.6" y="1758.0"></text>
</g>
<g>
<title>pthread_mutex_lock (9 samples, 0.63%)</title><rect x="100.1" y="1747.0" width="7.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="103.1" y="1758.0"></text>
</g>
<g>
<title>__lll_unlock_wake (6 samples, 0.42%)</title><rect x="107.5" y="1763.0" width="5.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="110.5" y="1774.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.14%)</title><rect x="112.5" y="1763.0" width="1.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="115.5" y="1774.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (3 samples, 0.21%)</title><rect x="114.1" y="1763.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="117.1" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (32 samples, 2.24%)</title><rect x="116.6" y="1859.0" width="26.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="119.6" y="1870.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (32 samples, 2.24%)</title><rect x="116.6" y="1843.0" width="26.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="119.6" y="1854.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (32 samples, 2.24%)</title><rect x="116.6" y="1827.0" width="26.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="119.6" y="1838.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (38 samples, 2.66%)</title><rect x="143.0" y="1859.0" width="31.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="146.0" y="1870.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (38 samples, 2.66%)</title><rect x="143.0" y="1843.0" width="31.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="146.0" y="1854.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (38 samples, 2.66%)</title><rect x="143.0" y="1827.0" width="31.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="146.0" y="1838.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (38 samples, 2.66%)</title><rect x="143.0" y="1811.0" width="31.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="146.0" y="1822.0">ja..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.14%)</title><rect x="174.4" y="1875.0" width="1.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="177.4" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (11 samples, 0.77%)</title><rect x="176.1" y="1955.0" width="9.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="179.1" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (9 samples, 0.63%)</title><rect x="177.7" y="1939.0" width="7.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="180.7" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (4 samples, 0.28%)</title><rect x="185.2" y="1955.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="188.2" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.28%)</title><rect x="185.2" y="1939.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="188.2" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.28%)</title><rect x="185.2" y="1923.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="188.2" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (27 samples, 1.89%)</title><rect x="188.5" y="1955.0" width="22.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="191.5" y="1966.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="188.5" y="1939.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="191.5" y="1950.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="188.5" y="1923.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="191.5" y="1934.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="188.5" y="1907.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="191.5" y="1918.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="188.5" y="1891.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="191.5" y="1902.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.07%)</title><rect x="188.5" y="1875.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="191.5" y="1886.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (26 samples, 1.82%)</title><rect x="189.3" y="1939.0" width="21.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="192.3" y="1950.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (12 samples, 0.84%)</title><rect x="196.8" y="1923.0" width="9.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="199.8" y="1934.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (10 samples, 0.70%)</title><rect x="196.8" y="1907.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="199.8" y="1918.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (10 samples, 0.70%)</title><rect x="196.8" y="1891.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="199.8" y="1902.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (10 samples, 0.70%)</title><rect x="196.8" y="1875.0" width="8.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="199.8" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="203.4" y="1859.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="206.4" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.07%)</title><rect x="203.4" y="1843.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="206.4" y="1854.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.07%)</title><rect x="203.4" y="1827.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="206.4" y="1838.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.07%)</title><rect x="203.4" y="1811.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="206.4" y="1822.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="204.2" y="1859.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="207.2" y="1870.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.14%)</title><rect x="205.0" y="1907.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="208.0" y="1918.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.07%)</title><rect x="206.7" y="1923.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="209.7" y="1934.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.28%)</title><rect x="207.5" y="1923.0" width="3.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="210.5" y="1934.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.14%)</title><rect x="210.8" y="1987.0" width="1.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="213.8" y="1998.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.07%)</title><rect x="212.5" y="1987.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="215.5" y="1998.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.07%)</title><rect x="212.5" y="1971.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="215.5" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.07%)</title><rect x="212.5" y="1955.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="215.5" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.07%)</title><rect x="213.3" y="1987.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="216.3" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.07%)</title><rect x="213.3" y="1971.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="216.3" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.07%)</title><rect x="213.3" y="1955.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="216.3" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.07%)</title><rect x="213.3" y="1939.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="216.3" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.07%)</title><rect x="213.3" y="1923.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="216.3" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.07%)</title><rect x="213.3" y="1907.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="216.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (11 samples, 0.77%)</title><rect x="214.1" y="1987.0" width="9.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="217.1" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (11 samples, 0.77%)</title><rect x="214.1" y="1971.0" width="9.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="217.1" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (11 samples, 0.77%)</title><rect x="214.1" y="1955.0" width="9.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="217.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (11 samples, 0.77%)</title><rect x="214.1" y="1939.0" width="9.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="217.1" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (11 samples, 0.77%)</title><rect x="214.1" y="1923.0" width="9.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="217.1" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (11 samples, 0.77%)</title><rect x="214.1" y="1907.0" width="9.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="217.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (71 samples, 4.97%)</title><rect x="223.2" y="2003.0" width="58.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="226.2" y="2014.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (71 samples, 4.97%)</title><rect x="223.2" y="1987.0" width="58.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="226.2" y="1998.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (37 samples, 2.59%)</title><rect x="224.8" y="1971.0" width="30.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="227.8" y="1982.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.07%)</title><rect x="225.7" y="1955.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="228.7" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.07%)</title><rect x="225.7" y="1939.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="228.7" y="1950.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.07%)</title><rect x="225.7" y="1923.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="228.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (35 samples, 2.45%)</title><rect x="226.5" y="1955.0" width="28.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="229.5" y="1966.0">or..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="226.5" y="1939.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="229.5" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.07%)</title><rect x="226.5" y="1923.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="229.5" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.07%)</title><rect x="226.5" y="1907.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="229.5" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (34 samples, 2.38%)</title><rect x="227.3" y="1939.0" width="28.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="230.3" y="1950.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (31 samples, 2.17%)</title><rect x="227.3" y="1923.0" width="25.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="230.3" y="1934.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (31 samples, 2.17%)</title><rect x="227.3" y="1907.0" width="25.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="230.3" y="1918.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (12 samples, 0.84%)</title><rect x="229.0" y="1891.0" width="9.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="232.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (4 samples, 0.28%)</title><rect x="233.1" y="1875.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="236.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (4 samples, 0.28%)</title><rect x="233.1" y="1859.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="236.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (4 samples, 0.28%)</title><rect x="233.1" y="1843.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="236.1" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (4 samples, 0.28%)</title><rect x="233.1" y="1827.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="236.1" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (4 samples, 0.28%)</title><rect x="233.1" y="1811.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="236.1" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (4 samples, 0.28%)</title><rect x="233.1" y="1795.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="236.1" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (4 samples, 0.28%)</title><rect x="233.1" y="1779.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="236.1" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (3 samples, 0.21%)</title><rect x="236.4" y="1875.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="239.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (3 samples, 0.21%)</title><rect x="236.4" y="1859.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="239.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (1 samples, 0.07%)</title><rect x="236.4" y="1843.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="239.4" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (2 samples, 0.14%)</title><rect x="237.2" y="1843.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="240.2" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (2 samples, 0.14%)</title><rect x="237.2" y="1827.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="240.2" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.07%)</title><rect x="237.2" y="1811.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="240.2" y="1822.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="237.2" y="1795.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="240.2" y="1806.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="237.2" y="1779.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="240.2" y="1790.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="237.2" y="1763.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="240.2" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="237.2" y="1747.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="240.2" y="1758.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.07%)</title><rect x="237.2" y="1731.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="240.2" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/ByteUtils.readVarint (1 samples, 0.07%)</title><rect x="238.1" y="1811.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="241.1" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/ByteUtils.readUnsignedVarint (1 samples, 0.07%)</title><rect x="238.1" y="1795.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="241.1" y="1806.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.07%)</title><rect x="238.1" y="1779.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="241.1" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="238.1" y="1763.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="241.1" y="1774.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="238.1" y="1747.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="241.1" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="238.1" y="1731.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="241.1" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="238.1" y="1715.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="241.1" y="1726.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.07%)</title><rect x="238.1" y="1699.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="241.1" y="1710.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (17 samples, 1.19%)</title><rect x="238.9" y="1891.0" width="14.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="241.9" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (17 samples, 1.19%)</title><rect x="238.9" y="1875.0" width="14.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="241.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (12 samples, 0.84%)</title><rect x="238.9" y="1859.0" width="9.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="241.9" y="1870.0"></text>
</g>
<g>
<title>java/util/Optional.of (12 samples, 0.84%)</title><rect x="238.9" y="1843.0" width="9.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="241.9" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (5 samples, 0.35%)</title><rect x="248.8" y="1859.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="251.8" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (5 samples, 0.35%)</title><rect x="248.8" y="1843.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="251.8" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.07%)</title><rect x="252.9" y="1923.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="255.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.07%)</title><rect x="252.9" y="1907.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="255.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="252.9" y="1891.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="255.9" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="252.9" y="1875.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="255.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="252.9" y="1859.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="255.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="252.9" y="1843.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="255.9" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/MetricConfig.quota (1 samples, 0.07%)</title><rect x="252.9" y="1827.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="255.9" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.07%)</title><rect x="253.8" y="1923.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="256.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.07%)</title><rect x="253.8" y="1907.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="256.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="253.8" y="1891.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="256.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="253.8" y="1875.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="256.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="253.8" y="1859.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="256.8" y="1870.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="253.8" y="1843.0" width="0.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="256.8" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.07%)</title><rect x="254.6" y="1923.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="257.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.contains (1 samples, 0.07%)</title><rect x="254.6" y="1907.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.6" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.07%)</title><rect x="254.6" y="1891.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="257.6" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="254.6" y="1875.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="257.6" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (12 samples, 0.84%)</title><rect x="255.4" y="1971.0" width="9.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="258.4" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (10 samples, 0.70%)</title><rect x="255.4" y="1955.0" width="8.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="258.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (9 samples, 0.63%)</title><rect x="255.4" y="1939.0" width="7.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="258.4" y="1950.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.07%)</title><rect x="256.2" y="1923.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="259.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/120909555.accept (1 samples, 0.07%)</title><rect x="256.2" y="1907.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="259.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.07%)</title><rect x="256.2" y="1891.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="259.2" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.07%)</title><rect x="256.2" y="1875.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="259.2" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.07%)</title><rect x="256.2" y="1859.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="259.2" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.07%)</title><rect x="256.2" y="1843.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="259.2" y="1854.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.07%)</title><rect x="256.2" y="1827.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="259.2" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="256.2" y="1811.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="259.2" y="1822.0"></text>
</g>
<g>
<title>java/util/Collection.stream (2 samples, 0.14%)</title><rect x="257.1" y="1923.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="260.1" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (2 samples, 0.14%)</title><rect x="257.1" y="1907.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="260.1" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (2 samples, 0.14%)</title><rect x="257.1" y="1891.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="260.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.07%)</title><rect x="257.9" y="1875.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="260.9" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.14%)</title><rect x="258.7" y="1923.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="261.7" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.14%)</title><rect x="258.7" y="1907.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="261.7" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.14%)</title><rect x="258.7" y="1891.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="261.7" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.14%)</title><rect x="258.7" y="1875.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="261.7" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.14%)</title><rect x="258.7" y="1859.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="261.7" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (2 samples, 0.14%)</title><rect x="258.7" y="1843.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="261.7" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$79/861328327.get (1 samples, 0.07%)</title><rect x="259.6" y="1827.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="262.6" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.07%)</title><rect x="260.4" y="1923.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="263.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.07%)</title><rect x="260.4" y="1907.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="263.4" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (1 samples, 0.07%)</title><rect x="260.4" y="1891.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="263.4" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.14%)</title><rect x="261.2" y="1923.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="264.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.14%)</title><rect x="261.2" y="1907.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="264.2" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="262.0" y="1891.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="265.0" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="262.0" y="1875.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="265.0" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="262.0" y="1859.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="265.0" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="262.0" y="1843.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="265.0" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="262.0" y="1827.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="265.0" y="1838.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.07%)</title><rect x="262.0" y="1811.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="265.0" y="1822.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (1 samples, 0.07%)</title><rect x="262.0" y="1795.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="265.0" y="1806.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.07%)</title><rect x="262.0" y="1779.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="265.0" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.07%)</title><rect x="262.9" y="1939.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="265.9" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.07%)</title><rect x="262.9" y="1923.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="265.9" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="262.9" y="1907.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="265.9" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.07%)</title><rect x="262.9" y="1891.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="265.9" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.07%)</title><rect x="262.9" y="1875.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="265.9" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="262.9" y="1859.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="265.9" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="262.9" y="1843.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="265.9" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.07%)</title><rect x="262.9" y="1827.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="265.9" y="1838.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.07%)</title><rect x="262.9" y="1811.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="265.9" y="1822.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.characteristics (1 samples, 0.07%)</title><rect x="262.9" y="1795.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="265.9" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.07%)</title><rect x="263.7" y="1955.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="266.7" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.07%)</title><rect x="263.7" y="1939.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="266.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.07%)</title><rect x="263.7" y="1923.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="266.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.07%)</title><rect x="264.5" y="1955.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="267.5" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.07%)</title><rect x="265.3" y="1971.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.3" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.07%)</title><rect x="265.3" y="1955.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="268.3" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.07%)</title><rect x="265.3" y="1939.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="268.3" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.07%)</title><rect x="265.3" y="1923.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="268.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (11 samples, 0.77%)</title><rect x="266.2" y="1971.0" width="9.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="269.2" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (9 samples, 0.63%)</title><rect x="266.2" y="1955.0" width="7.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="269.2" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.07%)</title><rect x="266.2" y="1939.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="269.2" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.07%)</title><rect x="266.2" y="1923.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="269.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.07%)</title><rect x="266.2" y="1907.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="269.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.07%)</title><rect x="266.2" y="1891.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="269.2" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.07%)</title><rect x="266.2" y="1875.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="269.2" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.07%)</title><rect x="266.2" y="1859.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="269.2" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.07%)</title><rect x="266.2" y="1843.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="269.2" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.07%)</title><rect x="266.2" y="1827.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="269.2" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.07%)</title><rect x="266.2" y="1811.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="269.2" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (8 samples, 0.56%)</title><rect x="267.0" y="1939.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="270.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="267.0" y="1923.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="270.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="267.0" y="1907.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="270.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.07%)</title><rect x="267.0" y="1891.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="270.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (6 samples, 0.42%)</title><rect x="267.8" y="1923.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="270.8" y="1934.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/94138450.linkToTargetMethod (1 samples, 0.07%)</title><rect x="267.8" y="1907.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="270.8" y="1918.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/577266673.invokeStatic_JJ_L (1 samples, 0.07%)</title><rect x="267.8" y="1891.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="270.8" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.14%)</title><rect x="268.6" y="1907.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="271.6" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.14%)</title><rect x="268.6" y="1891.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="271.6" y="1902.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.14%)</title><rect x="268.6" y="1875.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="271.6" y="1886.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.14%)</title><rect x="268.6" y="1859.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="271.6" y="1870.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.07%)</title><rect x="269.5" y="1843.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="272.5" y="1854.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_humongous(unsigned long, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="269.5" y="1827.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="272.5" y="1838.0"></text>
</g>
<g>
<title>G1CollectedHeap::humongous_obj_allocate(unsigned long, unsigned char) (1 samples, 0.07%)</title><rect x="269.5" y="1811.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="272.5" y="1822.0"></text>
</g>
<g>
<title>G1CollectedHeap::humongous_obj_allocate_initialize_regions(unsigned int, unsigned int, unsigned long, unsigned char) (1 samples, 0.07%)</title><rect x="269.5" y="1795.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="272.5" y="1806.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::set_for_starts_humongous(HeapWord*) (1 samples, 0.07%)</title><rect x="269.5" y="1779.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="272.5" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (3 samples, 0.21%)</title><rect x="270.3" y="1907.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="273.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (3 samples, 0.21%)</title><rect x="270.3" y="1891.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="273.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (3 samples, 0.21%)</title><rect x="270.3" y="1875.0" width="2.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="273.3" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (3 samples, 0.21%)</title><rect x="270.3" y="1859.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="273.3" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (3 samples, 0.21%)</title><rect x="270.3" y="1843.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="273.3" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (3 samples, 0.21%)</title><rect x="270.3" y="1827.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="273.3" y="1838.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.07%)</title><rect x="270.3" y="1811.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="273.3" y="1822.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.07%)</title><rect x="270.3" y="1795.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="273.3" y="1806.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="271.1" y="1811.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="274.1" y="1822.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="271.9" y="1811.0" width="0.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="274.9" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.nanoseconds (1 samples, 0.07%)</title><rect x="272.8" y="1923.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="275.8" y="1934.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.07%)</title><rect x="272.8" y="1907.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="275.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.14%)</title><rect x="273.6" y="1955.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="276.6" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.14%)</title><rect x="273.6" y="1939.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="276.6" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.14%)</title><rect x="273.6" y="1923.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="276.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.14%)</title><rect x="273.6" y="1907.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="276.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (2 samples, 0.14%)</title><rect x="273.6" y="1891.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="276.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (2 samples, 0.14%)</title><rect x="273.6" y="1875.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="276.6" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.07%)</title><rect x="273.6" y="1859.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="276.6" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.set (1 samples, 0.07%)</title><rect x="273.6" y="1843.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="276.6" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.set (1 samples, 0.07%)</title><rect x="273.6" y="1827.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="276.6" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.07%)</title><rect x="273.6" y="1811.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="276.6" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="273.6" y="1795.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="276.6" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="273.6" y="1779.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="276.6" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.07%)</title><rect x="274.4" y="1859.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="277.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.07%)</title><rect x="274.4" y="1843.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="277.4" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.07%)</title><rect x="274.4" y="1827.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="277.4" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$10.write (1 samples, 0.07%)</title><rect x="274.4" y="1811.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="277.4" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.07%)</title><rect x="274.4" y="1795.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="277.4" y="1806.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.07%)</title><rect x="274.4" y="1779.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="277.4" y="1790.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.07%)</title><rect x="274.4" y="1763.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="277.4" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (7 samples, 0.49%)</title><rect x="275.3" y="1971.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="278.3" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.07%)</title><rect x="275.3" y="1955.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="278.3" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.07%)</title><rect x="275.3" y="1939.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="278.3" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (6 samples, 0.42%)</title><rect x="276.1" y="1955.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="279.1" y="1966.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.07%)</title><rect x="276.1" y="1939.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="279.1" y="1950.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.07%)</title><rect x="276.1" y="1923.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="279.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (4 samples, 0.28%)</title><rect x="276.9" y="1939.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="279.9" y="1950.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.14%)</title><rect x="276.9" y="1923.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="279.9" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="277.7" y="1907.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="280.7" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.07%)</title><rect x="277.7" y="1891.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="280.7" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.14%)</title><rect x="278.6" y="1923.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="281.6" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="279.4" y="1907.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.4" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="279.4" y="1891.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="282.4" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="279.4" y="1875.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="282.4" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="279.4" y="1859.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="282.4" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="279.4" y="1843.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="282.4" y="1854.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="279.4" y="1827.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="282.4" y="1838.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.07%)</title><rect x="279.4" y="1811.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="282.4" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.07%)</title><rect x="279.4" y="1795.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="282.4" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="279.4" y="1779.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="282.4" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="279.4" y="1763.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="282.4" y="1774.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="279.4" y="1747.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="282.4" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.07%)</title><rect x="280.2" y="1939.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="283.2" y="1950.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.07%)</title><rect x="280.2" y="1923.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="283.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.07%)</title><rect x="281.0" y="1971.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="284.0" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="281.0" y="1955.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="284.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="281.0" y="1939.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="284.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="281.0" y="1923.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="284.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="281.0" y="1907.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="284.0" y="1918.0"></text>
</g>
<g>
<title>java/lang/Thread.run (803 samples, 56.23%)</title><rect x="281.9" y="2035.0" width="663.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="284.9" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (803 samples, 56.23%)</title><rect x="281.9" y="2019.0" width="663.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="284.9" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (803 samples, 56.23%)</title><rect x="281.9" y="2003.0" width="663.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="284.9" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/1644863094.run (555 samples, 38.87%)</title><rect x="283.5" y="1987.0" width="458.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="286.5" y="1998.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$27..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (555 samples, 38.87%)</title><rect x="283.5" y="1971.0" width="458.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="286.5" y="1982.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$put..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (554 samples, 38.80%)</title><rect x="284.3" y="1955.0" width="457.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="287.3" y="1966.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (546 samples, 38.24%)</title><rect x="284.3" y="1939.0" width="451.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="287.3" y="1950.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.schedul..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="291.0" y="1923.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="294.0" y="1934.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="291.0" y="1907.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="294.0" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (172 samples, 12.04%)</title><rect x="291.8" y="1923.0" width="142.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="294.8" y="1934.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (172 samples, 12.04%)</title><rect x="291.8" y="1907.0" width="142.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="294.8" y="1918.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (172 samples, 12.04%)</title><rect x="291.8" y="1891.0" width="142.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="294.8" y="1902.0">com/linecorp/decat..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="291.8" y="1875.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="294.8" y="1886.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="291.8" y="1859.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="294.8" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="291.8" y="1843.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="294.8" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="291.8" y="1827.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="294.8" y="1838.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="291.8" y="1811.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="294.8" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (171 samples, 11.97%)</title><rect x="292.6" y="1875.0" width="141.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="295.6" y="1886.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (171 samples, 11.97%)</title><rect x="292.6" y="1859.0" width="141.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="295.6" y="1870.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (171 samples, 11.97%)</title><rect x="292.6" y="1843.0" width="141.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="295.6" y="1854.0">com/fasterxml/jack..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (67 samples, 4.69%)</title><rect x="292.6" y="1827.0" width="55.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="295.6" y="1838.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (39 samples, 2.73%)</title><rect x="292.6" y="1811.0" width="32.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="295.6" y="1822.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (38 samples, 2.66%)</title><rect x="292.6" y="1795.0" width="31.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="295.6" y="1806.0">co..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="309.1" y="1779.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="312.1" y="1790.0"></text>
</g>
<g>
<title>__clock_gettime (10 samples, 0.70%)</title><rect x="310.0" y="1779.0" width="8.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="313.0" y="1790.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.49%)</title><rect x="312.4" y="1763.0" width="5.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="315.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.07%)</title><rect x="318.2" y="1779.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="321.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (6 samples, 0.42%)</title><rect x="319.0" y="1779.0" width="5.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="322.0" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.42%)</title><rect x="319.0" y="1763.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="322.0" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (6 samples, 0.42%)</title><rect x="319.0" y="1747.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="322.0" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (6 samples, 0.42%)</title><rect x="319.0" y="1731.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="322.0" y="1742.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (6 samples, 0.42%)</title><rect x="319.0" y="1715.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="322.0" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (1 samples, 0.07%)</title><rect x="324.0" y="1795.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="327.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.07%)</title><rect x="324.0" y="1779.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="327.0" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (28 samples, 1.96%)</title><rect x="324.8" y="1811.0" width="23.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="327.8" y="1822.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (2 samples, 0.14%)</title><rect x="324.8" y="1795.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="327.8" y="1806.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.07%)</title><rect x="325.7" y="1779.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="328.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (26 samples, 1.82%)</title><rect x="326.5" y="1795.0" width="21.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="329.5" y="1806.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.14%)</title><rect x="333.9" y="1779.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="336.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.07%)</title><rect x="334.7" y="1763.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="337.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (10 samples, 0.70%)</title><rect x="335.6" y="1779.0" width="8.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="338.6" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (10 samples, 0.70%)</title><rect x="335.6" y="1763.0" width="8.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="338.6" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (2 samples, 0.14%)</title><rect x="335.6" y="1747.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="338.6" y="1758.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.14%)</title><rect x="335.6" y="1731.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="338.6" y="1742.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="335.6" y="1715.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="338.6" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.07%)</title><rect x="335.6" y="1699.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="338.6" y="1710.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray(BasicType, int, Thread*) (1 samples, 0.07%)</title><rect x="336.4" y="1715.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="339.4" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (8 samples, 0.56%)</title><rect x="337.2" y="1747.0" width="6.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="340.2" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (5 samples, 0.35%)</title><rect x="343.8" y="1779.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="346.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.07%)</title><rect x="347.1" y="1763.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="350.1" y="1774.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="347.1" y="1747.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="350.1" y="1758.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="347.1" y="1731.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="350.1" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="347.1" y="1715.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="350.1" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="347.1" y="1699.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="350.1" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (93 samples, 6.51%)</title><rect x="348.0" y="1827.0" width="76.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="351.0" y="1838.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (5 samples, 0.35%)</title><rect x="348.0" y="1811.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="351.0" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (5 samples, 0.35%)</title><rect x="348.0" y="1795.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="351.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (3 samples, 0.21%)</title><rect x="349.6" y="1779.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="352.6" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (3 samples, 0.21%)</title><rect x="349.6" y="1763.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="352.6" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (9 samples, 0.63%)</title><rect x="352.1" y="1811.0" width="7.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="355.1" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (9 samples, 0.63%)</title><rect x="352.1" y="1795.0" width="7.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="355.1" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (3 samples, 0.21%)</title><rect x="355.4" y="1779.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="358.4" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (2 samples, 0.14%)</title><rect x="357.9" y="1779.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="360.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (12 samples, 0.84%)</title><rect x="359.5" y="1811.0" width="10.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="362.5" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (9 samples, 0.63%)</title><rect x="362.0" y="1795.0" width="7.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="365.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (6 samples, 0.42%)</title><rect x="362.8" y="1779.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="365.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (5 samples, 0.35%)</title><rect x="363.7" y="1763.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="366.7" y="1774.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="366.1" y="1747.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="369.1" y="1758.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="366.1" y="1731.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="369.1" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="366.1" y="1715.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="369.1" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="366.1" y="1699.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="369.1" y="1710.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="366.1" y="1683.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="369.1" y="1694.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="366.1" y="1667.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="369.1" y="1678.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.07%)</title><rect x="366.1" y="1651.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="369.1" y="1662.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="366.1" y="1635.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="369.1" y="1646.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.07%)</title><rect x="366.1" y="1619.0" width="0.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="369.1" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.07%)</title><rect x="367.0" y="1747.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="370.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.14%)</title><rect x="367.8" y="1779.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="370.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.14%)</title><rect x="367.8" y="1763.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="370.8" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 0.28%)</title><rect x="369.5" y="1811.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="372.5" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.28%)</title><rect x="369.5" y="1795.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="372.5" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (3 samples, 0.21%)</title><rect x="370.3" y="1779.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="373.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (3 samples, 0.21%)</title><rect x="370.3" y="1763.0" width="2.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="373.3" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (3 samples, 0.21%)</title><rect x="370.3" y="1747.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="373.3" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (63 samples, 4.41%)</title><rect x="372.8" y="1811.0" width="52.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="375.8" y="1822.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (13 samples, 0.91%)</title><rect x="372.8" y="1795.0" width="10.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="375.8" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.07%)</title><rect x="373.6" y="1779.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="376.6" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.07%)</title><rect x="373.6" y="1763.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="376.6" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.07%)</title><rect x="373.6" y="1747.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="376.6" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.07%)</title><rect x="373.6" y="1731.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="376.6" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (8 samples, 0.56%)</title><rect x="374.4" y="1779.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="377.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (5 samples, 0.35%)</title><rect x="374.4" y="1763.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="377.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (3 samples, 0.21%)</title><rect x="378.5" y="1763.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="381.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (3 samples, 0.21%)</title><rect x="378.5" y="1747.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="381.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (3 samples, 0.21%)</title><rect x="378.5" y="1731.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="381.5" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.getAndSet (3 samples, 0.21%)</title><rect x="378.5" y="1715.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="381.5" y="1726.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (1 samples, 0.07%)</title><rect x="380.2" y="1699.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="383.2" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.21%)</title><rect x="381.0" y="1779.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="384.0" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.21%)</title><rect x="381.0" y="1763.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="384.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (50 samples, 3.50%)</title><rect x="383.5" y="1795.0" width="41.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="386.5" y="1806.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (48 samples, 3.36%)</title><rect x="385.2" y="1779.0" width="39.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="388.2" y="1790.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (48 samples, 3.36%)</title><rect x="385.2" y="1763.0" width="39.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="388.2" y="1774.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (15 samples, 1.05%)</title><rect x="387.6" y="1747.0" width="12.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="390.6" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (9 samples, 0.63%)</title><rect x="391.8" y="1731.0" width="7.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="394.8" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (9 samples, 0.63%)</title><rect x="391.8" y="1715.0" width="7.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="394.8" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (9 samples, 0.63%)</title><rect x="391.8" y="1699.0" width="7.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="394.8" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 0.21%)</title><rect x="391.8" y="1683.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="394.8" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (6 samples, 0.42%)</title><rect x="394.2" y="1683.0" width="5.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="397.2" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (5 samples, 0.35%)</title><rect x="395.1" y="1667.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="398.1" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.07%)</title><rect x="399.2" y="1731.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="402.2" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.07%)</title><rect x="399.2" y="1715.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="402.2" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (13 samples, 0.91%)</title><rect x="400.0" y="1747.0" width="10.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="403.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (12 samples, 0.84%)</title><rect x="400.9" y="1731.0" width="9.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="403.9" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (12 samples, 0.84%)</title><rect x="400.9" y="1715.0" width="9.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="403.9" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (12 samples, 0.84%)</title><rect x="400.9" y="1699.0" width="9.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="403.9" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (12 samples, 0.84%)</title><rect x="400.9" y="1683.0" width="9.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="403.9" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.07%)</title><rect x="410.8" y="1747.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="413.8" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (9 samples, 0.63%)</title><rect x="411.6" y="1747.0" width="7.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="414.6" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (9 samples, 0.63%)</title><rect x="411.6" y="1731.0" width="7.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="414.6" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (9 samples, 0.63%)</title><rect x="411.6" y="1715.0" width="7.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="414.6" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (9 samples, 0.63%)</title><rect x="411.6" y="1699.0" width="7.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="414.6" y="1710.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (9 samples, 0.63%)</title><rect x="411.6" y="1683.0" width="7.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="414.6" y="1694.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (9 samples, 0.63%)</title><rect x="411.6" y="1667.0" width="7.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="414.6" y="1678.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (1 samples, 0.07%)</title><rect x="411.6" y="1651.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="414.6" y="1662.0"></text>
</g>
<g>
<title>oopFactory::new_objArray(Klass*, int, Thread*) (1 samples, 0.07%)</title><rect x="411.6" y="1635.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="414.6" y="1646.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (8 samples, 0.56%)</title><rect x="412.4" y="1651.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="415.4" y="1662.0"></text>
</g>
<g>
<title>sun/reflect/misc/ReflectUtil.isVMAnonymousClass (1 samples, 0.07%)</title><rect x="418.2" y="1635.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="421.2" y="1646.0"></text>
</g>
<g>
<title>java/lang/Class.getName (1 samples, 0.07%)</title><rect x="418.2" y="1619.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="421.2" y="1630.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="418.2" y="1603.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="421.2" y="1614.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="418.2" y="1587.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="421.2" y="1598.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="418.2" y="1571.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="421.2" y="1582.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="418.2" y="1555.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="421.2" y="1566.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="418.2" y="1539.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="421.2" y="1550.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (7 samples, 0.49%)</title><rect x="419.0" y="1747.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="422.0" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.49%)</title><rect x="419.0" y="1731.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="422.0" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.49%)</title><rect x="419.0" y="1715.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="422.0" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.14%)</title><rect x="423.2" y="1699.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="426.2" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (11 samples, 0.77%)</title><rect x="424.8" y="1827.0" width="9.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="427.8" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (11 samples, 0.77%)</title><rect x="424.8" y="1811.0" width="9.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="427.8" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (11 samples, 0.77%)</title><rect x="424.8" y="1795.0" width="9.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="427.8" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.14%)</title><rect x="424.8" y="1779.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="427.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (3 samples, 0.21%)</title><rect x="426.5" y="1779.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="429.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (4 samples, 0.28%)</title><rect x="428.9" y="1779.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="431.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.14%)</title><rect x="432.3" y="1779.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="435.3" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.14%)</title><rect x="432.3" y="1763.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="435.3" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (330 samples, 23.11%)</title><rect x="433.9" y="1923.0" width="272.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="436.9" y="1934.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (62 samples, 4.34%)</title><rect x="434.7" y="1907.0" width="51.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="437.7" y="1918.0">com/l..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (62 samples, 4.34%)</title><rect x="434.7" y="1891.0" width="51.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="437.7" y="1902.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (59 samples, 4.13%)</title><rect x="437.2" y="1875.0" width="48.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="440.2" y="1886.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (23 samples, 1.61%)</title><rect x="443.8" y="1859.0" width="19.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="446.8" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (23 samples, 1.61%)</title><rect x="443.8" y="1843.0" width="19.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="446.8" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (15 samples, 1.05%)</title><rect x="450.4" y="1827.0" width="12.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="453.4" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (15 samples, 1.05%)</title><rect x="450.4" y="1811.0" width="12.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="453.4" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (15 samples, 1.05%)</title><rect x="450.4" y="1795.0" width="12.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="453.4" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.14%)</title><rect x="462.8" y="1859.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="465.8" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.14%)</title><rect x="462.8" y="1843.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="465.8" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.14%)</title><rect x="462.8" y="1827.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="465.8" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.14%)</title><rect x="462.8" y="1811.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="465.8" y="1822.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (26 samples, 1.82%)</title><rect x="464.5" y="1859.0" width="21.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="467.5" y="1870.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.07%)</title><rect x="471.1" y="1843.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="474.1" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (17 samples, 1.19%)</title><rect x="471.9" y="1843.0" width="14.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="474.9" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.14%)</title><rect x="471.9" y="1827.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="474.9" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.14%)</title><rect x="471.9" y="1811.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="474.9" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (15 samples, 1.05%)</title><rect x="473.6" y="1827.0" width="12.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="476.6" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.21%)</title><rect x="481.8" y="1811.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="484.8" y="1822.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.14%)</title><rect x="484.3" y="1811.0" width="1.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="487.3" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.42%)</title><rect x="486.0" y="1907.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="489.0" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.28%)</title><rect x="487.6" y="1891.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="490.6" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.28%)</title><rect x="487.6" y="1875.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="490.6" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (167 samples, 11.69%)</title><rect x="490.9" y="1907.0" width="138.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="493.9" y="1918.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (167 samples, 11.69%)</title><rect x="490.9" y="1891.0" width="138.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="493.9" y="1902.0">com/linecorp/deca..</text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.49%)</title><rect x="500.0" y="1875.0" width="5.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="503.0" y="1886.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.49%)</title><rect x="500.0" y="1859.0" width="5.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="503.0" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (63 samples, 4.41%)</title><rect x="505.8" y="1875.0" width="52.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="508.8" y="1886.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (51 samples, 3.57%)</title><rect x="510.8" y="1859.0" width="42.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="513.8" y="1870.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (50 samples, 3.50%)</title><rect x="511.6" y="1843.0" width="41.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="514.6" y="1854.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (33 samples, 2.31%)</title><rect x="519.0" y="1827.0" width="27.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="522.0" y="1838.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (33 samples, 2.31%)</title><rect x="519.0" y="1811.0" width="27.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="522.0" y="1822.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (33 samples, 2.31%)</title><rect x="519.0" y="1795.0" width="27.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="522.0" y="1806.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (14 samples, 0.98%)</title><rect x="527.3" y="1779.0" width="11.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="530.3" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (11 samples, 0.77%)</title><rect x="527.3" y="1763.0" width="9.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="530.3" y="1774.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.07%)</title><rect x="527.3" y="1747.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="530.3" y="1758.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.07%)</title><rect x="528.1" y="1747.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="531.1" y="1758.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.07%)</title><rect x="528.1" y="1731.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="531.1" y="1742.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (2 samples, 0.14%)</title><rect x="528.9" y="1747.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="531.9" y="1758.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (7 samples, 0.49%)</title><rect x="530.6" y="1747.0" width="5.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="533.6" y="1758.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (6 samples, 0.42%)</title><rect x="531.4" y="1731.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="534.4" y="1742.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.07%)</title><rect x="531.4" y="1715.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="534.4" y="1726.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.07%)</title><rect x="531.4" y="1699.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="534.4" y="1710.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (4 samples, 0.28%)</title><rect x="532.2" y="1715.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="535.2" y="1726.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.07%)</title><rect x="535.5" y="1715.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="538.5" y="1726.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.21%)</title><rect x="536.4" y="1763.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="539.4" y="1774.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.07%)</title><rect x="537.2" y="1747.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="540.2" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="538.0" y="1747.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="541.0" y="1758.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="538.0" y="1731.0" width="0.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="541.0" y="1742.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.14%)</title><rect x="538.9" y="1779.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="541.9" y="1790.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (7 samples, 0.49%)</title><rect x="540.5" y="1779.0" width="5.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="543.5" y="1790.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.28%)</title><rect x="546.3" y="1827.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="549.3" y="1838.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.28%)</title><rect x="549.6" y="1827.0" width="3.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="552.6" y="1838.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.07%)</title><rect x="552.9" y="1859.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="555.9" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="552.9" y="1843.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="555.9" y="1854.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.07%)</title><rect x="553.7" y="1859.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="556.7" y="1870.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.28%)</title><rect x="554.6" y="1859.0" width="3.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="557.6" y="1870.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (6 samples, 0.42%)</title><rect x="557.9" y="1875.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="560.9" y="1886.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.07%)</title><rect x="557.9" y="1859.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="560.9" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="557.9" y="1843.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="560.9" y="1854.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="557.9" y="1827.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="560.9" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="557.9" y="1811.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="560.9" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="557.9" y="1795.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="560.9" y="1806.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="557.9" y="1779.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="560.9" y="1790.0"></text>
</g>
<g>
<title>java/lang/Long.toString (5 samples, 0.35%)</title><rect x="558.7" y="1859.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="561.7" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="558.7" y="1843.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="561.7" y="1854.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="558.7" y="1827.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="561.7" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="558.7" y="1811.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="561.7" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="558.7" y="1795.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="561.7" y="1806.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="558.7" y="1779.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="561.7" y="1790.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.28%)</title><rect x="559.5" y="1843.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="562.5" y="1854.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.07%)</title><rect x="562.0" y="1827.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="565.0" y="1838.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (80 samples, 5.60%)</title><rect x="562.8" y="1875.0" width="66.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="565.8" y="1886.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (79 samples, 5.53%)</title><rect x="563.6" y="1859.0" width="65.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="566.6" y="1870.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (24 samples, 1.68%)</title><rect x="563.6" y="1843.0" width="19.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="566.6" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (24 samples, 1.68%)</title><rect x="563.6" y="1827.0" width="19.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="566.6" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (6 samples, 0.42%)</title><rect x="578.5" y="1811.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="581.5" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.42%)</title><rect x="578.5" y="1795.0" width="5.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="581.5" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (6 samples, 0.42%)</title><rect x="578.5" y="1779.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="581.5" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.21%)</title><rect x="583.5" y="1843.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="586.5" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.21%)</title><rect x="583.5" y="1827.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="586.5" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.21%)</title><rect x="583.5" y="1811.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="586.5" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.21%)</title><rect x="583.5" y="1795.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="586.5" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.21%)</title><rect x="583.5" y="1779.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="586.5" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (52 samples, 3.64%)</title><rect x="586.0" y="1843.0" width="42.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="589.0" y="1854.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (45 samples, 3.15%)</title><rect x="591.7" y="1827.0" width="37.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="594.7" y="1838.0">jav..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.07%)</title><rect x="594.2" y="1811.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="597.2" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.35%)</title><rect x="595.0" y="1811.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="598.0" y="1822.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.35%)</title><rect x="595.0" y="1795.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="598.0" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (36 samples, 2.52%)</title><rect x="599.2" y="1811.0" width="29.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="602.2" y="1822.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.14%)</title><rect x="616.5" y="1795.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="619.5" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (11 samples, 0.77%)</title><rect x="618.2" y="1795.0" width="9.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="621.2" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.21%)</title><rect x="624.8" y="1779.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="627.8" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.14%)</title><rect x="625.6" y="1763.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="628.6" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="625.6" y="1747.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="628.6" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="626.4" y="1747.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="629.4" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="626.4" y="1731.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="629.4" y="1742.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.07%)</title><rect x="626.4" y="1715.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="629.4" y="1726.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.14%)</title><rect x="627.3" y="1795.0" width="1.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="630.3" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (62 samples, 4.34%)</title><rect x="628.9" y="1907.0" width="51.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="631.9" y="1918.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (59 samples, 4.13%)</title><rect x="631.4" y="1891.0" width="48.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="634.4" y="1902.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/88728907.process (35 samples, 2.45%)</title><rect x="632.2" y="1875.0" width="28.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="635.2" y="1886.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (31 samples, 2.17%)</title><rect x="635.5" y="1859.0" width="25.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="638.5" y="1870.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (25 samples, 1.75%)</title><rect x="635.5" y="1843.0" width="20.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="638.5" y="1854.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.21%)</title><rect x="639.7" y="1827.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="642.7" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.21%)</title><rect x="639.7" y="1811.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="642.7" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.21%)</title><rect x="639.7" y="1795.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="642.7" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.21%)</title><rect x="639.7" y="1779.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="642.7" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (3 samples, 0.21%)</title><rect x="639.7" y="1763.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="642.7" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (2 samples, 0.14%)</title><rect x="640.5" y="1747.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="643.5" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (6 samples, 0.42%)</title><rect x="642.1" y="1827.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="645.1" y="1838.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.28%)</title><rect x="643.8" y="1811.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="646.8" y="1822.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.28%)</title><rect x="643.8" y="1795.0" width="3.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="646.8" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (11 samples, 0.77%)</title><rect x="647.1" y="1827.0" width="9.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="650.1" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.14%)</title><rect x="654.5" y="1811.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="657.5" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.14%)</title><rect x="654.5" y="1795.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="657.5" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (6 samples, 0.42%)</title><rect x="656.2" y="1843.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="659.2" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.35%)</title><rect x="657.0" y="1827.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="660.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.28%)</title><rect x="657.8" y="1811.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="660.8" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.28%)</title><rect x="657.8" y="1795.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="660.8" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (2 samples, 0.14%)</title><rect x="661.1" y="1875.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="664.1" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$283/262568833.complete (1 samples, 0.07%)</title><rect x="662.8" y="1875.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="665.8" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.07%)</title><rect x="663.6" y="1875.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="666.6" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.07%)</title><rect x="663.6" y="1859.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="666.6" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.loggingExceptions (1 samples, 0.07%)</title><rect x="664.5" y="1875.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="667.5" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$282/2038170632.get (1 samples, 0.07%)</title><rect x="664.5" y="1859.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="667.5" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.lambda$pushDownStream$66 (1 samples, 0.07%)</title><rect x="664.5" y="1843.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="667.5" y="1854.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1016925085.linkToTargetMethod (1 samples, 0.07%)</title><rect x="665.3" y="1875.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="668.3" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.07%)</title><rect x="665.3" y="1859.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="668.3" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$283/262568833.get$Lambda (1 samples, 0.07%)</title><rect x="665.3" y="1843.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="668.3" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (9 samples, 0.63%)</title><rect x="666.1" y="1875.0" width="7.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="669.1" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.35%)</title><rect x="669.4" y="1859.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="672.4" y="1870.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.14%)</title><rect x="669.4" y="1843.0" width="1.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="672.4" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (3 samples, 0.21%)</title><rect x="671.1" y="1843.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="674.1" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.14%)</title><rect x="673.5" y="1875.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="676.5" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.14%)</title><rect x="673.5" y="1859.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="676.5" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.07%)</title><rect x="674.4" y="1843.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="677.4" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.elementData (1 samples, 0.07%)</title><rect x="674.4" y="1827.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="677.4" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (6 samples, 0.42%)</title><rect x="675.2" y="1875.0" width="5.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="678.2" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.28%)</title><rect x="676.8" y="1859.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="679.8" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (32 samples, 2.24%)</title><rect x="680.2" y="1907.0" width="26.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="683.2" y="1918.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (32 samples, 2.24%)</title><rect x="680.2" y="1891.0" width="26.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="683.2" y="1902.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="690.1" y="1875.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="693.1" y="1886.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="690.1" y="1859.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="693.1" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="690.1" y="1843.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="693.1" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="690.1" y="1827.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="693.1" y="1838.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="690.1" y="1811.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="693.1" y="1822.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="690.1" y="1795.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="693.1" y="1806.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.07%)</title><rect x="690.1" y="1779.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="693.1" y="1790.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.07%)</title><rect x="690.1" y="1763.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="693.1" y="1774.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.07%)</title><rect x="690.1" y="1747.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="693.1" y="1758.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.49%)</title><rect x="690.9" y="1875.0" width="5.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="693.9" y="1886.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.42%)</title><rect x="691.7" y="1859.0" width="5.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="694.7" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (12 samples, 0.84%)</title><rect x="696.7" y="1875.0" width="9.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="699.7" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$289/629292713.accept (12 samples, 0.84%)</title><rect x="696.7" y="1859.0" width="9.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="699.7" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="696.7" y="1843.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="699.7" y="1854.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="696.7" y="1827.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="699.7" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="696.7" y="1811.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="699.7" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="696.7" y="1795.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="699.7" y="1806.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="696.7" y="1779.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="699.7" y="1790.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="696.7" y="1763.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="699.7" y="1774.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.07%)</title><rect x="696.7" y="1747.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="699.7" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.07%)</title><rect x="696.7" y="1731.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="699.7" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.07%)</title><rect x="696.7" y="1715.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="699.7" y="1726.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$45 (11 samples, 0.77%)</title><rect x="697.5" y="1843.0" width="9.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="700.5" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/769175992.complete (11 samples, 0.77%)</title><rect x="697.5" y="1827.0" width="9.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="700.5" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$5 (11 samples, 0.77%)</title><rect x="697.5" y="1811.0" width="9.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="700.5" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$276/96921747.complete (11 samples, 0.77%)</title><rect x="697.5" y="1795.0" width="9.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="700.5" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$null$70 (11 samples, 0.77%)</title><rect x="697.5" y="1779.0" width="9.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="700.5" y="1790.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.14%)</title><rect x="704.9" y="1763.0" width="1.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="707.9" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (24 samples, 1.68%)</title><rect x="706.6" y="1923.0" width="19.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="709.6" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (24 samples, 1.68%)</title><rect x="706.6" y="1907.0" width="19.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="709.6" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (24 samples, 1.68%)</title><rect x="706.6" y="1891.0" width="19.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="709.6" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$289/629292713.accept (24 samples, 1.68%)</title><rect x="706.6" y="1875.0" width="19.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="709.6" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$45 (24 samples, 1.68%)</title><rect x="706.6" y="1859.0" width="19.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="709.6" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/769175992.complete (24 samples, 1.68%)</title><rect x="706.6" y="1843.0" width="19.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="709.6" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$5 (24 samples, 1.68%)</title><rect x="706.6" y="1827.0" width="19.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="709.6" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/174949441.complete (12 samples, 0.84%)</title><rect x="706.6" y="1811.0" width="9.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="709.6" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (12 samples, 0.84%)</title><rect x="706.6" y="1795.0" width="9.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="709.6" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (12 samples, 0.84%)</title><rect x="706.6" y="1779.0" width="9.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="709.6" y="1790.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (12 samples, 0.84%)</title><rect x="706.6" y="1763.0" width="9.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="709.6" y="1774.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (12 samples, 0.84%)</title><rect x="706.6" y="1747.0" width="9.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="709.6" y="1758.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (12 samples, 0.84%)</title><rect x="706.6" y="1731.0" width="9.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="709.6" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$276/96921747.complete (12 samples, 0.84%)</title><rect x="716.5" y="1811.0" width="9.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="719.5" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$null$70 (12 samples, 0.84%)</title><rect x="716.5" y="1795.0" width="9.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="719.5" y="1806.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (11 samples, 0.77%)</title><rect x="726.4" y="1923.0" width="9.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="729.4" y="1934.0"></text>
</g>
<g>
<title>[vdso] (11 samples, 0.77%)</title><rect x="726.4" y="1907.0" width="9.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="729.4" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.07%)</title><rect x="735.5" y="1939.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="738.5" y="1950.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.07%)</title><rect x="735.5" y="1923.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="738.5" y="1934.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.07%)</title><rect x="735.5" y="1907.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="738.5" y="1918.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="735.5" y="1891.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="738.5" y="1902.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="735.5" y="1875.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="738.5" y="1886.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="735.5" y="1859.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="738.5" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="735.5" y="1843.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="738.5" y="1854.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="735.5" y="1827.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="738.5" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (7 samples, 0.49%)</title><rect x="736.3" y="1939.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="739.3" y="1950.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.35%)</title><rect x="738.0" y="1923.0" width="4.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="741.0" y="1934.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.28%)</title><rect x="738.8" y="1907.0" width="3.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="741.8" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (6 samples, 0.42%)</title><rect x="742.1" y="1987.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="745.1" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.42%)</title><rect x="742.1" y="1971.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="745.1" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.42%)</title><rect x="742.1" y="1955.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="745.1" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.42%)</title><rect x="742.1" y="1939.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="745.1" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (1 samples, 0.07%)</title><rect x="746.3" y="1923.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="749.3" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (240 samples, 16.81%)</title><rect x="747.1" y="1987.0" width="198.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="750.1" y="1998.0">java/util/concurrent/Threa..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (238 samples, 16.67%)</title><rect x="748.7" y="1971.0" width="196.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="751.7" y="1982.0">java/util/concurrent/Linke..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (209 samples, 14.64%)</title><rect x="753.7" y="1955.0" width="172.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="756.7" y="1966.0">java/util/concurrent/l..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (17 samples, 1.19%)</title><rect x="775.2" y="1939.0" width="14.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="778.2" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (8 samples, 0.56%)</title><rect x="789.2" y="1939.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="792.2" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.56%)</title><rect x="789.2" y="1923.0" width="6.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="792.2" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.56%)</title><rect x="789.2" y="1907.0" width="6.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="792.2" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.56%)</title><rect x="789.2" y="1891.0" width="6.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="792.2" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (158 samples, 11.06%)</title><rect x="795.8" y="1939.0" width="130.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="798.8" y="1950.0">java/util/concur..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (158 samples, 11.06%)</title><rect x="795.8" y="1923.0" width="130.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="798.8" y="1934.0">sun/misc/Unsafe...</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="805.8" y="1907.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="808.8" y="1918.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.07%)</title><rect x="806.6" y="1907.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="809.6" y="1918.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="807.4" y="1907.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="810.4" y="1918.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.07%)</title><rect x="808.2" y="1907.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="811.2" y="1918.0"></text>
</g>
<g>
<title>Unsafe_Park (139 samples, 9.73%)</title><rect x="809.1" y="1907.0" width="114.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="812.1" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="810.7" y="1891.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="813.7" y="1902.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (30 samples, 2.10%)</title><rect x="811.5" y="1891.0" width="24.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="814.5" y="1902.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (9 samples, 0.63%)</title><rect x="823.9" y="1875.0" width="7.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="826.9" y="1886.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (5 samples, 0.35%)</title><rect x="825.6" y="1859.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="828.6" y="1870.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (5 samples, 0.35%)</title><rect x="825.6" y="1843.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="828.6" y="1854.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.07%)</title><rect x="829.7" y="1859.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="832.7" y="1870.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="830.5" y="1859.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="833.5" y="1870.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.14%)</title><rect x="831.4" y="1875.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="834.4" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (4 samples, 0.28%)</title><rect x="833.0" y="1875.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="836.0" y="1886.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="836.3" y="1891.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="839.3" y="1902.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.07%)</title><rect x="837.2" y="1891.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="840.2" y="1902.0"></text>
</g>
<g>
<title>__lll_lock_wait (6 samples, 0.42%)</title><rect x="838.0" y="1891.0" width="4.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="841.0" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (26 samples, 1.82%)</title><rect x="842.9" y="1891.0" width="21.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="845.9" y="1902.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (57 samples, 3.99%)</title><rect x="864.4" y="1891.0" width="47.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="867.4" y="1902.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.28%)</title><rect x="911.5" y="1891.0" width="3.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="914.5" y="1902.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (3 samples, 0.21%)</title><rect x="914.8" y="1891.0" width="2.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="917.8" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.07%)</title><rect x="917.3" y="1891.0" width="0.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="920.3" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.07%)</title><rect x="918.1" y="1891.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="921.1" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.07%)</title><rect x="919.0" y="1891.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="922.0" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.14%)</title><rect x="919.8" y="1891.0" width="1.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="922.8" y="1902.0"></text>
</g>
<g>
<title>_init (1 samples, 0.07%)</title><rect x="921.4" y="1891.0" width="0.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="924.4" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.07%)</title><rect x="922.3" y="1891.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="925.3" y="1902.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="923.1" y="1891.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="926.1" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.14%)</title><rect x="923.9" y="1907.0" width="1.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="926.9" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.07%)</title><rect x="925.6" y="1907.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="928.6" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (23 samples, 1.61%)</title><rect x="926.4" y="1955.0" width="19.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="929.4" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (23 samples, 1.61%)</title><rect x="926.4" y="1939.0" width="19.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="929.4" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (23 samples, 1.61%)</title><rect x="926.4" y="1923.0" width="19.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="929.4" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (23 samples, 1.61%)</title><rect x="926.4" y="1907.0" width="19.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="929.4" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.07%)</title><rect x="944.6" y="1891.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="947.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.07%)</title><rect x="945.4" y="2035.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="948.4" y="2046.0"></text>
</g>
<g>
<title>start_thread (295 samples, 20.66%)</title><rect x="946.2" y="2035.0" width="243.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="949.2" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (295 samples, 20.66%)</title><rect x="946.2" y="2019.0" width="243.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="949.2" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (27 samples, 1.89%)</title><rect x="946.2" y="2003.0" width="22.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="949.2" y="2014.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (4 samples, 0.28%)</title><rect x="946.2" y="1987.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="949.2" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.28%)</title><rect x="946.2" y="1971.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="949.2" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.07%)</title><rect x="946.2" y="1955.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="949.2" y="1966.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.21%)</title><rect x="947.1" y="1955.0" width="2.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="950.1" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (23 samples, 1.61%)</title><rect x="949.5" y="1987.0" width="19.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="952.5" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.49%)</title><rect x="949.5" y="1971.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="952.5" y="1982.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.07%)</title><rect x="950.4" y="1955.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="953.4" y="1966.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.07%)</title><rect x="950.4" y="1939.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="953.4" y="1950.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.21%)</title><rect x="951.2" y="1955.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="954.2" y="1966.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.14%)</title><rect x="953.7" y="1955.0" width="1.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="956.7" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (9 samples, 0.63%)</title><rect x="955.3" y="1971.0" width="7.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="958.3" y="1982.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.21%)</title><rect x="955.3" y="1955.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="958.3" y="1966.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.14%)</title><rect x="955.3" y="1939.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="958.3" y="1950.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.14%)</title><rect x="955.3" y="1923.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="958.3" y="1934.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (2 samples, 0.14%)</title><rect x="955.3" y="1907.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="958.3" y="1918.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="957.0" y="1939.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="960.0" y="1950.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="957.0" y="1923.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="960.0" y="1934.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.07%)</title><rect x="957.0" y="1907.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="960.0" y="1918.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**), OopClosure*) (1 samples, 0.07%)</title><rect x="957.0" y="1891.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="960.0" y="1902.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (6 samples, 0.42%)</title><rect x="957.8" y="1955.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="960.8" y="1966.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (6 samples, 0.42%)</title><rect x="957.8" y="1939.0" width="5.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="960.8" y="1950.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (2 samples, 0.14%)</title><rect x="961.1" y="1923.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="964.1" y="1934.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (7 samples, 0.49%)</title><rect x="962.8" y="1971.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="965.8" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (7 samples, 0.49%)</title><rect x="962.8" y="1955.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="965.8" y="1966.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (7 samples, 0.49%)</title><rect x="962.8" y="1939.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="965.8" y="1950.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (7 samples, 0.49%)</title><rect x="962.8" y="1923.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="965.8" y="1934.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (7 samples, 0.49%)</title><rect x="962.8" y="1907.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="965.8" y="1918.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (7 samples, 0.49%)</title><rect x="962.8" y="1891.0" width="5.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="965.8" y="1902.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (5 samples, 0.35%)</title><rect x="964.4" y="1875.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="967.4" y="1886.0"></text>
</g>
<g>
<title>G1BlockOffsetArray::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.07%)</title><rect x="964.4" y="1859.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="967.4" y="1870.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.07%)</title><rect x="964.4" y="1843.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="967.4" y="1854.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.07%)</title><rect x="965.2" y="1859.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="968.2" y="1870.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (3 samples, 0.21%)</title><rect x="966.1" y="1859.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="969.1" y="1870.0"></text>
</g>
<g>
<title>JavaThread::run() (265 samples, 18.56%)</title><rect x="968.5" y="2003.0" width="219.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="971.5" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (265 samples, 18.56%)</title><rect x="968.5" y="1987.0" width="219.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="971.5" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (265 samples, 18.56%)</title><rect x="968.5" y="1971.0" width="219.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="971.5" y="1982.0">CompileBroker::compiler_threa..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (265 samples, 18.56%)</title><rect x="968.5" y="1955.0" width="219.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="971.5" y="1966.0">CompileBroker::invoke_compile..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (265 samples, 18.56%)</title><rect x="968.5" y="1939.0" width="219.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="971.5" y="1950.0">C2Compiler::compile_method(ci..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (265 samples, 18.56%)</title><rect x="968.5" y="1923.0" width="219.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="971.5" y="1934.0">Compile::Compile(ciEnv*, C2Co..</text>
</g>
<g>
<title>Compile::Code_Gen() (77 samples, 5.39%)</title><rect x="968.5" y="1907.0" width="63.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="971.5" y="1918.0">Compile..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.21%)</title><rect x="968.5" y="1891.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="971.5" y="1902.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 0.21%)</title><rect x="968.5" y="1875.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="971.5" y="1886.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="968.5" y="1859.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="971.5" y="1870.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (2 samples, 0.14%)</title><rect x="969.4" y="1859.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="972.4" y="1870.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (2 samples, 0.14%)</title><rect x="969.4" y="1843.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="972.4" y="1854.0"></text>
</g>
<g>
<title>CompressedWriteStream::CompressedWriteStream(int) (1 samples, 0.07%)</title><rect x="970.2" y="1827.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="973.2" y="1838.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.21%)</title><rect x="971.0" y="1891.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="974.0" y="1902.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.07%)</title><rect x="971.0" y="1875.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="974.0" y="1886.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="971.0" y="1859.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="974.0" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.07%)</title><rect x="971.8" y="1875.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="974.8" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="971.8" y="1859.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="974.8" y="1870.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="972.7" y="1875.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="975.7" y="1886.0"></text>
</g>
<g>
<title>Matcher::match() (7 samples, 0.49%)</title><rect x="973.5" y="1891.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="976.5" y="1902.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (7 samples, 0.49%)</title><rect x="973.5" y="1875.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="976.5" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.21%)</title><rect x="975.2" y="1859.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="978.2" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.07%)</title><rect x="977.6" y="1859.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="980.6" y="1870.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.07%)</title><rect x="978.5" y="1859.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="981.5" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (6 samples, 0.42%)</title><rect x="979.3" y="1891.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="982.3" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (6 samples, 0.42%)</title><rect x="979.3" y="1875.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="982.3" y="1886.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.07%)</title><rect x="979.3" y="1859.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="982.3" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.07%)</title><rect x="980.1" y="1859.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="983.1" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::latency_from_uses(Node*) (1 samples, 0.07%)</title><rect x="980.1" y="1843.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="983.1" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (3 samples, 0.21%)</title><rect x="980.9" y="1859.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="983.9" y="1870.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (3 samples, 0.21%)</title><rect x="980.9" y="1843.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="983.9" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.07%)</title><rect x="983.4" y="1859.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="986.4" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.07%)</title><rect x="983.4" y="1843.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="986.4" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (58 samples, 4.06%)</title><rect x="984.2" y="1891.0" width="48.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="987.2" y="1902.0">Phas..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="985.1" y="1875.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="988.1" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="985.9" y="1875.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="988.9" y="1886.0"></text>
</g>
<g>
<title>Node::rematerialize() const (2 samples, 0.14%)</title><rect x="986.7" y="1875.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="989.7" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.14%)</title><rect x="988.4" y="1875.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="991.4" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (5 samples, 0.35%)</title><rect x="990.0" y="1875.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="993.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (5 samples, 0.35%)</title><rect x="990.0" y="1859.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="993.0" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="990.9" y="1843.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="993.9" y="1854.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.21%)</title><rect x="991.7" y="1843.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="994.7" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.21%)</title><rect x="994.2" y="1875.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="997.2" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.14%)</title><rect x="995.0" y="1859.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="998.0" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="995.8" y="1843.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="998.8" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 0.35%)</title><rect x="996.6" y="1875.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="999.6" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.07%)</title><rect x="999.9" y="1859.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1002.9" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.07%)</title><rect x="999.9" y="1843.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1002.9" y="1854.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="999.9" y="1827.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1002.9" y="1838.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 0.63%)</title><rect x="1000.8" y="1875.0" width="7.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1003.8" y="1886.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.07%)</title><rect x="1003.2" y="1859.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1006.2" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.21%)</title><rect x="1004.1" y="1859.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1007.1" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1005.7" y="1843.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1008.7" y="1854.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (2 samples, 0.14%)</title><rect x="1006.6" y="1859.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1009.6" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.07%)</title><rect x="1008.2" y="1875.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1011.2" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (6 samples, 0.42%)</title><rect x="1009.0" y="1875.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1012.0" y="1886.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.07%)</title><rect x="1013.2" y="1859.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1016.2" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.21%)</title><rect x="1014.0" y="1875.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1017.0" y="1886.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 0.21%)</title><rect x="1016.5" y="1875.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1019.5" y="1886.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (3 samples, 0.21%)</title><rect x="1016.5" y="1859.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1019.5" y="1870.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (3 samples, 0.21%)</title><rect x="1016.5" y="1843.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1019.5" y="1854.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.14%)</title><rect x="1017.3" y="1827.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1020.3" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 0.21%)</title><rect x="1018.9" y="1875.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1021.9" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="1018.9" y="1859.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1021.9" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.14%)</title><rect x="1019.8" y="1859.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1022.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.14%)</title><rect x="1021.4" y="1875.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1024.4" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.14%)</title><rect x="1023.1" y="1875.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1026.1" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.14%)</title><rect x="1023.1" y="1859.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1026.1" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 0.35%)</title><rect x="1024.7" y="1875.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1027.7" y="1886.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.14%)</title><rect x="1027.2" y="1859.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1030.2" y="1870.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1028.9" y="1875.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1031.9" y="1886.0"></text>
</g>
<g>
<title>convI2L_reg_regNode::ideal_Opcode() const (1 samples, 0.07%)</title><rect x="1029.7" y="1875.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1032.7" y="1886.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (2 samples, 0.14%)</title><rect x="1030.5" y="1875.0" width="1.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1033.5" y="1886.0"></text>
</g>
<g>
<title>Compile::Optimize() (175 samples, 12.25%)</title><rect x="1032.2" y="1907.0" width="144.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1035.2" y="1918.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="1032.2" y="1891.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1035.2" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (6 samples, 0.42%)</title><rect x="1033.0" y="1891.0" width="5.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1036.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (6 samples, 0.42%)</title><rect x="1033.0" y="1875.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1036.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.07%)</title><rect x="1033.0" y="1859.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1036.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.07%)</title><rect x="1033.0" y="1843.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1036.0" y="1854.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.07%)</title><rect x="1033.0" y="1827.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1036.0" y="1838.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.07%)</title><rect x="1033.0" y="1811.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1036.0" y="1822.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.07%)</title><rect x="1033.0" y="1795.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1036.0" y="1806.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.07%)</title><rect x="1033.0" y="1779.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1036.0" y="1790.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1033.0" y="1763.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1036.0" y="1774.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1033.0" y="1747.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1036.0" y="1758.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1033.0" y="1731.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1036.0" y="1742.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1033.0" y="1715.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1036.0" y="1726.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1033.0" y="1699.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1036.0" y="1710.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.07%)</title><rect x="1033.0" y="1683.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1036.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (4 samples, 0.28%)</title><rect x="1033.8" y="1859.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1036.8" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1034.6" y="1843.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1037.6" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1034.6" y="1827.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1037.6" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="1034.6" y="1811.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1037.6" y="1822.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="1034.6" y="1795.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1037.6" y="1806.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="1035.5" y="1843.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1038.5" y="1854.0"></text>
</g>
<g>
<title>ciKlass::is_subtype_of(ciKlass*) (1 samples, 0.07%)</title><rect x="1036.3" y="1843.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1039.3" y="1854.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.07%)</title><rect x="1037.1" y="1859.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1040.1" y="1870.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.07%)</title><rect x="1038.0" y="1891.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1041.0" y="1902.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1038.0" y="1875.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1041.0" y="1886.0"></text>
</g>
<g>
<title>TypeInt::filter_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1038.0" y="1859.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1041.0" y="1870.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1038.0" y="1843.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1041.0" y="1854.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.07%)</title><rect x="1038.0" y="1827.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1041.0" y="1838.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1038.0" y="1811.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1041.0" y="1822.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.07%)</title><rect x="1038.0" y="1795.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1041.0" y="1806.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (137 samples, 9.59%)</title><rect x="1038.8" y="1891.0" width="113.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1041.8" y="1902.0">PhaseIdealLoop..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1038.8" y="1875.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1041.8" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1038.8" y="1859.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1041.8" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1038.8" y="1843.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1041.8" y="1854.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1038.8" y="1827.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1041.8" y="1838.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1038.8" y="1811.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1041.8" y="1822.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1038.8" y="1795.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1041.8" y="1806.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1038.8" y="1779.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1041.8" y="1790.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1038.8" y="1763.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1041.8" y="1774.0"></text>
</g>
<g>
<title>PhaseIdealLoop::recompute_dom_depth() (1 samples, 0.07%)</title><rect x="1038.8" y="1747.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1041.8" y="1758.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.14%)</title><rect x="1039.6" y="1875.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1042.6" y="1886.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.07%)</title><rect x="1040.4" y="1859.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1043.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (8 samples, 0.56%)</title><rect x="1041.3" y="1875.0" width="6.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1044.3" y="1886.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.07%)</title><rect x="1047.0" y="1859.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1050.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (117 samples, 8.19%)</title><rect x="1047.9" y="1875.0" width="96.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1050.9" y="1886.0">PhaseIdealL..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.07%)</title><rect x="1051.2" y="1859.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1054.2" y="1870.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="1051.2" y="1843.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1054.2" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (112 samples, 7.84%)</title><rect x="1052.0" y="1859.0" width="92.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1055.0" y="1870.0">PhaseIdealL..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (9 samples, 0.63%)</title><rect x="1054.5" y="1843.0" width="7.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1057.5" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (100 samples, 7.00%)</title><rect x="1061.9" y="1843.0" width="82.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1064.9" y="1854.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.07%)</title><rect x="1123.9" y="1827.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1126.9" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1123.9" y="1811.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1126.9" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (20 samples, 1.40%)</title><rect x="1124.7" y="1827.0" width="16.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1127.7" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (4 samples, 0.28%)</title><rect x="1141.2" y="1827.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.2" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.14%)</title><rect x="1142.9" y="1811.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.9" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (5 samples, 0.35%)</title><rect x="1144.6" y="1875.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.6" y="1886.0"></text>
</g>
<g>
<title>IfTrueNode::Opcode() const (1 samples, 0.07%)</title><rect x="1145.4" y="1859.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (3 samples, 0.21%)</title><rect x="1146.2" y="1859.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.07%)</title><rect x="1148.7" y="1875.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.21%)</title><rect x="1149.5" y="1875.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.21%)</title><rect x="1149.5" y="1859.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.5" y="1870.0"></text>
</g>
<g>
<title>AddINode::Opcode() const (1 samples, 0.07%)</title><rect x="1149.5" y="1843.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.5" y="1854.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1150.3" y="1843.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.3" y="1854.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1150.3" y="1827.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.3" y="1838.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1150.3" y="1811.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.3" y="1822.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1151.2" y="1843.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.2" y="1854.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.07%)</title><rect x="1151.2" y="1827.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.2" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (23 samples, 1.61%)</title><rect x="1152.0" y="1891.0" width="19.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.0" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (23 samples, 1.61%)</title><rect x="1152.0" y="1875.0" width="19.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.0" y="1886.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1152.0" y="1859.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.0" y="1870.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1152.0" y="1843.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1155.0" y="1854.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.07%)</title><rect x="1152.0" y="1827.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.0" y="1838.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1152.0" y="1811.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.0" y="1822.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1152.0" y="1795.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.0" y="1806.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.07%)</title><rect x="1152.0" y="1779.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.0" y="1790.0"></text>
</g>
<g>
<title>TypeLong::eq(Type const*) const (1 samples, 0.07%)</title><rect x="1152.0" y="1763.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.0" y="1774.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1152.8" y="1859.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.8" y="1870.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1152.8" y="1843.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.8" y="1854.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (4 samples, 0.28%)</title><rect x="1153.6" y="1859.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.6" y="1870.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (2 samples, 0.14%)</title><rect x="1153.6" y="1843.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1156.6" y="1854.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.14%)</title><rect x="1153.6" y="1827.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.6" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1153.6" y="1811.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1156.6" y="1822.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.07%)</title><rect x="1154.5" y="1811.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1157.5" y="1822.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1154.5" y="1795.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1157.5" y="1806.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (2 samples, 0.14%)</title><rect x="1155.3" y="1843.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.3" y="1854.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1155.3" y="1827.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1158.3" y="1838.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1155.3" y="1811.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.3" y="1822.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1155.3" y="1795.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1158.3" y="1806.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.07%)</title><rect x="1155.3" y="1779.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.3" y="1790.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1156.1" y="1827.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.1" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1156.1" y="1811.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.1" y="1822.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1156.9" y="1859.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.9" y="1870.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1157.8" y="1859.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.8" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.14%)</title><rect x="1158.6" y="1859.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.6" y="1870.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.07%)</title><rect x="1159.4" y="1843.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.4" y="1854.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.07%)</title><rect x="1159.4" y="1827.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.4" y="1838.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 0.07%)</title><rect x="1159.4" y="1811.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.4" y="1822.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (2 samples, 0.14%)</title><rect x="1160.3" y="1859.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (5 samples, 0.35%)</title><rect x="1161.9" y="1859.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.9" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.14%)</title><rect x="1163.6" y="1843.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1166.6" y="1854.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.07%)</title><rect x="1164.4" y="1827.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.4" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1165.2" y="1843.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.2" y="1854.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.07%)</title><rect x="1165.2" y="1827.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.2" y="1838.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1166.0" y="1859.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.0" y="1870.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (2 samples, 0.14%)</title><rect x="1166.0" y="1843.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.0" y="1854.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (3 samples, 0.21%)</title><rect x="1167.7" y="1859.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.7" y="1870.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.07%)</title><rect x="1167.7" y="1843.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.7" y="1854.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (2 samples, 0.14%)</title><rect x="1168.5" y="1843.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.5" y="1854.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1170.2" y="1859.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.2" y="1870.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1170.2" y="1843.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.2" y="1854.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (3 samples, 0.21%)</title><rect x="1171.0" y="1891.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.0" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.21%)</title><rect x="1171.0" y="1875.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.21%)</title><rect x="1171.0" y="1859.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.0" y="1870.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1171.0" y="1843.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.0" y="1854.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1171.0" y="1827.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.0" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1171.8" y="1843.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.8" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1171.8" y="1827.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.8" y="1838.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1172.6" y="1843.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.6" y="1854.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.07%)</title><rect x="1173.5" y="1891.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.5" y="1902.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1174.3" y="1891.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.3" y="1902.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.07%)</title><rect x="1175.1" y="1891.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.1" y="1902.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1176.0" y="1891.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1179.0" y="1902.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.77%)</title><rect x="1176.8" y="1907.0" width="9.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.8" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.77%)</title><rect x="1176.8" y="1891.0" width="9.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.8" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 0.77%)</title><rect x="1176.8" y="1875.0" width="9.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.8" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.77%)</title><rect x="1176.8" y="1859.0" width="9.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.8" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 0.77%)</title><rect x="1176.8" y="1843.0" width="9.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.8" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.77%)</title><rect x="1176.8" y="1827.0" width="9.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.8" y="1838.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1176.8" y="1811.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.8" y="1822.0"></text>
</g>
<g>
<title>ciMethod::call_profile_at_bci(int) (1 samples, 0.07%)</title><rect x="1176.8" y="1795.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.8" y="1806.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.07%)</title><rect x="1176.8" y="1779.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.8" y="1790.0"></text>
</g>
<g>
<title>ciMethodData::data_at(int) (1 samples, 0.07%)</title><rect x="1176.8" y="1763.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.8" y="1774.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.70%)</title><rect x="1177.6" y="1811.0" width="8.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.6" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.70%)</title><rect x="1177.6" y="1795.0" width="8.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.6" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.70%)</title><rect x="1177.6" y="1779.0" width="8.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.6" y="1790.0"></text>
</g>
<g>
<title>GraphKit::stopped() (1 samples, 0.07%)</title><rect x="1177.6" y="1763.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.6" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.63%)</title><rect x="1178.4" y="1763.0" width="7.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.4" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.63%)</title><rect x="1178.4" y="1747.0" width="7.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.4" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.56%)</title><rect x="1178.4" y="1731.0" width="6.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.4" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.49%)</title><rect x="1178.4" y="1715.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.4" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.49%)</title><rect x="1178.4" y="1699.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.4" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.49%)</title><rect x="1178.4" y="1683.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.4" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.49%)</title><rect x="1178.4" y="1667.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.4" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.49%)</title><rect x="1178.4" y="1651.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.4" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.49%)</title><rect x="1178.4" y="1635.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.4" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.49%)</title><rect x="1178.4" y="1619.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.4" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.49%)</title><rect x="1178.4" y="1603.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.4" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.49%)</title><rect x="1178.4" y="1587.0" width="5.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.4" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.49%)</title><rect x="1178.4" y="1571.0" width="5.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.4" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.49%)</title><rect x="1178.4" y="1555.0" width="5.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.4" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.49%)</title><rect x="1178.4" y="1539.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.4" y="1550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.42%)</title><rect x="1178.4" y="1523.0" width="5.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.4" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.42%)</title><rect x="1178.4" y="1507.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.4" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.42%)</title><rect x="1178.4" y="1491.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.4" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.42%)</title><rect x="1178.4" y="1475.0" width="5.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.4" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.42%)</title><rect x="1178.4" y="1459.0" width="5.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.4" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.35%)</title><rect x="1178.4" y="1443.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.4" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1178.4" y="1427.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.4" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1178.4" y="1411.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.4" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1178.4" y="1395.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.4" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1178.4" y="1379.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.4" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1178.4" y="1363.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.4" y="1374.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.21%)</title><rect x="1178.4" y="1347.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.4" y="1358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1178.4" y="1331.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.4" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1178.4" y="1315.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.4" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1178.4" y="1299.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.4" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1178.4" y="1283.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.4" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1178.4" y="1267.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.4" y="1278.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.07%)</title><rect x="1178.4" y="1251.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.4" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.3" y="1251.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.3" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.3" y="1235.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.3" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.3" y="1219.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.3" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.3" y="1203.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.3" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.3" y="1187.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.3" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.3" y="1171.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.3" y="1182.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.07%)</title><rect x="1179.3" y="1155.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.3" y="1166.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1179.3" y="1139.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.3" y="1150.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.07%)</title><rect x="1179.3" y="1123.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.3" y="1134.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.07%)</title><rect x="1179.3" y="1107.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.3" y="1118.0"></text>
</g>
<g>
<title>Node::add_req_batch(Node*, unsigned int) (1 samples, 0.07%)</title><rect x="1179.3" y="1091.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.3" y="1102.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1180.1" y="1251.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.1" y="1262.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1180.1" y="1235.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.1" y="1246.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.07%)</title><rect x="1180.1" y="1219.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.1" y="1230.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.07%)</title><rect x="1180.1" y="1203.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.1" y="1214.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1180.1" y="1187.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.1" y="1198.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1180.1" y="1171.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.1" y="1182.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1180.1" y="1155.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.1" y="1166.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1180.9" y="1427.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.9" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1180.9" y="1411.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.9" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1180.9" y="1395.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.9" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1180.9" y="1379.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.9" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1180.9" y="1363.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.9" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1180.9" y="1347.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.9" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1180.9" y="1331.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.9" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1180.9" y="1315.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.9" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1180.9" y="1299.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.9" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1180.9" y="1283.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.9" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1180.9" y="1267.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.9" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1180.9" y="1251.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.9" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1180.9" y="1235.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.9" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1180.9" y="1219.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.9" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1180.9" y="1203.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.9" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1180.9" y="1187.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.9" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1180.9" y="1171.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.9" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1180.9" y="1155.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.9" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1180.9" y="1139.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.9" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1180.9" y="1123.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.9" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1180.9" y="1107.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.9" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1180.9" y="1091.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.9" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1180.9" y="1075.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.9" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1180.9" y="1059.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.9" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1180.9" y="1043.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.9" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.9" y="1027.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.9" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.9" y="1011.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.9" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.9" y="995.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.9" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.9" y="979.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.9" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.9" y="963.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.9" y="974.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.07%)</title><rect x="1180.9" y="947.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.9" y="958.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.07%)</title><rect x="1180.9" y="931.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.9" y="942.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.07%)</title><rect x="1180.9" y="915.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.9" y="926.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.07%)</title><rect x="1180.9" y="899.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1181.7" y="1043.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.7" y="1054.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1181.7" y="1027.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.7" y="1038.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1181.7" y="1011.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.7" y="1022.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.07%)</title><rect x="1181.7" y="995.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.7" y="1006.0"></text>
</g>
<g>
<title>IdealKit::transform(Node*) (1 samples, 0.07%)</title><rect x="1181.7" y="979.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.7" y="990.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.07%)</title><rect x="1181.7" y="963.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.7" y="974.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="1181.7" y="947.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1184.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1182.6" y="1443.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.6" y="1454.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1182.6" y="1427.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.6" y="1438.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1182.6" y="1411.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.6" y="1422.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1182.6" y="1395.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.6" y="1406.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1182.6" y="1379.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.6" y="1390.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1182.6" y="1363.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.6" y="1374.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1182.6" y="1347.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.6" y="1358.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.07%)</title><rect x="1182.6" y="1331.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.6" y="1342.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 0.07%)</title><rect x="1182.6" y="1315.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.6" y="1326.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.4" y="1523.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.4" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.4" y="1507.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.4" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.4" y="1491.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.4" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.4" y="1475.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.4" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.4" y="1459.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.4" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.4" y="1443.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.4" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1183.4" y="1427.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.4" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.4" y="1411.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.4" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.4" y="1395.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.4" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.4" y="1379.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.4" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.4" y="1363.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.4" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.4" y="1347.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.4" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1183.4" y="1331.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.4" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.4" y="1315.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.4" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.4" y="1299.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.4" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.4" y="1283.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.4" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.4" y="1267.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.4" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.4" y="1251.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.4" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1183.4" y="1235.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.4" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.4" y="1219.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.4" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.4" y="1203.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.4" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.4" y="1187.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.4" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.4" y="1171.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.4" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.4" y="1155.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.4" y="1166.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1183.4" y="1139.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.4" y="1150.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1183.4" y="1123.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.4" y="1134.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1183.4" y="1107.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.4" y="1118.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.07%)</title><rect x="1183.4" y="1091.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.4" y="1102.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.07%)</title><rect x="1183.4" y="1075.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.4" y="1086.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.07%)</title><rect x="1183.4" y="1059.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.4" y="1070.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.07%)</title><rect x="1183.4" y="1043.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.4" y="1054.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.2" y="1715.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.2" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.2" y="1699.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.2" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.2" y="1683.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.2" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.2" y="1667.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.2" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.2" y="1651.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.2" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.2" y="1635.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.2" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1184.2" y="1619.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.2" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.2" y="1603.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.2" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.2" y="1587.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.2" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.2" y="1571.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.2" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.2" y="1555.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.2" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.2" y="1539.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.2" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1184.2" y="1523.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.2" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.2" y="1507.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.2" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.2" y="1491.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.2" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.2" y="1475.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.2" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.2" y="1459.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.2" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.2" y="1443.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.2" y="1454.0"></text>
</g>
<g>
<title>Parse::push_constant(ciConstant, bool, bool, Type const*) (1 samples, 0.07%)</title><rect x="1184.2" y="1427.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.2" y="1438.0"></text>
</g>
<g>
<title>Type::make_from_constant(ciConstant, bool, bool) (1 samples, 0.07%)</title><rect x="1184.2" y="1411.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.2" y="1422.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1184.2" y="1395.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.2" y="1406.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1184.2" y="1379.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.2" y="1390.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.07%)</title><rect x="1185.0" y="1731.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.0" y="1742.0"></text>
</g>
<g>
<title>PhiNode::slice_memory(TypePtr const*) const (1 samples, 0.07%)</title><rect x="1185.0" y="1715.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.0" y="1726.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.07%)</title><rect x="1185.0" y="1699.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.0" y="1710.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.14%)</title><rect x="1185.9" y="1907.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.9" y="1918.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 0.14%)</title><rect x="1185.9" y="1891.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.9" y="1902.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.21%)</title><rect x="1187.5" y="2003.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.5" y="2014.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.21%)</title><rect x="1187.5" y="1987.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.5" y="1998.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.14%)</title><rect x="1187.5" y="1971.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.5" y="1982.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.07%)</title><rect x="1188.3" y="1955.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.3" y="1966.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.07%)</title><rect x="1188.3" y="1939.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.3" y="1950.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="1188.3" y="1923.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.3" y="1934.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="1188.3" y="1907.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.3" y="1918.0"></text>
</g>
<g>
<title>frame::entry_frame_is_first() const (1 samples, 0.07%)</title><rect x="1188.3" y="1891.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.3" y="1902.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.07%)</title><rect x="1189.2" y="1971.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.2" y="1982.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.07%)</title><rect x="1189.2" y="1955.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1192.2" y="1966.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.07%)</title><rect x="1189.2" y="1939.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.2" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.07%)</title><rect x="1189.2" y="1923.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.2" y="1934.0"></text>
</g>
<g>
<title>G1CollectorPolicy::record_collection_pause_end(double, EvacuationInfo&amp;) (1 samples, 0.07%)</title><rect x="1189.2" y="1907.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.2" y="1918.0"></text>
</g>
<g>
<title>G1CollectorPolicy::update_young_list_target_length(unsigned long) (1 samples, 0.07%)</title><rect x="1189.2" y="1891.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.2" y="1902.0"></text>
</g>
<g>
<title>G1CollectorPolicy::calculate_young_list_target_length(unsigned long, unsigned int, unsigned int, unsigned int) (1 samples, 0.07%)</title><rect x="1189.2" y="1875.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.2" y="1886.0"></text>
</g>
<g>
<title>AbsSeq::dsd() const (1 samples, 0.07%)</title><rect x="1189.2" y="1859.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.2" y="1870.0"></text>
</g>
</g>
</svg>
