<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="965"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="965"> </text>
<g id="frames">
<g>
<title>all (399 samples, 100.00%)</title><rect x="10.0" y="931.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="942.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (26 samples, 6.52%)</title><rect x="10.0" y="915.0" width="76.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="926.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.25%)</title><rect x="10.0" y="899.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.25%)</title><rect x="10.0" y="883.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.25%)</title><rect x="10.0" y="867.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.25%)</title><rect x="10.0" y="851.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.25%)</title><rect x="10.0" y="835.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.25%)</title><rect x="10.0" y="819.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.25%)</title><rect x="10.0" y="803.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.25%)</title><rect x="10.0" y="787.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.25%)</title><rect x="10.0" y="771.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.25%)</title><rect x="10.0" y="755.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.25%)</title><rect x="10.0" y="739.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.25%)</title><rect x="10.0" y="723.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitRequest.toStruct (1 samples, 0.25%)</title><rect x="10.0" y="707.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitRequestData.toStruct (1 samples, 0.25%)</title><rect x="10.0" y="691.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitRequestData$OffsetCommitRequestTopic.toStruct (1 samples, 0.25%)</title><rect x="10.0" y="675.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitRequestData$OffsetCommitRequestPartition.toStruct (1 samples, 0.25%)</title><rect x="10.0" y="659.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.25%)</title><rect x="10.0" y="643.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.25%)</title><rect x="10.0" y="627.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.25%)</title><rect x="10.0" y="611.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.25%)</title><rect x="10.0" y="595.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.25%)</title><rect x="10.0" y="579.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.25%)</title><rect x="10.0" y="563.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.25%)</title><rect x="10.0" y="547.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>CompileBroker::compile_method_base(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.25%)</title><rect x="10.0" y="531.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.25%)</title><rect x="10.0" y="515.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (25 samples, 6.27%)</title><rect x="13.0" y="899.0" width="73.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.0" y="910.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (2 samples, 0.50%)</title><rect x="13.0" y="883.0" width="5.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="16.0" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.50%)</title><rect x="13.0" y="867.0" width="5.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="16.0" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$281/503888535.accept (2 samples, 0.50%)</title><rect x="13.0" y="851.0" width="5.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.0" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (2 samples, 0.50%)</title><rect x="13.0" y="835.0" width="5.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="16.0" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.50%)</title><rect x="13.0" y="819.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.0" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.50%)</title><rect x="13.0" y="803.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.0" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.50%)</title><rect x="18.9" y="883.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.9" y="894.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (1 samples, 0.25%)</title><rect x="18.9" y="867.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.9" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$299/1950036369.accept (1 samples, 0.25%)</title><rect x="18.9" y="851.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.9" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pausePartitions$72 (1 samples, 0.25%)</title><rect x="18.9" y="835.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.9" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.pause (1 samples, 0.25%)</title><rect x="18.9" y="819.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.9" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.paused (1 samples, 0.25%)</title><rect x="18.9" y="803.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pause (1 samples, 0.25%)</title><rect x="21.8" y="867.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquireAndEnsureOpen (1 samples, 0.25%)</title><rect x="21.8" y="851.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="24.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquire (1 samples, 0.25%)</title><rect x="21.8" y="835.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="24.8" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (2 samples, 0.50%)</title><rect x="24.8" y="883.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="27.8" y="894.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (1 samples, 0.25%)</title><rect x="27.7" y="867.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.7" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$300/151418432.accept (1 samples, 0.25%)</title><rect x="27.7" y="851.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="30.7" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$resumePartitions$73 (1 samples, 0.25%)</title><rect x="27.7" y="835.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="30.7" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.resume (1 samples, 0.25%)</title><rect x="27.7" y="819.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="30.7" y="830.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.25%)</title><rect x="27.7" y="803.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="30.7" y="814.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (5 samples, 1.25%)</title><rect x="30.7" y="883.0" width="14.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="33.7" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$267/365059007.accept (4 samples, 1.00%)</title><rect x="30.7" y="867.0" width="11.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="33.7" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$71 (4 samples, 1.00%)</title><rect x="30.7" y="851.0" width="11.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="33.7" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (2 samples, 0.50%)</title><rect x="30.7" y="835.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="33.7" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (2 samples, 0.50%)</title><rect x="30.7" y="819.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="33.7" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (2 samples, 0.50%)</title><rect x="30.7" y="803.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="33.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 0.50%)</title><rect x="30.7" y="787.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="33.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.50%)</title><rect x="30.7" y="771.0" width="5.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="33.7" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (2 samples, 0.50%)</title><rect x="36.6" y="835.0" width="5.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="39.6" y="846.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.50%)</title><rect x="36.6" y="819.0" width="5.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="39.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.25%)</title><rect x="42.5" y="867.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="45.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.25%)</title><rect x="42.5" y="851.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="45.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.25%)</title><rect x="42.5" y="835.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="45.5" y="846.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.25%)</title><rect x="42.5" y="819.0" width="3.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="45.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (14 samples, 3.51%)</title><rect x="45.5" y="883.0" width="41.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="48.5" y="894.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (14 samples, 3.51%)</title><rect x="45.5" y="867.0" width="41.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="48.5" y="878.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (10 samples, 2.51%)</title><rect x="45.5" y="851.0" width="29.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="48.5" y="862.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 0.75%)</title><rect x="45.5" y="835.0" width="8.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="48.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 0.75%)</title><rect x="45.5" y="819.0" width="8.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="48.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.50%)</title><rect x="45.5" y="803.0" width="5.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="48.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.25%)</title><rect x="45.5" y="787.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="48.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.25%)</title><rect x="45.5" y="771.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="48.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.25%)</title><rect x="45.5" y="755.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="48.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.25%)</title><rect x="45.5" y="739.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="48.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.25%)</title><rect x="45.5" y="723.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="48.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.25%)</title><rect x="45.5" y="707.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="48.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Max.update (1 samples, 0.25%)</title><rect x="45.5" y="691.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="48.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.25%)</title><rect x="48.4" y="787.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="51.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.25%)</title><rect x="48.4" y="771.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="51.4" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.25%)</title><rect x="48.4" y="755.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="51.4" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.25%)</title><rect x="48.4" y="739.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="51.4" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.25%)</title><rect x="48.4" y="723.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="51.4" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.25%)</title><rect x="48.4" y="707.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="51.4" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.25%)</title><rect x="48.4" y="691.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="51.4" y="702.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.25%)</title><rect x="48.4" y="675.0" width="3.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="51.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$260/453732270.shouldBlock (1 samples, 0.25%)</title><rect x="51.4" y="803.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="54.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.25%)</title><rect x="51.4" y="787.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="54.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.25%)</title><rect x="51.4" y="771.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="54.4" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.25%)</title><rect x="51.4" y="755.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="54.4" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.25%)</title><rect x="51.4" y="739.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="54.4" y="750.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.25%)</title><rect x="51.4" y="723.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="54.4" y="734.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.25%)</title><rect x="51.4" y="707.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="54.4" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.25%)</title><rect x="51.4" y="691.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="54.4" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.25%)</title><rect x="51.4" y="675.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="54.4" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.25%)</title><rect x="51.4" y="659.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="54.4" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.25%)</title><rect x="51.4" y="643.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="54.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$CLQSpliterator.tryAdvance (1 samples, 0.25%)</title><rect x="51.4" y="627.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="54.4" y="638.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.25%)</title><rect x="51.4" y="611.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="54.4" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$261/213286.test (1 samples, 0.25%)</title><rect x="51.4" y="595.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="54.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$hasAvailableFetches$0 (1 samples, 0.25%)</title><rect x="51.4" y="579.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="54.4" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.25%)</title><rect x="51.4" y="563.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="54.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.25%)</title><rect x="51.4" y="547.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="54.4" y="558.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.25%)</title><rect x="51.4" y="531.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="54.4" y="542.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.25%)</title><rect x="51.4" y="515.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="54.4" y="526.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.25%)</title><rect x="51.4" y="499.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="54.4" y="510.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.25%)</title><rect x="51.4" y="483.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="54.4" y="494.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invoke(CallInfo&amp;, Handle, constantPoolHandle, int, Bytecodes::Code, Thread*) (1 samples, 0.25%)</title><rect x="51.4" y="467.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="54.4" y="478.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokevirtual(CallInfo&amp;, Handle, constantPoolHandle, int, Thread*) (1 samples, 0.25%)</title><rect x="51.4" y="451.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="54.4" y="462.0"></text>
</g>
<g>
<title>LinkResolver::resolve_virtual_call(CallInfo&amp;, Handle, KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.25%)</title><rect x="51.4" y="435.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="54.4" y="446.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_virtual_method(CallInfo&amp;, methodHandle, KlassHandle, Handle, KlassHandle, bool, Thread*) (1 samples, 0.25%)</title><rect x="51.4" y="419.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="54.4" y="430.0"></text>
</g>
<g>
<title>methodHandle::methodHandle(methodHandle const&amp;) (1 samples, 0.25%)</title><rect x="51.4" y="403.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="54.4" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (7 samples, 1.75%)</title><rect x="54.4" y="835.0" width="20.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="57.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 1.25%)</title><rect x="57.3" y="819.0" width="14.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="60.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 1.00%)</title><rect x="57.3" y="803.0" width="11.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="60.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 1.00%)</title><rect x="57.3" y="787.0" width="11.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="60.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 0.75%)</title><rect x="60.3" y="771.0" width="8.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="63.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.25%)</title><rect x="66.2" y="755.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="69.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.25%)</title><rect x="66.2" y="739.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="69.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.25%)</title><rect x="66.2" y="723.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="69.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.25%)</title><rect x="66.2" y="707.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="69.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.25%)</title><rect x="66.2" y="691.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="69.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.25%)</title><rect x="66.2" y="675.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="69.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.25%)</title><rect x="66.2" y="659.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="69.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.25%)</title><rect x="69.1" y="803.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="72.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.25%)</title><rect x="69.1" y="787.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="72.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.25%)</title><rect x="69.1" y="771.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="72.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.25%)</title><rect x="69.1" y="755.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="72.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.25%)</title><rect x="69.1" y="739.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="72.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.25%)</title><rect x="69.1" y="723.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="72.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.initializeCompletedFetch (1 samples, 0.25%)</title><rect x="72.1" y="819.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="75.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.25%)</title><rect x="75.1" y="851.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="78.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.25%)</title><rect x="75.1" y="835.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="78.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.25%)</title><rect x="75.1" y="819.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="78.1" y="830.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.25%)</title><rect x="75.1" y="803.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="78.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.25%)</title><rect x="78.0" y="851.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="81.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.25%)</title><rect x="78.0" y="835.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="81.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.requestIterator (1 samples, 0.25%)</title><rect x="78.0" y="819.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="81.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.25%)</title><rect x="78.0" y="803.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="81.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/Node.equals (1 samples, 0.25%)</title><rect x="78.0" y="787.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="81.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.50%)</title><rect x="81.0" y="851.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="84.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.50%)</title><rect x="81.0" y="835.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="84.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.25%)</title><rect x="81.0" y="819.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="84.0" y="830.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.25%)</title><rect x="81.0" y="803.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="84.0" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.25%)</title><rect x="81.0" y="787.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="84.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.25%)</title><rect x="83.9" y="819.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="86.9" y="830.0"></text>
</g>
<g>
<title>java/lang/Thread.run (245 samples, 61.40%)</title><rect x="86.9" y="915.0" width="724.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="89.9" y="926.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (245 samples, 61.40%)</title><rect x="86.9" y="899.0" width="724.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="89.9" y="910.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (245 samples, 61.40%)</title><rect x="86.9" y="883.0" width="724.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="89.9" y="894.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$272/101724577.run (229 samples, 57.39%)</title><rect x="86.9" y="867.0" width="677.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="89.9" y="878.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$272/101724577.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (229 samples, 57.39%)</title><rect x="86.9" y="851.0" width="677.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="89.9" y="862.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (229 samples, 57.39%)</title><rect x="86.9" y="835.0" width="677.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="89.9" y="846.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (225 samples, 56.39%)</title><rect x="95.8" y="819.0" width="665.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="98.8" y="830.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (40 samples, 10.03%)</title><rect x="107.6" y="803.0" width="118.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="110.6" y="814.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (40 samples, 10.03%)</title><rect x="107.6" y="787.0" width="118.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="110.6" y="798.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (40 samples, 10.03%)</title><rect x="107.6" y="771.0" width="118.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="110.6" y="782.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (40 samples, 10.03%)</title><rect x="107.6" y="755.0" width="118.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="110.6" y="766.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (40 samples, 10.03%)</title><rect x="107.6" y="739.0" width="118.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="110.6" y="750.0">com/linecorp/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (40 samples, 10.03%)</title><rect x="107.6" y="723.0" width="118.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="110.6" y="734.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (15 samples, 3.76%)</title><rect x="107.6" y="707.0" width="44.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="110.6" y="718.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (8 samples, 2.01%)</title><rect x="107.6" y="691.0" width="23.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="110.6" y="702.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (8 samples, 2.01%)</title><rect x="107.6" y="675.0" width="23.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="110.6" y="686.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (5 samples, 1.25%)</title><rect x="107.6" y="659.0" width="14.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="110.6" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.75%)</title><rect x="122.4" y="659.0" width="8.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="125.4" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.50%)</title><rect x="125.3" y="643.0" width="6.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="128.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (7 samples, 1.75%)</title><rect x="131.3" y="691.0" width="20.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="134.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (7 samples, 1.75%)</title><rect x="131.3" y="675.0" width="20.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="134.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (4 samples, 1.00%)</title><rect x="131.3" y="659.0" width="11.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="134.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF32 (2 samples, 0.50%)</title><rect x="137.2" y="643.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="140.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.50%)</title><rect x="143.1" y="659.0" width="5.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="146.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.25%)</title><rect x="146.0" y="643.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="149.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.25%)</title><rect x="146.0" y="627.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="149.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.25%)</title><rect x="149.0" y="659.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="152.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (22 samples, 5.51%)</title><rect x="152.0" y="707.0" width="65.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="155.0" y="718.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.50%)</title><rect x="152.0" y="691.0" width="5.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="155.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.50%)</title><rect x="152.0" y="675.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="155.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.50%)</title><rect x="157.9" y="691.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="160.9" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.50%)</title><rect x="157.9" y="675.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="160.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.25%)</title><rect x="157.9" y="659.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="160.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.25%)</title><rect x="157.9" y="643.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="160.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.25%)</title><rect x="160.8" y="659.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="163.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (3 samples, 0.75%)</title><rect x="163.8" y="691.0" width="8.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="166.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.50%)</title><rect x="166.7" y="675.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="169.7" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (15 samples, 3.76%)</title><rect x="172.7" y="691.0" width="44.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="175.7" y="702.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 1.25%)</title><rect x="175.6" y="675.0" width="14.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="178.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (5 samples, 1.25%)</title><rect x="175.6" y="659.0" width="14.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="178.6" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (5 samples, 1.25%)</title><rect x="175.6" y="643.0" width="14.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="178.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (5 samples, 1.25%)</title><rect x="175.6" y="627.0" width="14.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="178.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (5 samples, 1.25%)</title><rect x="175.6" y="611.0" width="14.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="178.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (5 samples, 1.25%)</title><rect x="175.6" y="595.0" width="14.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="178.6" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (9 samples, 2.26%)</title><rect x="190.4" y="675.0" width="26.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="193.4" y="686.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (9 samples, 2.26%)</title><rect x="190.4" y="659.0" width="26.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="193.4" y="670.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.25%)</title><rect x="190.4" y="643.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="193.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (8 samples, 2.01%)</title><rect x="193.4" y="643.0" width="23.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="196.4" y="654.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.75%)</title><rect x="193.4" y="627.0" width="8.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="196.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.75%)</title><rect x="193.4" y="611.0" width="8.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="196.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.75%)</title><rect x="193.4" y="595.0" width="8.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="196.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.75%)</title><rect x="193.4" y="579.0" width="8.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="196.4" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.25%)</title><rect x="193.4" y="563.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="196.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.50%)</title><rect x="196.3" y="563.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="199.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.50%)</title><rect x="196.3" y="547.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="199.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.25%)</title><rect x="202.2" y="627.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="205.2" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.50%)</title><rect x="205.2" y="627.0" width="5.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="208.2" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.50%)</title><rect x="205.2" y="611.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="208.2" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.50%)</title><rect x="205.2" y="595.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="208.2" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.50%)</title><rect x="205.2" y="579.0" width="5.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="208.2" y="590.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.50%)</title><rect x="205.2" y="563.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="208.2" y="574.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.25%)</title><rect x="208.1" y="547.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="211.1" y="558.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (1 samples, 0.25%)</title><rect x="208.1" y="531.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="211.1" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.50%)</title><rect x="211.1" y="627.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="214.1" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.50%)</title><rect x="211.1" y="611.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="214.1" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.50%)</title><rect x="211.1" y="595.0" width="5.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="214.1" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (3 samples, 0.75%)</title><rect x="217.0" y="707.0" width="8.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="220.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 0.75%)</title><rect x="217.0" y="691.0" width="8.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="220.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (3 samples, 0.75%)</title><rect x="217.0" y="675.0" width="8.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="220.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (3 samples, 0.75%)</title><rect x="217.0" y="659.0" width="8.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="220.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.25%)</title><rect x="222.9" y="643.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="225.9" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (163 samples, 40.85%)</title><rect x="225.9" y="803.0" width="482.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="228.9" y="814.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (40 samples, 10.03%)</title><rect x="225.9" y="787.0" width="118.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="228.9" y="798.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.25%)</title><rect x="234.8" y="771.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="237.8" y="782.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (36 samples, 9.02%)</title><rect x="237.7" y="771.0" width="106.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="240.7" y="782.0">org/slf4j/MDC..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (29 samples, 7.27%)</title><rect x="258.4" y="755.0" width="85.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="261.4" y="766.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (11 samples, 2.76%)</title><rect x="264.3" y="739.0" width="32.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="267.3" y="750.0">ch..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (11 samples, 2.76%)</title><rect x="264.3" y="723.0" width="32.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="267.3" y="734.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 1.00%)</title><rect x="285.0" y="707.0" width="11.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="288.0" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 1.00%)</title><rect x="285.0" y="691.0" width="11.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="288.0" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (4 samples, 1.00%)</title><rect x="285.0" y="675.0" width="11.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="288.0" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.50%)</title><rect x="296.9" y="739.0" width="5.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="299.9" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.50%)</title><rect x="296.9" y="723.0" width="5.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="299.9" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.50%)</title><rect x="296.9" y="707.0" width="5.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="299.9" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.50%)</title><rect x="296.9" y="691.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="299.9" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (14 samples, 3.51%)</title><rect x="302.8" y="739.0" width="41.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="305.8" y="750.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (12 samples, 3.01%)</title><rect x="308.7" y="723.0" width="35.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="311.7" y="734.0">jav..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.50%)</title><rect x="311.7" y="707.0" width="5.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="314.7" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.25%)</title><rect x="317.6" y="707.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="320.6" y="718.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.25%)</title><rect x="317.6" y="691.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="320.6" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (8 samples, 2.01%)</title><rect x="320.5" y="707.0" width="23.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="323.5" y="718.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.25%)</title><rect x="344.2" y="787.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="347.2" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (21 samples, 5.26%)</title><rect x="347.1" y="787.0" width="62.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="350.1" y="798.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (21 samples, 5.26%)</title><rect x="347.1" y="771.0" width="62.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="350.1" y="782.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (11 samples, 2.76%)</title><rect x="347.1" y="755.0" width="32.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="350.1" y="766.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (7 samples, 1.75%)</title><rect x="356.0" y="739.0" width="20.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="359.0" y="750.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 1.75%)</title><rect x="356.0" y="723.0" width="20.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="359.0" y="734.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.75%)</title><rect x="364.9" y="707.0" width="8.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="367.9" y="718.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 0.75%)</title><rect x="364.9" y="691.0" width="8.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="367.9" y="702.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.75%)</title><rect x="364.9" y="675.0" width="8.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="367.9" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.75%)</title><rect x="364.9" y="659.0" width="8.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="367.9" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.25%)</title><rect x="364.9" y="643.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="367.9" y="654.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.25%)</title><rect x="364.9" y="627.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="367.9" y="638.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.25%)</title><rect x="367.8" y="643.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="370.8" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.25%)</title><rect x="367.8" y="627.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="370.8" y="638.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.25%)</title><rect x="370.8" y="643.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="373.8" y="654.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.25%)</title><rect x="373.8" y="707.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="376.8" y="718.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.25%)</title><rect x="376.7" y="739.0" width="3.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="379.7" y="750.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (10 samples, 2.51%)</title><rect x="379.7" y="755.0" width="29.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="382.7" y="766.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (10 samples, 2.51%)</title><rect x="379.7" y="739.0" width="29.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="382.7" y="750.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.50%)</title><rect x="379.7" y="723.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="382.7" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.50%)</title><rect x="379.7" y="707.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="382.7" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.50%)</title><rect x="379.7" y="691.0" width="5.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="382.7" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.50%)</title><rect x="379.7" y="675.0" width="5.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="382.7" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.50%)</title><rect x="379.7" y="659.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="382.7" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.25%)</title><rect x="385.6" y="723.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="388.6" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.25%)</title><rect x="385.6" y="707.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="388.6" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.25%)</title><rect x="385.6" y="691.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="388.6" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.25%)</title><rect x="385.6" y="675.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="388.6" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.25%)</title><rect x="385.6" y="659.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="388.6" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (7 samples, 1.75%)</title><rect x="388.5" y="723.0" width="20.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="391.5" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 1.50%)</title><rect x="391.5" y="707.0" width="17.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="394.5" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 1.25%)</title><rect x="394.5" y="691.0" width="14.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="397.5" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 0.75%)</title><rect x="397.4" y="675.0" width="8.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="400.4" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.50%)</title><rect x="400.4" y="659.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="403.4" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.50%)</title><rect x="400.4" y="643.0" width="5.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="403.4" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.50%)</title><rect x="400.4" y="627.0" width="5.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="403.4" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.25%)</title><rect x="403.3" y="611.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="406.3" y="622.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.25%)</title><rect x="406.3" y="675.0" width="2.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="409.3" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (82 samples, 20.55%)</title><rect x="409.2" y="787.0" width="242.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="412.2" y="798.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (82 samples, 20.55%)</title><rect x="409.2" y="771.0" width="242.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="412.2" y="782.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1487619603.process (71 samples, 17.79%)</title><rect x="418.1" y="755.0" width="210.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="421.1" y="766.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (71 samples, 17.79%)</title><rect x="418.1" y="739.0" width="210.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="421.1" y="750.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (70 samples, 17.54%)</title><rect x="421.1" y="723.0" width="207.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="424.1" y="734.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.25%)</title><rect x="424.0" y="707.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="427.0" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (1 samples, 0.25%)</title><rect x="424.0" y="691.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="427.0" y="702.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.25%)</title><rect x="424.0" y="675.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="427.0" y="686.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.25%)</title><rect x="424.0" y="659.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="427.0" y="670.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.25%)</title><rect x="424.0" y="643.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="427.0" y="654.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.25%)</title><rect x="424.0" y="627.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="427.0" y="638.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.25%)</title><rect x="424.0" y="611.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="427.0" y="622.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.25%)</title><rect x="424.0" y="595.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="427.0" y="606.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.25%)</title><rect x="424.0" y="579.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="427.0" y="590.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 1.00%)</title><rect x="427.0" y="707.0" width="11.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="430.0" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 1.00%)</title><rect x="427.0" y="691.0" width="11.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="430.0" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (4 samples, 1.00%)</title><rect x="427.0" y="675.0" width="11.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="430.0" y="686.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.75%)</title><rect x="429.9" y="659.0" width="8.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="432.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.25%)</title><rect x="435.9" y="643.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="438.9" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (64 samples, 16.04%)</title><rect x="438.8" y="707.0" width="189.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="441.8" y="718.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>java/lang/Thread.sleep (62 samples, 15.54%)</title><rect x="444.7" y="691.0" width="183.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="447.7" y="702.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (55 samples, 13.78%)</title><rect x="456.6" y="675.0" width="162.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="459.6" y="686.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 1.00%)</title><rect x="474.3" y="659.0" width="11.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="477.3" y="670.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.25%)</title><rect x="486.1" y="659.0" width="3.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="489.1" y="670.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.75%)</title><rect x="489.1" y="659.0" width="8.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="492.1" y="670.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.25%)</title><rect x="495.0" y="643.0" width="3.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="498.0" y="654.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.25%)</title><rect x="498.0" y="659.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="501.0" y="670.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.25%)</title><rect x="500.9" y="659.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="503.9" y="670.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (39 samples, 9.77%)</title><rect x="503.9" y="659.0" width="115.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="506.9" y="670.0">os::sleep(Thre..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.25%)</title><rect x="527.5" y="643.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="530.5" y="654.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.50%)</title><rect x="530.5" y="643.0" width="5.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="533.5" y="654.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.50%)</title><rect x="530.5" y="627.0" width="5.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="533.5" y="638.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 1.25%)</title><rect x="536.4" y="643.0" width="14.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="539.4" y="654.0"></text>
</g>
<g>
<title>__pthread_cond_init (3 samples, 0.75%)</title><rect x="551.2" y="643.0" width="8.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="554.2" y="654.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (12 samples, 3.01%)</title><rect x="560.1" y="643.0" width="35.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="563.1" y="654.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.50%)</title><rect x="595.6" y="643.0" width="5.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="598.6" y="654.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 1.00%)</title><rect x="601.5" y="643.0" width="11.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="604.5" y="654.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.25%)</title><rect x="613.3" y="643.0" width="3.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="616.3" y="654.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.25%)</title><rect x="616.3" y="643.0" width="2.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="619.3" y="654.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.25%)</title><rect x="619.2" y="675.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="622.2" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.25%)</title><rect x="622.2" y="675.0" width="2.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="625.2" y="686.0"></text>
</g>
<g>
<title>__vsnprintf (1 samples, 0.25%)</title><rect x="622.2" y="659.0" width="2.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="625.2" y="670.0"></text>
</g>
<g>
<title>vfprintf (1 samples, 0.25%)</title><rect x="622.2" y="643.0" width="2.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="625.2" y="654.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.25%)</title><rect x="625.1" y="675.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="628.1" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (2 samples, 0.50%)</title><rect x="628.1" y="755.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="631.1" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.75%)</title><rect x="634.0" y="755.0" width="8.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="637.0" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.75%)</title><rect x="634.0" y="739.0" width="8.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="637.0" y="750.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.50%)</title><rect x="634.0" y="723.0" width="5.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="637.0" y="734.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.25%)</title><rect x="639.9" y="723.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="642.9" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.25%)</title><rect x="642.9" y="755.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="645.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (2 samples, 0.50%)</title><rect x="645.8" y="755.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="648.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (19 samples, 4.76%)</title><rect x="651.8" y="787.0" width="56.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="654.8" y="798.0">java/u..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.25%)</title><rect x="687.2" y="771.0" width="3.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="690.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.75%)</title><rect x="690.2" y="771.0" width="8.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="693.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.75%)</title><rect x="690.2" y="755.0" width="8.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="693.2" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$277/1537593225.accept (1 samples, 0.25%)</title><rect x="690.2" y="739.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="693.2" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.25%)</title><rect x="690.2" y="723.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="693.2" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.25%)</title><rect x="690.2" y="707.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="693.2" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.25%)</title><rect x="690.2" y="691.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="693.2" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.25%)</title><rect x="690.2" y="675.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="693.2" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$280/449706151.accept (2 samples, 0.50%)</title><rect x="693.2" y="739.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="696.2" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$45 (2 samples, 0.50%)</title><rect x="693.2" y="723.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="696.2" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$270/2008464153.complete (2 samples, 0.50%)</title><rect x="693.2" y="707.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="696.2" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$5 (2 samples, 0.50%)</title><rect x="693.2" y="691.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="696.2" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$268/1129741739.complete (2 samples, 0.50%)</title><rect x="693.2" y="675.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="696.2" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (2 samples, 0.50%)</title><rect x="693.2" y="659.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="696.2" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (2 samples, 0.50%)</title><rect x="693.2" y="643.0" width="5.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="696.2" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 0.50%)</title><rect x="693.2" y="627.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="696.2" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 0.50%)</title><rect x="693.2" y="611.0" width="5.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="696.2" y="622.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (3 samples, 0.75%)</title><rect x="699.1" y="771.0" width="8.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="702.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (16 samples, 4.01%)</title><rect x="707.9" y="803.0" width="47.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="710.9" y="814.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (9 samples, 2.26%)</title><rect x="728.6" y="787.0" width="26.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="731.6" y="798.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 2.26%)</title><rect x="728.6" y="771.0" width="26.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="731.6" y="782.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$280/449706151.accept (9 samples, 2.26%)</title><rect x="728.6" y="755.0" width="26.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="731.6" y="766.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$45 (9 samples, 2.26%)</title><rect x="728.6" y="739.0" width="26.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="731.6" y="750.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$270/2008464153.complete (9 samples, 2.26%)</title><rect x="728.6" y="723.0" width="26.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="731.6" y="734.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$5 (9 samples, 2.26%)</title><rect x="728.6" y="707.0" width="26.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="731.6" y="718.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$268/1129741739.complete (9 samples, 2.26%)</title><rect x="728.6" y="691.0" width="26.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="731.6" y="702.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (9 samples, 2.26%)</title><rect x="728.6" y="675.0" width="26.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="731.6" y="686.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (9 samples, 2.26%)</title><rect x="728.6" y="659.0" width="26.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="731.6" y="670.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (9 samples, 2.26%)</title><rect x="728.6" y="643.0" width="26.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="731.6" y="654.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (9 samples, 2.26%)</title><rect x="728.6" y="627.0" width="26.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="731.6" y="638.0">c..</text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.50%)</title><rect x="755.3" y="803.0" width="5.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="758.3" y="814.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.50%)</title><rect x="755.3" y="787.0" width="5.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="758.3" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.25%)</title><rect x="761.2" y="819.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="764.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.25%)</title><rect x="761.2" y="803.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="764.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (8 samples, 2.01%)</title><rect x="764.1" y="867.0" width="23.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="767.1" y="878.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 2.01%)</title><rect x="764.1" y="851.0" width="23.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="767.1" y="862.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 2.01%)</title><rect x="764.1" y="835.0" width="23.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="767.1" y="846.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 2.01%)</title><rect x="764.1" y="819.0" width="23.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="767.1" y="830.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (8 samples, 2.01%)</title><rect x="787.8" y="867.0" width="23.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="790.8" y="878.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (7 samples, 1.75%)</title><rect x="790.8" y="851.0" width="20.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="793.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (4 samples, 1.00%)</title><rect x="790.8" y="835.0" width="11.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="793.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (4 samples, 1.00%)</title><rect x="790.8" y="819.0" width="11.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="793.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.00%)</title><rect x="790.8" y="803.0" width="11.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="793.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.00%)</title><rect x="790.8" y="787.0" width="11.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="793.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.00%)</title><rect x="790.8" y="771.0" width="11.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="793.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.75%)</title><rect x="802.6" y="835.0" width="8.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="805.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.75%)</title><rect x="802.6" y="819.0" width="8.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="805.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.75%)</title><rect x="802.6" y="803.0" width="8.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="805.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.75%)</title><rect x="802.6" y="787.0" width="8.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="805.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.25%)</title><rect x="811.5" y="915.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="814.5" y="926.0"></text>
</g>
<g>
<title>start_thread (127 samples, 31.83%)</title><rect x="814.4" y="915.0" width="375.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="817.4" y="926.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (127 samples, 31.83%)</title><rect x="814.4" y="899.0" width="375.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="817.4" y="910.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (33 samples, 8.27%)</title><rect x="814.4" y="883.0" width="97.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="817.4" y="894.0">GangWorker:..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (5 samples, 1.25%)</title><rect x="814.4" y="867.0" width="14.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="817.4" y="878.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 1.25%)</title><rect x="814.4" y="851.0" width="14.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="817.4" y="862.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.50%)</title><rect x="814.4" y="835.0" width="5.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="817.4" y="846.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.75%)</title><rect x="820.3" y="835.0" width="8.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="823.3" y="846.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (28 samples, 7.02%)</title><rect x="829.2" y="867.0" width="82.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="832.2" y="878.0">G1ParTask..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (26 samples, 6.52%)</title><rect x="829.2" y="851.0" width="76.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="832.2" y="862.0">G1ParEva..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (19 samples, 4.76%)</title><rect x="829.2" y="835.0" width="56.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="832.2" y="846.0">G1ParS..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (10 samples, 2.51%)</title><rect x="846.9" y="819.0" width="29.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="849.9" y="830.0">G1..</text>
</g>
<g>
<title>G1ParGCAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, unsigned char) (1 samples, 0.25%)</title><rect x="855.8" y="803.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="858.8" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::par_allocate_during_gc(InCSetState, unsigned long, unsigned char) (1 samples, 0.25%)</title><rect x="855.8" y="787.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="858.8" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (6 samples, 1.50%)</title><rect x="858.8" y="803.0" width="17.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="861.8" y="814.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (3 samples, 0.75%)</title><rect x="876.5" y="819.0" width="8.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="879.5" y="830.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.25%)</title><rect x="885.4" y="835.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="888.4" y="846.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.50%)</title><rect x="888.3" y="835.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="891.3" y="846.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 1.00%)</title><rect x="894.3" y="835.0" width="11.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="897.3" y="846.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (2 samples, 0.50%)</title><rect x="906.1" y="851.0" width="5.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="909.1" y="862.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.50%)</title><rect x="906.1" y="835.0" width="5.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="909.1" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (2 samples, 0.50%)</title><rect x="906.1" y="819.0" width="5.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="909.1" y="830.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (2 samples, 0.50%)</title><rect x="906.1" y="803.0" width="5.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="909.1" y="814.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.25%)</title><rect x="909.0" y="787.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="912.0" y="798.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.25%)</title><rect x="909.0" y="771.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="912.0" y="782.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.25%)</title><rect x="909.0" y="755.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="912.0" y="766.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.25%)</title><rect x="909.0" y="739.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="912.0" y="750.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.25%)</title><rect x="909.0" y="723.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="912.0" y="734.0"></text>
</g>
<g>
<title>JavaThread::run() (93 samples, 23.31%)</title><rect x="912.0" y="883.0" width="275.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="915.0" y="894.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (93 samples, 23.31%)</title><rect x="912.0" y="867.0" width="275.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="915.0" y="878.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (93 samples, 23.31%)</title><rect x="912.0" y="851.0" width="275.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="915.0" y="862.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (92 samples, 23.06%)</title><rect x="912.0" y="835.0" width="272.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="915.0" y="846.0">CompileBroker::invoke_compiler_on_me..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (89 samples, 22.31%)</title><rect x="912.0" y="819.0" width="263.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="915.0" y="830.0">C2Compiler::compile_method(ciEnv*, ..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (89 samples, 22.31%)</title><rect x="912.0" y="803.0" width="263.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="915.0" y="814.0">Compile::Compile(ciEnv*, C2Compiler..</text>
</g>
<g>
<title>Compile::Code_Gen() (34 samples, 8.52%)</title><rect x="912.0" y="787.0" width="100.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="915.0" y="798.0">Compile::Cod..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.25%)</title><rect x="912.0" y="771.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="915.0" y="782.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.25%)</title><rect x="912.0" y="755.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="915.0" y="766.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.25%)</title><rect x="912.0" y="739.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="915.0" y="750.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.25%)</title><rect x="912.0" y="723.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="915.0" y="734.0"></text>
</g>
<g>
<title>andL_rReg_immNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.25%)</title><rect x="912.0" y="707.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="915.0" y="718.0"></text>
</g>
<g>
<title>MachOper::reg(PhaseRegAlloc*, Node const*, int) const (1 samples, 0.25%)</title><rect x="912.0" y="691.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="915.0" y="702.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.50%)</title><rect x="915.0" y="771.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="918.0" y="782.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.25%)</title><rect x="917.9" y="755.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="920.9" y="766.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.25%)</title><rect x="917.9" y="739.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="920.9" y="750.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.50%)</title><rect x="920.9" y="771.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="923.9" y="782.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.50%)</title><rect x="920.9" y="755.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="923.9" y="766.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.25%)</title><rect x="920.9" y="739.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="923.9" y="750.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.25%)</title><rect x="923.8" y="739.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="926.8" y="750.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.25%)</title><rect x="923.8" y="723.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="926.8" y="734.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.25%)</title><rect x="923.8" y="707.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="926.8" y="718.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.25%)</title><rect x="923.8" y="691.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="926.8" y="702.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.25%)</title><rect x="923.8" y="675.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="926.8" y="686.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.25%)</title><rect x="926.8" y="771.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="929.8" y="782.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.25%)</title><rect x="926.8" y="755.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="929.8" y="766.0"></text>
</g>
<g>
<title>MachNode::Opcode() const (1 samples, 0.25%)</title><rect x="926.8" y="739.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="929.8" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.50%)</title><rect x="929.7" y="771.0" width="6.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="932.7" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.50%)</title><rect x="929.7" y="755.0" width="6.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="932.7" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.25%)</title><rect x="929.7" y="739.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="932.7" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.25%)</title><rect x="929.7" y="723.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="932.7" y="734.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.25%)</title><rect x="929.7" y="707.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="932.7" y="718.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.25%)</title><rect x="929.7" y="691.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="932.7" y="702.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.25%)</title><rect x="929.7" y="675.0" width="3.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="932.7" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.25%)</title><rect x="932.7" y="739.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="935.7" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.25%)</title><rect x="932.7" y="723.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="935.7" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (26 samples, 6.52%)</title><rect x="935.7" y="771.0" width="76.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="938.7" y="782.0">PhaseCha..</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.25%)</title><rect x="938.6" y="755.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="941.6" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.25%)</title><rect x="941.6" y="755.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="944.6" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.25%)</title><rect x="941.6" y="739.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="944.6" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 1.00%)</title><rect x="944.5" y="755.0" width="11.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="947.5" y="766.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.25%)</title><rect x="953.4" y="739.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="956.4" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 1.25%)</title><rect x="956.4" y="755.0" width="14.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="959.4" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.25%)</title><rect x="959.3" y="739.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="962.3" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.50%)</title><rect x="962.3" y="739.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="965.3" y="750.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.25%)</title><rect x="965.2" y="723.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="968.2" y="734.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.25%)</title><rect x="968.2" y="739.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="971.2" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.50%)</title><rect x="971.2" y="755.0" width="5.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="974.2" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.25%)</title><rect x="974.1" y="739.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="977.1" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.50%)</title><rect x="977.1" y="755.0" width="5.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="980.1" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.50%)</title><rect x="983.0" y="755.0" width="5.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="986.0" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.25%)</title><rect x="985.9" y="739.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="988.9" y="750.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.25%)</title><rect x="988.9" y="755.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="991.9" y="766.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.25%)</title><rect x="988.9" y="739.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="991.9" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.25%)</title><rect x="988.9" y="723.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="991.9" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.25%)</title><rect x="991.9" y="755.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="994.9" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.25%)</title><rect x="991.9" y="739.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="994.9" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.25%)</title><rect x="994.8" y="755.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="997.8" y="766.0"></text>
</g>
<g>
<title>_init (1 samples, 0.25%)</title><rect x="994.8" y="739.0" width="3.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="997.8" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.25%)</title><rect x="997.8" y="755.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1000.8" y="766.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.25%)</title><rect x="997.8" y="739.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1000.8" y="750.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 1.00%)</title><rect x="1000.7" y="755.0" width="11.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1003.7" y="766.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.25%)</title><rect x="1009.6" y="739.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1012.6" y="750.0"></text>
</g>
<g>
<title>Compile::Optimize() (49 samples, 12.28%)</title><rect x="1012.6" y="787.0" width="144.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1015.6" y="798.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.25%)</title><rect x="1012.6" y="771.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1015.6" y="782.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.25%)</title><rect x="1012.6" y="755.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1015.6" y="766.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.25%)</title><rect x="1015.5" y="771.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1018.5" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (41 samples, 10.28%)</title><rect x="1018.5" y="771.0" width="121.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1021.5" y="782.0">PhaseIdealLoop:..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (37 samples, 9.27%)</title><rect x="1018.5" y="755.0" width="109.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1021.5" y="766.0">PhaseIdealLoo..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (37 samples, 9.27%)</title><rect x="1018.5" y="739.0" width="109.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1021.5" y="750.0">PhaseIdealLoo..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (5 samples, 1.25%)</title><rect x="1024.4" y="723.0" width="14.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1027.4" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (30 samples, 7.52%)</title><rect x="1039.2" y="723.0" width="88.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1042.2" y="734.0">PhaseIdeal..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (6 samples, 1.50%)</title><rect x="1110.2" y="707.0" width="17.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1113.2" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.50%)</title><rect x="1127.9" y="755.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.9" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (2 samples, 0.50%)</title><rect x="1127.9" y="739.0" width="5.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1130.9" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.50%)</title><rect x="1133.8" y="755.0" width="5.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.8" y="766.0"></text>
</g>
<g>
<title>IfTrueNode::Opcode() const (1 samples, 0.25%)</title><rect x="1136.8" y="739.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1139.8" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 1.25%)</title><rect x="1139.7" y="771.0" width="14.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.7" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 1.00%)</title><rect x="1142.7" y="755.0" width="11.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.7" y="766.0"></text>
</g>
<g>
<title>AddNode::Identity(PhaseTransform*) (1 samples, 0.25%)</title><rect x="1142.7" y="739.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.7" y="750.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.25%)</title><rect x="1142.7" y="723.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1145.7" y="734.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.25%)</title><rect x="1142.7" y="707.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.7" y="718.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.25%)</title><rect x="1142.7" y="691.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.7" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.50%)</title><rect x="1145.6" y="739.0" width="6.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.6" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.25%)</title><rect x="1148.6" y="723.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.6" y="734.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.25%)</title><rect x="1148.6" y="707.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1151.6" y="718.0"></text>
</g>
<g>
<title>URShiftLNode::Value(PhaseTransform*) const (1 samples, 0.25%)</title><rect x="1151.6" y="739.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.6" y="750.0"></text>
</g>
<g>
<title>TypeLong::make(long, long, int) (1 samples, 0.25%)</title><rect x="1151.6" y="723.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.6" y="734.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.25%)</title><rect x="1151.6" y="707.0" width="2.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1154.6" y="718.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.25%)</title><rect x="1154.5" y="771.0" width="3.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1157.5" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.00%)</title><rect x="1157.5" y="787.0" width="11.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.5" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.00%)</title><rect x="1157.5" y="771.0" width="11.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.00%)</title><rect x="1157.5" y="755.0" width="11.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.00%)</title><rect x="1157.5" y="739.0" width="11.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.00%)</title><rect x="1157.5" y="723.0" width="11.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.00%)</title><rect x="1157.5" y="707.0" width="11.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.5" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.00%)</title><rect x="1157.5" y="691.0" width="11.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.5" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.00%)</title><rect x="1157.5" y="675.0" width="11.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.5" y="686.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.25%)</title><rect x="1157.5" y="659.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.5" y="670.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.25%)</title><rect x="1157.5" y="643.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.5" y="654.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.25%)</title><rect x="1157.5" y="627.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.5" y="638.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.25%)</title><rect x="1157.5" y="611.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.75%)</title><rect x="1160.4" y="659.0" width="8.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.75%)</title><rect x="1160.4" y="643.0" width="8.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.75%)</title><rect x="1160.4" y="627.0" width="8.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.75%)</title><rect x="1160.4" y="611.0" width="8.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.4" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.50%)</title><rect x="1160.4" y="595.0" width="5.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.4" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.50%)</title><rect x="1160.4" y="579.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.50%)</title><rect x="1160.4" y="563.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.50%)</title><rect x="1160.4" y="547.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.50%)</title><rect x="1160.4" y="531.0" width="5.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.50%)</title><rect x="1160.4" y="515.0" width="5.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.4" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.50%)</title><rect x="1160.4" y="499.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.4" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.50%)</title><rect x="1160.4" y="483.0" width="5.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.50%)</title><rect x="1160.4" y="467.0" width="5.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.50%)</title><rect x="1160.4" y="451.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.50%)</title><rect x="1160.4" y="435.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.50%)</title><rect x="1160.4" y="419.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.4" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.50%)</title><rect x="1160.4" y="403.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.4" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.50%)</title><rect x="1160.4" y="387.0" width="5.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1163.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.50%)</title><rect x="1160.4" y="371.0" width="5.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.50%)</title><rect x="1160.4" y="355.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.50%)</title><rect x="1160.4" y="339.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.25%)</title><rect x="1160.4" y="323.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.4" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1160.4" y="307.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.4" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1160.4" y="291.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1160.4" y="275.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1160.4" y="259.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1160.4" y="243.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.4" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.25%)</title><rect x="1160.4" y="227.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.4" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1160.4" y="211.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.4" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1160.4" y="195.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1160.4" y="179.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.4" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1160.4" y="163.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.4" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1160.4" y="147.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.4" y="158.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.25%)</title><rect x="1160.4" y="131.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.4" y="142.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.25%)</title><rect x="1160.4" y="115.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.4" y="126.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.25%)</title><rect x="1160.4" y="99.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.4" y="110.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.25%)</title><rect x="1160.4" y="83.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.4" y="94.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.25%)</title><rect x="1160.4" y="67.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.4" y="78.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.25%)</title><rect x="1160.4" y="51.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.4" y="62.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.25%)</title><rect x="1160.4" y="35.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.4" y="46.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.25%)</title><rect x="1163.4" y="323.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.4" y="334.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.25%)</title><rect x="1163.4" y="307.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.4" y="318.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.25%)</title><rect x="1163.4" y="291.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.4" y="302.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.25%)</title><rect x="1163.4" y="275.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.4" y="286.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.25%)</title><rect x="1163.4" y="259.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.4" y="270.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.25%)</title><rect x="1163.4" y="243.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.4" y="254.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.25%)</title><rect x="1163.4" y="227.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.4" y="238.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.25%)</title><rect x="1163.4" y="211.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.4" y="222.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1166.3" y="595.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.3" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1166.3" y="579.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.3" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1166.3" y="563.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1166.3" y="547.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1166.3" y="531.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1166.3" y="515.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.25%)</title><rect x="1166.3" y="499.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.3" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1166.3" y="483.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.3" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1166.3" y="467.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1166.3" y="451.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1166.3" y="435.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1166.3" y="419.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.25%)</title><rect x="1166.3" y="403.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.3" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1166.3" y="387.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.3" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1166.3" y="371.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1166.3" y="355.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1166.3" y="339.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1166.3" y="323.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.25%)</title><rect x="1166.3" y="307.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.3" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1166.3" y="291.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.3" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1166.3" y="275.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1166.3" y="259.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1166.3" y="243.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1166.3" y="227.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.25%)</title><rect x="1166.3" y="211.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.3" y="222.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.25%)</title><rect x="1166.3" y="195.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.3" y="206.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.25%)</title><rect x="1166.3" y="179.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.3" y="190.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.25%)</title><rect x="1166.3" y="163.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.3" y="174.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.25%)</title><rect x="1166.3" y="147.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.3" y="158.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.25%)</title><rect x="1166.3" y="131.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.3" y="142.0"></text>
</g>
<g>
<title>is_init_with_ea(ciMethod*, ciMethod*, Compile*) (1 samples, 0.25%)</title><rect x="1166.3" y="115.0" width="3.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1169.3" y="126.0"></text>
</g>
<g>
<title>Method::is_initializer() const (1 samples, 0.25%)</title><rect x="1166.3" y="99.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.3" y="110.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.25%)</title><rect x="1169.3" y="787.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.3" y="798.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.25%)</title><rect x="1169.3" y="771.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.3" y="782.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (1 samples, 0.25%)</title><rect x="1172.3" y="787.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.3" y="798.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.25%)</title><rect x="1172.3" y="771.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.3" y="782.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.50%)</title><rect x="1175.2" y="819.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.2" y="830.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.50%)</title><rect x="1175.2" y="803.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.2" y="814.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.50%)</title><rect x="1175.2" y="787.0" width="5.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.2" y="798.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.50%)</title><rect x="1175.2" y="771.0" width="5.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.2" y="782.0"></text>
</g>
<g>
<title>AbstractAssembler::AbstractAssembler(CodeBuffer*) (1 samples, 0.25%)</title><rect x="1175.2" y="755.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.2" y="766.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.25%)</title><rect x="1178.2" y="755.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.2" y="766.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.25%)</title><rect x="1178.2" y="739.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.2" y="750.0"></text>
</g>
<g>
<title>LinearScan::eliminate_spill_moves() (1 samples, 0.25%)</title><rect x="1178.2" y="723.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.2" y="734.0"></text>
</g>
<g>
<title>ciEnv::~ciEnv() (1 samples, 0.25%)</title><rect x="1181.1" y="819.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.1" y="830.0"></text>
</g>
<g>
<title>Symbol::decrement_refcount() (1 samples, 0.25%)</title><rect x="1181.1" y="803.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.1" y="814.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.25%)</title><rect x="1184.1" y="835.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.1" y="846.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.25%)</title><rect x="1184.1" y="819.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.1" y="830.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.25%)</title><rect x="1184.1" y="803.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.1" y="814.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.25%)</title><rect x="1184.1" y="787.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.1" y="798.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.25%)</title><rect x="1187.0" y="883.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.0" y="894.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.25%)</title><rect x="1187.0" y="867.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.0" y="878.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.25%)</title><rect x="1187.0" y="851.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.0" y="862.0"></text>
</g>
</g>
</svg>
