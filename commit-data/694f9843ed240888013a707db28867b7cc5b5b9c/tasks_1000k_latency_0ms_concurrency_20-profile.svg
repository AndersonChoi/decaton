<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (1,140 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="10.0" y="883.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>__vsnprintf (1 samples, 0.09%)</title><rect x="10.0" y="867.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>/usr/lib64/libc-2.17.so (1 samples, 0.09%)</title><rect x="10.0" y="851.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (290 samples, 25.44%)</title><rect x="11.0" y="883.0" width="300.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.0" y="894.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.09%)</title><rect x="11.0" y="867.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.0" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (289 samples, 25.35%)</title><rect x="12.1" y="867.0" width="299.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.1" y="878.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (5 samples, 0.44%)</title><rect x="12.1" y="851.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.1" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (5 samples, 0.44%)</title><rect x="12.1" y="835.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.1" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1701397689.accept (5 samples, 0.44%)</title><rect x="12.1" y="819.0" width="5.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.1" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (5 samples, 0.44%)</title><rect x="12.1" y="803.0" width="5.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.1" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (5 samples, 0.44%)</title><rect x="12.1" y="787.0" width="5.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.1" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (5 samples, 0.44%)</title><rect x="12.1" y="771.0" width="5.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.1" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (4 samples, 0.35%)</title><rect x="17.2" y="851.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.2" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (4 samples, 0.35%)</title><rect x="17.2" y="835.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="20.2" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.35%)</title><rect x="17.2" y="819.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.2" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.35%)</title><rect x="17.2" y="803.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.2" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (4 samples, 0.35%)</title><rect x="17.2" y="787.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.2" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (4 samples, 0.35%)</title><rect x="17.2" y="771.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.2" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (4 samples, 0.35%)</title><rect x="17.2" y="755.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.2" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.18%)</title><rect x="17.2" y="739.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="20.2" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.18%)</title><rect x="17.2" y="723.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.2" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="17.2" y="707.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.2" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$265/1507312608.test (1 samples, 0.09%)</title><rect x="17.2" y="691.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.2" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="18.3" y="707.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.3" y="718.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (2 samples, 0.18%)</title><rect x="19.3" y="739.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="22.3" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.estimateSize (1 samples, 0.09%)</title><rect x="20.4" y="723.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.4" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (2 samples, 0.18%)</title><rect x="21.4" y="851.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="24.4" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (2 samples, 0.18%)</title><rect x="21.4" y="835.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="24.4" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="22.4" y="819.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.4" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="22.4" y="803.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.4" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="22.4" y="787.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="25.4" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="22.4" y="771.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.4" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="22.4" y="755.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.4" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="22.4" y="739.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.4" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="22.4" y="723.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.4" y="734.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (208 samples, 18.25%)</title><rect x="23.5" y="851.0" width="215.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="26.5" y="862.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1194234896.accept (203 samples, 17.81%)</title><rect x="23.5" y="835.0" width="210.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.5" y="846.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$72 (203 samples, 17.81%)</title><rect x="23.5" y="819.0" width="210.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.5" y="830.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (162 samples, 14.21%)</title><rect x="24.5" y="803.0" width="167.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="27.5" y="814.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (162 samples, 14.21%)</title><rect x="24.5" y="787.0" width="167.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.5" y="798.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (162 samples, 14.21%)</title><rect x="24.5" y="771.0" width="167.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="27.5" y="782.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (162 samples, 14.21%)</title><rect x="24.5" y="755.0" width="167.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="27.5" y="766.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (162 samples, 14.21%)</title><rect x="24.5" y="739.0" width="167.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="27.5" y="750.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (162 samples, 14.21%)</title><rect x="24.5" y="723.0" width="167.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.5" y="734.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (116 samples, 10.18%)</title><rect x="69.0" y="707.0" width="120.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="72.0" y="718.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (29 samples, 2.54%)</title><rect x="70.0" y="691.0" width="30.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="73.0" y="702.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (29 samples, 2.54%)</title><rect x="70.0" y="675.0" width="30.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="73.0" y="686.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (29 samples, 2.54%)</title><rect x="70.0" y="659.0" width="30.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="73.0" y="670.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.70%)</title><rect x="100.1" y="691.0" width="8.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="103.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (8 samples, 0.70%)</title><rect x="100.1" y="675.0" width="8.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="103.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.18%)</title><rect x="103.2" y="659.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="106.2" y="670.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.09%)</title><rect x="104.2" y="643.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="107.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.18%)</title><rect x="105.2" y="659.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="108.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.09%)</title><rect x="107.3" y="659.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="110.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (78 samples, 6.84%)</title><rect x="108.3" y="691.0" width="80.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="111.3" y="702.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (78 samples, 6.84%)</title><rect x="108.3" y="675.0" width="80.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="111.3" y="686.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (76 samples, 6.67%)</title><rect x="108.3" y="659.0" width="78.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="111.3" y="670.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (76 samples, 6.67%)</title><rect x="108.3" y="643.0" width="78.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="111.3" y="654.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (75 samples, 6.58%)</title><rect x="109.4" y="627.0" width="77.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="112.4" y="638.0">sun/misc/..</text>
</g>
<g>
<title>Unsafe_Unpark (68 samples, 5.96%)</title><rect x="110.4" y="611.0" width="70.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="113.4" y="622.0">Unsafe_U..</text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.18%)</title><rect x="112.5" y="595.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="115.5" y="606.0"></text>
</g>
<g>
<title>__pthread_cond_signal (41 samples, 3.60%)</title><rect x="114.5" y="595.0" width="42.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="117.5" y="606.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (10 samples, 0.88%)</title><rect x="157.0" y="595.0" width="10.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="160.0" y="606.0"></text>
</g>
<g>
<title>pthread_mutex_lock (13 samples, 1.14%)</title><rect x="167.3" y="595.0" width="13.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="170.3" y="606.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.26%)</title><rect x="180.8" y="611.0" width="3.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="183.8" y="622.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.18%)</title><rect x="183.9" y="611.0" width="2.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="186.9" y="622.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.09%)</title><rect x="186.0" y="611.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="189.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.18%)</title><rect x="187.0" y="659.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="190.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.18%)</title><rect x="189.1" y="707.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="192.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.18%)</title><rect x="189.1" y="691.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="192.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="189.1" y="675.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="192.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.09%)</title><rect x="190.1" y="675.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="193.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.09%)</title><rect x="190.1" y="659.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="193.1" y="670.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="191.1" y="707.0" width="1.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="194.1" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (4 samples, 0.35%)</title><rect x="192.2" y="803.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="195.2" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (4 samples, 0.35%)</title><rect x="192.2" y="787.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="195.2" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (3 samples, 0.26%)</title><rect x="196.3" y="803.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="199.3" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.26%)</title><rect x="196.3" y="787.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="199.3" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.26%)</title><rect x="196.3" y="771.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="199.3" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (33 samples, 2.89%)</title><rect x="199.4" y="803.0" width="34.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="202.4" y="814.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="199.4" y="787.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="202.4" y="798.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="199.4" y="771.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="202.4" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="199.4" y="755.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="202.4" y="766.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (32 samples, 2.81%)</title><rect x="200.5" y="787.0" width="33.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="203.5" y="798.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (10 samples, 0.88%)</title><rect x="221.2" y="771.0" width="10.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="224.2" y="782.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (6 samples, 0.53%)</title><rect x="221.2" y="755.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="224.2" y="766.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (6 samples, 0.53%)</title><rect x="221.2" y="739.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="224.2" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 0.53%)</title><rect x="221.2" y="723.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="224.2" y="734.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="226.3" y="707.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="229.3" y="718.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.18%)</title><rect x="227.4" y="755.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="230.4" y="766.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.18%)</title><rect x="229.4" y="755.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="232.4" y="766.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.18%)</title><rect x="231.5" y="771.0" width="2.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="234.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.09%)</title><rect x="233.6" y="835.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="236.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.09%)</title><rect x="233.6" y="819.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="236.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="233.6" y="803.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.6" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.values (1 samples, 0.09%)</title><rect x="233.6" y="787.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="236.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.35%)</title><rect x="234.6" y="835.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="237.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.35%)</title><rect x="234.6" y="819.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="237.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.35%)</title><rect x="234.6" y="803.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="237.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.35%)</title><rect x="234.6" y="787.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="237.6" y="798.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (4 samples, 0.35%)</title><rect x="234.6" y="771.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="237.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (70 samples, 6.14%)</title><rect x="238.8" y="851.0" width="72.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="241.8" y="862.0">org/apac..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="238.8" y="835.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="241.8" y="846.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="238.8" y="819.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="241.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (69 samples, 6.05%)</title><rect x="239.8" y="835.0" width="71.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="242.8" y="846.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (45 samples, 3.95%)</title><rect x="240.8" y="819.0" width="46.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="243.8" y="830.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (2 samples, 0.18%)</title><rect x="240.8" y="803.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="243.8" y="814.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 0.09%)</title><rect x="240.8" y="787.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="243.8" y="798.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.09%)</title><rect x="240.8" y="771.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="243.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.09%)</title><rect x="241.9" y="787.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="244.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.09%)</title><rect x="241.9" y="771.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="244.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.update (1 samples, 0.09%)</title><rect x="241.9" y="755.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="244.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (43 samples, 3.77%)</title><rect x="242.9" y="803.0" width="44.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="245.9" y="814.0">org/..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="242.9" y="787.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="245.9" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="242.9" y="771.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="245.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (42 samples, 3.68%)</title><rect x="243.9" y="787.0" width="43.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="246.9" y="798.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (36 samples, 3.16%)</title><rect x="245.0" y="771.0" width="37.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="248.0" y="782.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (36 samples, 3.16%)</title><rect x="245.0" y="755.0" width="37.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="248.0" y="766.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (18 samples, 1.58%)</title><rect x="248.1" y="739.0" width="18.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="251.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (8 samples, 0.70%)</title><rect x="258.4" y="723.0" width="8.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="261.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (8 samples, 0.70%)</title><rect x="258.4" y="707.0" width="8.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="261.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (8 samples, 0.70%)</title><rect x="258.4" y="691.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="261.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (8 samples, 0.70%)</title><rect x="258.4" y="675.0" width="8.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="261.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (8 samples, 0.70%)</title><rect x="258.4" y="659.0" width="8.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="261.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (8 samples, 0.70%)</title><rect x="258.4" y="643.0" width="8.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="261.4" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (7 samples, 0.61%)</title><rect x="259.5" y="627.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="262.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (15 samples, 1.32%)</title><rect x="266.7" y="739.0" width="15.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="269.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (15 samples, 1.32%)</title><rect x="266.7" y="723.0" width="15.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="269.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (8 samples, 0.70%)</title><rect x="266.7" y="707.0" width="8.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="269.7" y="718.0"></text>
</g>
<g>
<title>java/util/Optional.of (8 samples, 0.70%)</title><rect x="266.7" y="691.0" width="8.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="269.7" y="702.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.09%)</title><rect x="270.8" y="675.0" width="1.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="273.8" y="686.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.26%)</title><rect x="271.9" y="675.0" width="3.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="274.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (7 samples, 0.61%)</title><rect x="275.0" y="707.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="278.0" y="718.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (7 samples, 0.61%)</title><rect x="275.0" y="691.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="278.0" y="702.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="281.2" y="675.0" width="1.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="284.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.18%)</title><rect x="282.2" y="771.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="285.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.18%)</title><rect x="282.2" y="755.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="285.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="282.2" y="739.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="285.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="282.2" y="723.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="282.2" y="707.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="285.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="282.2" y="691.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="285.2" y="702.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="283.3" y="707.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="286.3" y="718.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="283.3" y="691.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="286.3" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.18%)</title><rect x="284.3" y="771.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="287.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.18%)</title><rect x="284.3" y="755.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="287.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (1 samples, 0.09%)</title><rect x="284.3" y="739.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="287.3" y="750.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="284.3" y="723.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="287.3" y="734.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="284.3" y="707.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="287.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="285.3" y="739.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="288.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="285.3" y="723.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="288.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.09%)</title><rect x="286.4" y="771.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="289.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (8 samples, 0.70%)</title><rect x="287.4" y="819.0" width="8.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="290.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (8 samples, 0.70%)</title><rect x="287.4" y="803.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="290.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (4 samples, 0.35%)</title><rect x="287.4" y="787.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="290.4" y="798.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.18%)</title><rect x="287.4" y="771.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="290.4" y="782.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="287.4" y="755.0" width="1.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="290.4" y="766.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.09%)</title><rect x="288.4" y="755.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="291.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.09%)</title><rect x="289.5" y="771.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="292.5" y="782.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.09%)</title><rect x="289.5" y="755.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="292.5" y="766.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.09%)</title><rect x="289.5" y="739.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="292.5" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (1 samples, 0.09%)</title><rect x="289.5" y="723.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="292.5" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="289.5" y="707.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="292.5" y="718.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeySet.size (1 samples, 0.09%)</title><rect x="289.5" y="691.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="292.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.09%)</title><rect x="290.5" y="771.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="293.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.09%)</title><rect x="290.5" y="755.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="293.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (4 samples, 0.35%)</title><rect x="291.5" y="787.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="294.5" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (4 samples, 0.35%)</title><rect x="291.5" y="771.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="294.5" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.35%)</title><rect x="291.5" y="755.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="294.5" y="766.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (4 samples, 0.35%)</title><rect x="291.5" y="739.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="294.5" y="750.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (4 samples, 0.35%)</title><rect x="291.5" y="723.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="294.5" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.18%)</title><rect x="292.6" y="707.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="295.6" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="292.6" y="691.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="295.6" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.09%)</title><rect x="292.6" y="675.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="295.6" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.09%)</title><rect x="292.6" y="659.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="295.6" y="670.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.09%)</title><rect x="292.6" y="643.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="295.6" y="654.0"></text>
</g>
<g>
<title>Interpreter (1 samples, 0.09%)</title><rect x="292.6" y="627.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="295.6" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.09%)</title><rect x="293.6" y="691.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="296.6" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.09%)</title><rect x="293.6" y="675.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="296.6" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="293.6" y="659.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="296.6" y="670.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.09%)</title><rect x="293.6" y="643.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="296.6" y="654.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$$Lambda$47/317071334.get (1 samples, 0.09%)</title><rect x="294.6" y="707.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="297.6" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.09%)</title><rect x="295.7" y="819.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="298.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.09%)</title><rect x="295.7" y="803.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="298.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValueIterator.next (1 samples, 0.09%)</title><rect x="295.7" y="787.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="298.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (8 samples, 0.70%)</title><rect x="296.7" y="819.0" width="8.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="299.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (8 samples, 0.70%)</title><rect x="296.7" y="803.0" width="8.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="299.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (8 samples, 0.70%)</title><rect x="296.7" y="787.0" width="8.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="299.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (7 samples, 0.61%)</title><rect x="296.7" y="771.0" width="7.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="299.7" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.18%)</title><rect x="296.7" y="755.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="299.7" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.18%)</title><rect x="296.7" y="739.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="299.7" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.18%)</title><rect x="296.7" y="723.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="299.7" y="734.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.18%)</title><rect x="296.7" y="707.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="299.7" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.09%)</title><rect x="297.8" y="691.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="300.8" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_humongous(unsigned long, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="297.8" y="675.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="300.8" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::humongous_obj_allocate(unsigned long, unsigned char) (1 samples, 0.09%)</title><rect x="297.8" y="659.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="300.8" y="670.0"></text>
</g>
<g>
<title>FreeRegionList::remove_starting_at(HeapRegion*, unsigned int) (1 samples, 0.09%)</title><rect x="297.8" y="643.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="300.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.maybeRegisterConnectionMetrics (1 samples, 0.09%)</title><rect x="298.8" y="755.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="301.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.09%)</title><rect x="298.8" y="739.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="301.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="298.8" y="723.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="301.8" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesSent (2 samples, 0.18%)</title><rect x="299.8" y="755.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="302.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (2 samples, 0.18%)</title><rect x="299.8" y="739.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="302.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.18%)</title><rect x="301.9" y="755.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="304.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.18%)</title><rect x="301.9" y="739.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="304.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.18%)</title><rect x="301.9" y="723.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="304.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.18%)</title><rect x="301.9" y="707.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="304.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.18%)</title><rect x="301.9" y="691.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="304.9" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.18%)</title><rect x="301.9" y="675.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="304.9" y="686.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.18%)</title><rect x="301.9" y="659.0" width="2.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="304.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.09%)</title><rect x="304.0" y="771.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="307.0" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.09%)</title><rect x="304.0" y="755.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="307.0" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.09%)</title><rect x="304.0" y="739.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="307.0" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.09%)</title><rect x="304.0" y="723.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="307.0" y="734.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (1 samples, 0.09%)</title><rect x="304.0" y="707.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="307.0" y="718.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.09%)</title><rect x="304.0" y="691.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="307.0" y="702.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.09%)</title><rect x="304.0" y="675.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="307.0" y="686.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.09%)</title><rect x="304.0" y="659.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="307.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (5 samples, 0.44%)</title><rect x="305.0" y="819.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="308.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (5 samples, 0.44%)</title><rect x="305.0" y="803.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="308.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.09%)</title><rect x="305.0" y="787.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="308.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.09%)</title><rect x="305.0" y="771.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="308.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="305.0" y="755.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="308.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="305.0" y="739.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="308.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.09%)</title><rect x="305.0" y="723.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="308.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (4 samples, 0.35%)</title><rect x="306.0" y="787.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="309.0" y="798.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="307.1" y="771.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="310.1" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="307.1" y="755.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="310.1" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="307.1" y="739.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="310.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 0.09%)</title><rect x="308.1" y="771.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="311.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.09%)</title><rect x="309.1" y="771.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="312.1" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="309.1" y="755.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="312.1" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="309.1" y="739.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="312.1" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="309.1" y="723.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="312.1" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="309.1" y="707.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="312.1" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="309.1" y="691.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="312.1" y="702.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="309.1" y="675.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="312.1" y="686.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.09%)</title><rect x="309.1" y="659.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="312.1" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="309.1" y="643.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="312.1" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$229/1185652503.apply (1 samples, 0.09%)</title><rect x="309.1" y="627.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="312.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.lambda$stream$0 (1 samples, 0.09%)</title><rect x="309.1" y="611.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="312.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.09%)</title><rect x="310.2" y="819.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="313.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="310.2" y="803.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="313.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="310.2" y="787.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="313.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="310.2" y="771.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="313.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="310.2" y="755.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="313.2" y="766.0"></text>
</g>
<g>
<title>java/lang/Thread.run (765 samples, 67.11%)</title><rect x="311.2" y="883.0" width="791.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="314.2" y="894.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (765 samples, 67.11%)</title><rect x="311.2" y="867.0" width="791.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="314.2" y="878.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (765 samples, 67.11%)</title><rect x="311.2" y="851.0" width="791.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="314.2" y="862.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/1000935494.run (528 samples, 46.32%)</title><rect x="315.4" y="835.0" width="546.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="318.4" y="846.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/1000935494...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (528 samples, 46.32%)</title><rect x="315.4" y="819.0" width="546.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="318.4" y="830.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (528 samples, 46.32%)</title><rect x="315.4" y="803.0" width="546.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="318.4" y="814.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (519 samples, 45.53%)</title><rect x="315.4" y="787.0" width="537.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="318.4" y="798.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (1 samples, 0.09%)</title><rect x="321.6" y="771.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="324.6" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.09%)</title><rect x="321.6" y="755.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="324.6" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$197/891391081.get (1 samples, 0.09%)</title><rect x="321.6" y="739.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="324.6" y="750.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.09%)</title><rect x="321.6" y="723.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="324.6" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="321.6" y="707.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="324.6" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="321.6" y="691.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="324.6" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="321.6" y="675.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="324.6" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (198 samples, 17.37%)</title><rect x="322.6" y="771.0" width="204.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="325.6" y="782.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (198 samples, 17.37%)</title><rect x="322.6" y="755.0" width="204.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="325.6" y="766.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (198 samples, 17.37%)</title><rect x="322.6" y="739.0" width="204.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="325.6" y="750.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (198 samples, 17.37%)</title><rect x="322.6" y="723.0" width="204.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="325.6" y="734.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (198 samples, 17.37%)</title><rect x="322.6" y="707.0" width="204.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="325.6" y="718.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (198 samples, 17.37%)</title><rect x="322.6" y="691.0" width="204.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="325.6" y="702.0">com/fasterxml/jackson/datab..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (73 samples, 6.40%)</title><rect x="322.6" y="675.0" width="75.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="325.6" y="686.0">com/fast..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.18%)</title><rect x="344.3" y="659.0" width="2.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="347.3" y="670.0"></text>
</g>
<g>
<title>__clock_gettime (12 samples, 1.05%)</title><rect x="346.4" y="659.0" width="12.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="349.4" y="670.0"></text>
</g>
<g>
<title>[vdso] (10 samples, 0.88%)</title><rect x="348.5" y="643.0" width="10.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="351.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (8 samples, 0.70%)</title><rect x="358.8" y="659.0" width="8.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="361.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (7 samples, 0.61%)</title><rect x="359.9" y="643.0" width="7.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="362.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (7 samples, 0.61%)</title><rect x="359.9" y="627.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="362.9" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.61%)</title><rect x="359.9" y="611.0" width="7.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="362.9" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (7 samples, 0.61%)</title><rect x="359.9" y="595.0" width="7.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="362.9" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (7 samples, 0.61%)</title><rect x="359.9" y="579.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="362.9" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (7 samples, 0.61%)</title><rect x="359.9" y="563.0" width="7.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="362.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (29 samples, 2.54%)</title><rect x="367.1" y="659.0" width="30.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="370.1" y="670.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (28 samples, 2.46%)</title><rect x="368.1" y="643.0" width="29.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="371.1" y="654.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (7 samples, 0.61%)</title><rect x="368.1" y="627.0" width="7.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="371.1" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="368.1" y="611.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="371.1" y="622.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="368.1" y="595.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="371.1" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="368.1" y="579.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="371.1" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="368.1" y="563.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="371.1" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="368.1" y="547.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="371.1" y="558.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="368.1" y="531.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="371.1" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.09%)</title><rect x="368.1" y="515.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="371.1" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.09%)</title><rect x="368.1" y="499.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="371.1" y="510.0"></text>
</g>
<g>
<title>MasterFreeRegionListMtSafeChecker::check() (1 samples, 0.09%)</title><rect x="368.1" y="483.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="371.1" y="494.0"></text>
</g>
<g>
<title>Monitor::owned_by_self() const (1 samples, 0.09%)</title><rect x="368.1" y="467.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="371.1" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (6 samples, 0.53%)</title><rect x="369.2" y="611.0" width="6.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="372.2" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (6 samples, 0.53%)</title><rect x="375.4" y="627.0" width="6.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="378.4" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.18%)</title><rect x="375.4" y="611.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="378.4" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.09%)</title><rect x="375.4" y="595.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="378.4" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="376.4" y="595.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="379.4" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="376.4" y="579.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="379.4" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="376.4" y="563.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="379.4" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="376.4" y="547.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="379.4" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (4 samples, 0.35%)</title><rect x="377.5" y="611.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="380.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (3 samples, 0.26%)</title><rect x="377.5" y="595.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="380.5" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.26%)</title><rect x="377.5" y="579.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="380.5" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.26%)</title><rect x="377.5" y="563.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="380.5" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (3 samples, 0.26%)</title><rect x="377.5" y="547.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="380.5" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="379.5" y="531.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="382.5" y="542.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.09%)</title><rect x="379.5" y="515.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="382.5" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.09%)</title><rect x="380.6" y="595.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="383.6" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="380.6" y="579.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="383.6" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="380.6" y="563.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="383.6" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="380.6" y="547.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="383.6" y="558.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.09%)</title><rect x="380.6" y="531.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="383.6" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (15 samples, 1.32%)</title><rect x="381.6" y="627.0" width="15.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="384.6" y="638.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="397.1" y="659.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="400.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (113 samples, 9.91%)</title><rect x="398.2" y="675.0" width="116.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="401.2" y="686.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.09%)</title><rect x="400.2" y="659.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="403.2" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (5 samples, 0.44%)</title><rect x="401.3" y="659.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="404.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.26%)</title><rect x="403.3" y="643.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="406.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (15 samples, 1.32%)</title><rect x="406.4" y="659.0" width="15.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="409.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 1.23%)</title><rect x="407.5" y="643.0" width="14.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="410.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (8 samples, 0.70%)</title><rect x="411.6" y="627.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="414.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (7 samples, 0.61%)</title><rect x="412.6" y="611.0" width="7.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="415.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (4 samples, 0.35%)</title><rect x="415.8" y="595.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="418.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (2 samples, 0.18%)</title><rect x="419.9" y="627.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="422.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (8 samples, 0.70%)</title><rect x="422.0" y="659.0" width="8.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="425.0" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.18%)</title><rect x="424.0" y="643.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="427.0" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="425.1" y="627.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="428.1" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="425.1" y="611.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="428.1" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="425.1" y="595.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="428.1" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.09%)</title><rect x="425.1" y="579.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="428.1" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.35%)</title><rect x="426.1" y="643.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="429.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (79 samples, 6.93%)</title><rect x="430.2" y="659.0" width="81.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="433.2" y="670.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (24 samples, 2.11%)</title><rect x="431.3" y="643.0" width="24.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="434.3" y="654.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.61%)</title><rect x="440.6" y="627.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="443.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.61%)</title><rect x="440.6" y="611.0" width="7.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="443.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.61%)</title><rect x="440.6" y="595.0" width="7.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="443.6" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (8 samples, 0.70%)</title><rect x="447.8" y="627.0" width="8.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="450.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.09%)</title><rect x="456.1" y="643.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="459.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (53 samples, 4.65%)</title><rect x="457.2" y="643.0" width="54.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="460.2" y="654.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (53 samples, 4.65%)</title><rect x="457.2" y="627.0" width="54.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="460.2" y="638.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (53 samples, 4.65%)</title><rect x="457.2" y="611.0" width="54.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="460.2" y="622.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (19 samples, 1.67%)</title><rect x="458.2" y="595.0" width="19.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="461.2" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (10 samples, 0.88%)</title><rect x="463.4" y="579.0" width="10.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="466.4" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (10 samples, 0.88%)</title><rect x="463.4" y="563.0" width="10.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="466.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (10 samples, 0.88%)</title><rect x="463.4" y="547.0" width="10.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="466.4" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (7 samples, 0.61%)</title><rect x="466.5" y="531.0" width="7.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="469.5" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (4 samples, 0.35%)</title><rect x="473.7" y="579.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="476.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (4 samples, 0.35%)</title><rect x="473.7" y="563.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="476.7" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.18%)</title><rect x="475.8" y="547.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="478.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (12 samples, 1.05%)</title><rect x="477.9" y="595.0" width="12.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="480.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (10 samples, 0.88%)</title><rect x="479.9" y="579.0" width="10.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="482.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (10 samples, 0.88%)</title><rect x="479.9" y="563.0" width="10.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="482.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (10 samples, 0.88%)</title><rect x="479.9" y="547.0" width="10.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="482.9" y="558.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (10 samples, 0.88%)</title><rect x="479.9" y="531.0" width="10.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="482.9" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.09%)</title><rect x="490.3" y="595.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="493.3" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (7 samples, 0.61%)</title><rect x="491.3" y="595.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="494.3" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (7 samples, 0.61%)</title><rect x="491.3" y="579.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="494.3" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (7 samples, 0.61%)</title><rect x="491.3" y="563.0" width="7.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="494.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (7 samples, 0.61%)</title><rect x="491.3" y="547.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="494.3" y="558.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (7 samples, 0.61%)</title><rect x="491.3" y="531.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="494.3" y="542.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (7 samples, 0.61%)</title><rect x="491.3" y="515.0" width="7.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="494.3" y="526.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (2 samples, 0.18%)</title><rect x="496.5" y="499.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="499.5" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (7 samples, 0.61%)</title><rect x="498.6" y="595.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="501.6" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.61%)</title><rect x="498.6" y="579.0" width="7.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="501.6" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.61%)</title><rect x="498.6" y="563.0" width="7.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="501.6" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="503.7" y="547.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="506.7" y="558.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (1 samples, 0.09%)</title><rect x="504.8" y="547.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="507.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (6 samples, 0.53%)</title><rect x="505.8" y="595.0" width="6.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="508.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="511.0" y="579.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="514.0" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="511.0" y="563.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="514.0" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.09%)</title><rect x="511.0" y="547.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="514.0" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::array_klass_impl(instanceKlassHandle, bool, int, Thread*) (1 samples, 0.09%)</title><rect x="511.0" y="531.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="514.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (1 samples, 0.09%)</title><rect x="512.0" y="659.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="515.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.18%)</title><rect x="513.1" y="659.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="516.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (12 samples, 1.05%)</title><rect x="515.1" y="675.0" width="12.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="518.1" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (12 samples, 1.05%)</title><rect x="515.1" y="659.0" width="12.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="518.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (12 samples, 1.05%)</title><rect x="515.1" y="643.0" width="12.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="518.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (12 samples, 1.05%)</title><rect x="515.1" y="627.0" width="12.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="518.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (12 samples, 1.05%)</title><rect x="515.1" y="611.0" width="12.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="518.1" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (287 samples, 25.18%)</title><rect x="527.5" y="771.0" width="297.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="530.5" y="782.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (34 samples, 2.98%)</title><rect x="527.5" y="755.0" width="35.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="530.5" y="766.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (2 samples, 0.18%)</title><rect x="527.5" y="739.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="530.5" y="750.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (32 samples, 2.81%)</title><rect x="529.6" y="739.0" width="33.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="532.6" y="750.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (31 samples, 2.72%)</title><rect x="530.6" y="723.0" width="32.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="533.6" y="734.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.26%)</title><rect x="532.7" y="707.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="535.7" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 0.26%)</title><rect x="532.7" y="691.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="535.7" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 0.26%)</title><rect x="532.7" y="675.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="535.7" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.26%)</title><rect x="532.7" y="659.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="535.7" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (26 samples, 2.28%)</title><rect x="535.8" y="707.0" width="26.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="538.8" y="718.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (22 samples, 1.93%)</title><rect x="540.0" y="691.0" width="22.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="543.0" y="702.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 0.35%)</title><rect x="558.6" y="675.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="561.6" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.70%)</title><rect x="562.7" y="755.0" width="8.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="565.7" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.61%)</title><rect x="563.8" y="739.0" width="7.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="566.8" y="750.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (7 samples, 0.61%)</title><rect x="563.8" y="723.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="566.8" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (166 samples, 14.56%)</title><rect x="571.0" y="755.0" width="171.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="574.0" y="766.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (166 samples, 14.56%)</title><rect x="571.0" y="739.0" width="171.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="574.0" y="750.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (53 samples, 4.65%)</title><rect x="586.5" y="723.0" width="54.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="589.5" y="734.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (52 samples, 4.56%)</title><rect x="586.5" y="707.0" width="53.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="589.5" y="718.0">java/..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.44%)</title><rect x="592.8" y="691.0" width="5.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="595.8" y="702.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.35%)</title><rect x="593.8" y="675.0" width="4.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="596.8" y="686.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (33 samples, 2.89%)</title><rect x="597.9" y="691.0" width="34.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="600.9" y="702.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (28 samples, 2.46%)</title><rect x="600.0" y="675.0" width="29.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="603.0" y="686.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (28 samples, 2.46%)</title><rect x="600.0" y="659.0" width="29.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="603.0" y="670.0">ja..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (28 samples, 2.46%)</title><rect x="600.0" y="643.0" width="29.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="603.0" y="654.0">ja..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (12 samples, 1.05%)</title><rect x="614.5" y="627.0" width="12.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="617.5" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 0.35%)</title><rect x="614.5" y="611.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="617.5" y="622.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.09%)</title><rect x="614.5" y="595.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="617.5" y="606.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="615.5" y="595.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="618.5" y="606.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.18%)</title><rect x="616.6" y="595.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="619.6" y="606.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="616.6" y="579.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="619.6" y="590.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.09%)</title><rect x="616.6" y="563.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="619.6" y="574.0"></text>
</g>
<g>
<title>nmethod::is_nmethod() const (1 samples, 0.09%)</title><rect x="617.6" y="579.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="620.6" y="590.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.09%)</title><rect x="618.6" y="611.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="621.6" y="622.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (7 samples, 0.61%)</title><rect x="619.7" y="611.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="622.7" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (6 samples, 0.53%)</title><rect x="620.7" y="595.0" width="6.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="623.7" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="622.8" y="579.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="625.8" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="622.8" y="563.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="625.8" y="574.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="622.8" y="547.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="625.8" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="623.8" y="579.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="626.8" y="590.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="624.8" y="579.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="627.8" y="590.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="625.9" y="579.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="628.9" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.09%)</title><rect x="625.9" y="563.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="628.9" y="574.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.18%)</title><rect x="626.9" y="627.0" width="2.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="629.9" y="638.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.09%)</title><rect x="629.0" y="675.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="632.0" y="686.0"></text>
</g>
<g>
<title>java/lang/String.getChars (2 samples, 0.18%)</title><rect x="630.0" y="675.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="633.0" y="686.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.18%)</title><rect x="632.1" y="691.0" width="2.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="635.1" y="702.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.26%)</title><rect x="634.2" y="691.0" width="3.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="637.2" y="702.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (3 samples, 0.26%)</title><rect x="637.3" y="691.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="640.3" y="702.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.09%)</title><rect x="640.4" y="707.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="643.4" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="640.4" y="691.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="643.4" y="702.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="640.4" y="675.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="643.4" y="686.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (11 samples, 0.96%)</title><rect x="641.4" y="723.0" width="11.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="644.4" y="734.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (3 samples, 0.26%)</title><rect x="641.4" y="707.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="644.4" y="718.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (3 samples, 0.26%)</title><rect x="641.4" y="691.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="644.4" y="702.0"></text>
</g>
<g>
<title>java/lang/Long.toString (8 samples, 0.70%)</title><rect x="644.5" y="707.0" width="8.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="647.5" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.18%)</title><rect x="644.5" y="691.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="647.5" y="702.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.18%)</title><rect x="644.5" y="675.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="647.5" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="645.5" y="659.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="648.5" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="645.5" y="643.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="648.5" y="654.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.53%)</title><rect x="646.6" y="691.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="649.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.09%)</title><rect x="651.8" y="675.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="654.8" y="686.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.26%)</title><rect x="652.8" y="723.0" width="3.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="655.8" y="734.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="655.9" y="723.0" width="1.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="658.9" y="734.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (83 samples, 7.28%)</title><rect x="656.9" y="723.0" width="85.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="659.9" y="734.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (82 samples, 7.19%)</title><rect x="658.0" y="707.0" width="84.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="661.0" y="718.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.35%)</title><rect x="658.0" y="691.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="661.0" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.35%)</title><rect x="658.0" y="675.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="661.0" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.35%)</title><rect x="658.0" y="659.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="661.0" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.35%)</title><rect x="658.0" y="643.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="661.0" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.35%)</title><rect x="662.1" y="691.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="665.1" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.35%)</title><rect x="662.1" y="675.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="665.1" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.35%)</title><rect x="662.1" y="659.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="665.1" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (4 samples, 0.35%)</title><rect x="662.1" y="643.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="665.1" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="665.2" y="627.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="668.2" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (74 samples, 6.49%)</title><rect x="666.2" y="691.0" width="76.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="669.2" y="702.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.put (67 samples, 5.88%)</title><rect x="673.5" y="675.0" width="69.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="676.5" y="686.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.putVal (29 samples, 2.54%)</title><rect x="712.8" y="659.0" width="30.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="715.8" y="670.0">ja..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="725.2" y="643.0" width="1.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="728.2" y="654.0"></text>
</g>
<g>
<title>SharedRuntime::g1_wb_post(void*, JavaThread*) (1 samples, 0.09%)</title><rect x="725.2" y="627.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="728.2" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.26%)</title><rect x="726.3" y="643.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="729.3" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (10 samples, 0.88%)</title><rect x="729.4" y="643.0" width="10.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="732.4" y="654.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.26%)</title><rect x="739.7" y="643.0" width="3.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="742.7" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (65 samples, 5.70%)</title><rect x="742.8" y="755.0" width="67.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="745.8" y="766.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (65 samples, 5.70%)</title><rect x="742.8" y="739.0" width="67.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="745.8" y="750.0">com/lin..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="743.9" y="723.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="746.9" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="743.9" y="707.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="746.9" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="743.9" y="691.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="746.9" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="743.9" y="675.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="746.9" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="743.9" y="659.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="746.9" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="743.9" y="643.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="746.9" y="654.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="743.9" y="627.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="746.9" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.09%)</title><rect x="743.9" y="611.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="746.9" y="622.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.09%)</title><rect x="743.9" y="595.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="746.9" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/460718720.process (28 samples, 2.46%)</title><rect x="744.9" y="723.0" width="29.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="747.9" y="734.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (28 samples, 2.46%)</title><rect x="744.9" y="707.0" width="29.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="747.9" y="718.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (25 samples, 2.19%)</title><rect x="745.9" y="691.0" width="25.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="748.9" y="702.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (6 samples, 0.53%)</title><rect x="760.4" y="675.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="763.4" y="686.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (6 samples, 0.53%)</title><rect x="760.4" y="659.0" width="6.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="763.4" y="670.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (6 samples, 0.53%)</title><rect x="760.4" y="643.0" width="6.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="763.4" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (6 samples, 0.53%)</title><rect x="760.4" y="627.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="763.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (5 samples, 0.44%)</title><rect x="761.5" y="611.0" width="5.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="764.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (2 samples, 0.18%)</title><rect x="764.6" y="595.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="767.6" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (4 samples, 0.35%)</title><rect x="766.6" y="675.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="769.6" y="686.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.35%)</title><rect x="766.6" y="659.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="769.6" y="670.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.35%)</title><rect x="766.6" y="643.0" width="4.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="769.6" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.09%)</title><rect x="770.8" y="675.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="773.8" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.18%)</title><rect x="771.8" y="691.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="774.8" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.18%)</title><rect x="771.8" y="675.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="774.8" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.18%)</title><rect x="771.8" y="659.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="774.8" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.18%)</title><rect x="771.8" y="643.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="774.8" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.18%)</title><rect x="771.8" y="627.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="774.8" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (7 samples, 0.61%)</title><rect x="773.9" y="723.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="776.9" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.44%)</title><rect x="781.1" y="723.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="784.1" y="734.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.44%)</title><rect x="781.1" y="707.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="784.1" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1016925085.linkToTargetMethod (1 samples, 0.09%)</title><rect x="786.3" y="723.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="789.3" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.09%)</title><rect x="786.3" y="707.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="789.3" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$284/1898883795.get$Lambda (1 samples, 0.09%)</title><rect x="786.3" y="691.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="789.3" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.18%)</title><rect x="787.4" y="723.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="790.4" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="788.4" y="707.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="791.4" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (11 samples, 0.96%)</title><rect x="789.4" y="723.0" width="11.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="792.4" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (10 samples, 0.88%)</title><rect x="790.5" y="707.0" width="10.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="793.5" y="718.0"></text>
</g>
<g>
<title>itable stub (5 samples, 0.44%)</title><rect x="790.5" y="691.0" width="5.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="793.5" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (5 samples, 0.44%)</title><rect x="795.6" y="691.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="798.6" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (5 samples, 0.44%)</title><rect x="800.8" y="723.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="803.8" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (4 samples, 0.35%)</title><rect x="801.8" y="707.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="804.8" y="718.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (2 samples, 0.18%)</title><rect x="803.9" y="691.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="806.9" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.rangeCheck (2 samples, 0.18%)</title><rect x="803.9" y="675.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="806.9" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.35%)</title><rect x="806.0" y="723.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="809.0" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.26%)</title><rect x="807.0" y="707.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="810.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 1.23%)</title><rect x="810.1" y="755.0" width="14.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="813.1" y="766.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.35%)</title><rect x="815.3" y="739.0" width="4.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="818.3" y="750.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.35%)</title><rect x="815.3" y="723.0" width="4.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="818.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 0.44%)</title><rect x="819.4" y="739.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="822.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 0.44%)</title><rect x="819.4" y="723.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="822.4" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$289/964120813.accept (5 samples, 0.44%)</title><rect x="819.4" y="707.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="822.4" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$43 (5 samples, 0.44%)</title><rect x="819.4" y="691.0" width="5.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="822.4" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/1080389350.complete (5 samples, 0.44%)</title><rect x="819.4" y="675.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="822.4" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$46 (5 samples, 0.44%)</title><rect x="819.4" y="659.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="822.4" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1590733096.complete (5 samples, 0.44%)</title><rect x="819.4" y="643.0" width="5.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="822.4" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (5 samples, 0.44%)</title><rect x="819.4" y="627.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="822.4" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (5 samples, 0.44%)</title><rect x="819.4" y="611.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="822.4" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (5 samples, 0.44%)</title><rect x="819.4" y="595.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="822.4" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (5 samples, 0.44%)</title><rect x="819.4" y="579.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="822.4" y="590.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.26%)</title><rect x="821.5" y="563.0" width="3.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="824.5" y="574.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="821.5" y="547.0" width="3.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="824.5" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (25 samples, 2.19%)</title><rect x="824.6" y="771.0" width="25.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="827.6" y="782.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (23 samples, 2.02%)</title><rect x="826.7" y="755.0" width="23.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="829.7" y="766.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (23 samples, 2.02%)</title><rect x="826.7" y="739.0" width="23.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="829.7" y="750.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$288/1406392996.accept (2 samples, 0.18%)</title><rect x="826.7" y="723.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="829.7" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$44 (2 samples, 0.18%)</title><rect x="826.7" y="707.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="829.7" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 0.18%)</title><rect x="826.7" y="691.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="829.7" y="702.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.18%)</title><rect x="826.7" y="675.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="829.7" y="686.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.18%)</title><rect x="826.7" y="659.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="829.7" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.18%)</title><rect x="826.7" y="643.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="829.7" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.18%)</title><rect x="826.7" y="627.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="829.7" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.18%)</title><rect x="826.7" y="611.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="829.7" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="826.7" y="595.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="829.7" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="826.7" y="579.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="829.7" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="827.7" y="595.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="830.7" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$289/964120813.accept (21 samples, 1.84%)</title><rect x="828.8" y="723.0" width="21.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="831.8" y="734.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$43 (21 samples, 1.84%)</title><rect x="828.8" y="707.0" width="21.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="831.8" y="718.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/1080389350.complete (21 samples, 1.84%)</title><rect x="828.8" y="691.0" width="21.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="831.8" y="702.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$46 (21 samples, 1.84%)</title><rect x="828.8" y="675.0" width="21.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="831.8" y="686.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1590733096.complete (17 samples, 1.49%)</title><rect x="828.8" y="659.0" width="17.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="831.8" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (17 samples, 1.49%)</title><rect x="828.8" y="643.0" width="17.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="831.8" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (17 samples, 1.49%)</title><rect x="828.8" y="627.0" width="17.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="831.8" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (17 samples, 1.49%)</title><rect x="828.8" y="611.0" width="17.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="831.8" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (17 samples, 1.49%)</title><rect x="828.8" y="595.0" width="17.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="831.8" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$276/142460742.complete (4 samples, 0.35%)</title><rect x="846.4" y="659.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="849.4" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$null$71 (4 samples, 0.35%)</title><rect x="846.4" y="643.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="849.4" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.26%)</title><rect x="847.4" y="627.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="850.4" y="638.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.18%)</title><rect x="850.5" y="771.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="853.5" y="782.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="851.5" y="755.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="854.5" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (9 samples, 0.79%)</title><rect x="852.6" y="787.0" width="9.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="855.6" y="798.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.44%)</title><rect x="854.6" y="771.0" width="5.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="857.6" y="782.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.44%)</title><rect x="854.6" y="755.0" width="5.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="857.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.18%)</title><rect x="859.8" y="771.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="862.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.18%)</title><rect x="861.9" y="835.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="864.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.18%)</title><rect x="861.9" y="819.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="864.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.18%)</title><rect x="861.9" y="803.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="864.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.18%)</title><rect x="861.9" y="787.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="864.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (231 samples, 20.26%)</title><rect x="863.9" y="835.0" width="239.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="866.9" y="846.0">java/util/concurrent/ThreadPoolE..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (230 samples, 20.18%)</title><rect x="865.0" y="819.0" width="238.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="868.0" y="830.0">java/util/concurrent/LinkedBlock..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (201 samples, 17.63%)</title><rect x="895.0" y="803.0" width="208.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="898.0" y="814.0">java/util/concurrent/locks/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (17 samples, 1.49%)</title><rect x="906.4" y="787.0" width="17.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="909.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (173 samples, 15.18%)</title><rect x="924.0" y="787.0" width="179.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="927.0" y="798.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (169 samples, 14.82%)</title><rect x="928.1" y="771.0" width="175.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="931.1" y="782.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.18%)</title><rect x="933.3" y="755.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="936.3" y="766.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.18%)</title><rect x="935.4" y="755.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="938.4" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.18%)</title><rect x="937.4" y="755.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="940.4" y="766.0"></text>
</g>
<g>
<title>Unsafe_Park (153 samples, 13.42%)</title><rect x="939.5" y="755.0" width="158.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="942.5" y="766.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.18%)</title><rect x="943.6" y="739.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="946.6" y="750.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.18%)</title><rect x="945.7" y="739.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="948.7" y="750.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (33 samples, 2.89%)</title><rect x="947.8" y="739.0" width="34.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="950.8" y="750.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (14 samples, 1.23%)</title><rect x="958.1" y="723.0" width="14.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="961.1" y="734.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (6 samples, 0.53%)</title><rect x="960.2" y="707.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="963.2" y="718.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.18%)</title><rect x="964.4" y="691.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="967.4" y="702.0"></text>
</g>
<g>
<title>pthread_getspecific (6 samples, 0.53%)</title><rect x="966.4" y="707.0" width="6.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="969.4" y="718.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="972.6" y="723.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="975.6" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (8 samples, 0.70%)</title><rect x="973.7" y="723.0" width="8.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="976.7" y="734.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (4 samples, 0.35%)</title><rect x="981.9" y="739.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="984.9" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.18%)</title><rect x="986.1" y="739.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="989.1" y="750.0"></text>
</g>
<g>
<title>__lll_lock_wait (8 samples, 0.70%)</title><rect x="988.2" y="739.0" width="8.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="991.2" y="750.0"></text>
</g>
<g>
<title>__lll_unlock_wake (26 samples, 2.28%)</title><rect x="996.4" y="739.0" width="27.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="999.4" y="750.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (51 samples, 4.47%)</title><rect x="1023.4" y="739.0" width="52.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1026.4" y="750.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (6 samples, 0.53%)</title><rect x="1076.1" y="739.0" width="6.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1079.1" y="750.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (3 samples, 0.26%)</title><rect x="1082.4" y="739.0" width="3.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1085.4" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (4 samples, 0.35%)</title><rect x="1085.5" y="739.0" width="4.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1088.5" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.09%)</title><rect x="1089.6" y="739.0" width="1.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1092.6" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.18%)</title><rect x="1090.6" y="739.0" width="2.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1093.6" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.18%)</title><rect x="1092.7" y="739.0" width="2.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1095.7" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.26%)</title><rect x="1094.8" y="739.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1097.8" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.35%)</title><rect x="1097.9" y="755.0" width="4.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1100.9" y="766.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.09%)</title><rect x="1102.0" y="755.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1105.0" y="766.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.09%)</title><rect x="1103.1" y="883.0" width="1.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1106.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="1104.1" y="883.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1107.1" y="894.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.09%)</title><rect x="1104.1" y="867.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1107.1" y="878.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.09%)</title><rect x="1104.1" y="851.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1107.1" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 0.09%)</title><rect x="1104.1" y="835.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1107.1" y="846.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.09%)</title><rect x="1104.1" y="819.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1107.1" y="830.0"></text>
</g>
<g>
<title>start_thread (82 samples, 7.19%)</title><rect x="1105.1" y="883.0" width="84.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1108.1" y="894.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (82 samples, 7.19%)</title><rect x="1105.1" y="867.0" width="84.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1108.1" y="878.0">java_start..</text>
</g>
<g>
<title>GangWorker::loop() (21 samples, 1.84%)</title><rect x="1105.1" y="851.0" width="21.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1108.1" y="862.0">G..</text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (1 samples, 0.09%)</title><rect x="1105.1" y="835.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1108.1" y="846.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (8 samples, 0.70%)</title><rect x="1106.2" y="835.0" width="8.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1109.2" y="846.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 0.70%)</title><rect x="1106.2" y="819.0" width="8.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1109.2" y="830.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.18%)</title><rect x="1106.2" y="803.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1109.2" y="814.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 0.53%)</title><rect x="1108.2" y="803.0" width="6.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1111.2" y="814.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (12 samples, 1.05%)</title><rect x="1114.4" y="835.0" width="12.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1117.4" y="846.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.09%)</title><rect x="1114.4" y="819.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1117.4" y="830.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.09%)</title><rect x="1114.4" y="803.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1117.4" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (7 samples, 0.61%)</title><rect x="1115.5" y="819.0" width="7.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1118.5" y="830.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.26%)</title><rect x="1115.5" y="803.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1118.5" y="814.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.18%)</title><rect x="1115.5" y="787.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1118.5" y="798.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.18%)</title><rect x="1115.5" y="771.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1118.5" y="782.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.09%)</title><rect x="1115.5" y="755.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1118.5" y="766.0"></text>
</g>
<g>
<title>JNIHandleBlock::oops_do(OopClosure*) (1 samples, 0.09%)</title><rect x="1116.5" y="755.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1119.5" y="766.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1117.5" y="787.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1120.5" y="798.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1117.5" y="771.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1120.5" y="782.0"></text>
</g>
<g>
<title>Method::mask_for(int, InterpreterOopMap*) (1 samples, 0.09%)</title><rect x="1117.5" y="755.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1120.5" y="766.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.35%)</title><rect x="1118.6" y="803.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1121.6" y="814.0"></text>
</g>
<g>
<title>JNIHandles::oops_do(OopClosure*) (1 samples, 0.09%)</title><rect x="1118.6" y="787.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.6" y="798.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.26%)</title><rect x="1119.6" y="787.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.6" y="798.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (4 samples, 0.35%)</title><rect x="1122.7" y="819.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1125.7" y="830.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (4 samples, 0.35%)</title><rect x="1122.7" y="803.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.7" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (4 samples, 0.35%)</title><rect x="1122.7" y="787.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1125.7" y="798.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (4 samples, 0.35%)</title><rect x="1122.7" y="771.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1125.7" y="782.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.35%)</title><rect x="1122.7" y="755.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1125.7" y="766.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (4 samples, 0.35%)</title><rect x="1122.7" y="739.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1125.7" y="750.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.26%)</title><rect x="1123.8" y="723.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1126.8" y="734.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.09%)</title><rect x="1124.8" y="707.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1127.8" y="718.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.09%)</title><rect x="1125.8" y="707.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1128.8" y="718.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.09%)</title><rect x="1125.8" y="691.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1128.8" y="702.0"></text>
</g>
<g>
<title>JavaThread::run() (59 samples, 5.18%)</title><rect x="1126.9" y="851.0" width="61.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.9" y="862.0">JavaTh..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (59 samples, 5.18%)</title><rect x="1126.9" y="835.0" width="61.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.9" y="846.0">JavaTh..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (59 samples, 5.18%)</title><rect x="1126.9" y="819.0" width="61.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1129.9" y="830.0">Compil..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (59 samples, 5.18%)</title><rect x="1126.9" y="803.0" width="61.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.9" y="814.0">Compil..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (55 samples, 4.82%)</title><rect x="1126.9" y="787.0" width="56.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.9" y="798.0">C2Comp..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (55 samples, 4.82%)</title><rect x="1126.9" y="771.0" width="56.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1129.9" y="782.0">Compil..</text>
</g>
<g>
<title>Compile::Code_Gen() (30 samples, 2.63%)</title><rect x="1126.9" y="755.0" width="31.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1129.9" y="766.0">Co..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.18%)</title><rect x="1126.9" y="739.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.9" y="750.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.09%)</title><rect x="1127.9" y="723.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.9" y="734.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.09%)</title><rect x="1127.9" y="707.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.9" y="718.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.18%)</title><rect x="1128.9" y="739.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.9" y="750.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.09%)</title><rect x="1128.9" y="723.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1131.9" y="734.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.09%)</title><rect x="1128.9" y="707.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1131.9" y="718.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1128.9" y="691.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.9" y="702.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1128.9" y="675.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1131.9" y="686.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1128.9" y="659.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1131.9" y="670.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.09%)</title><rect x="1128.9" y="643.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1131.9" y="654.0"></text>
</g>
<g>
<title>State::_sub_Op_ConL(Node const*) (1 samples, 0.09%)</title><rect x="1128.9" y="627.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1131.9" y="638.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.09%)</title><rect x="1130.0" y="723.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1133.0" y="734.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.09%)</title><rect x="1131.0" y="739.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.0" y="750.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.09%)</title><rect x="1131.0" y="723.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1134.0" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.26%)</title><rect x="1132.0" y="739.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.0" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.26%)</title><rect x="1132.0" y="723.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1135.0" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1132.0" y="707.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1135.0" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.18%)</title><rect x="1133.1" y="707.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.1" y="718.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.09%)</title><rect x="1133.1" y="691.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1136.1" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.09%)</title><rect x="1134.1" y="691.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.1" y="702.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.09%)</title><rect x="1134.1" y="675.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1137.1" y="686.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.09%)</title><rect x="1134.1" y="659.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.1" y="670.0"></text>
</g>
<g>
<title>indIndexScaleOffsetOper::num_edges() const (1 samples, 0.09%)</title><rect x="1134.1" y="643.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.1" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (22 samples, 1.93%)</title><rect x="1135.1" y="739.0" width="22.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1138.1" y="750.0">P..</text>
</g>
<g>
<title>MachNode::oper_input_base() const (1 samples, 0.09%)</title><rect x="1135.1" y="723.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1138.1" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.09%)</title><rect x="1136.2" y="723.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1139.2" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1136.2" y="707.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1139.2" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.09%)</title><rect x="1137.2" y="723.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1140.2" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1137.2" y="707.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1140.2" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 0.35%)</title><rect x="1138.2" y="723.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1141.2" y="734.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.09%)</title><rect x="1141.4" y="707.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.4" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 0.53%)</title><rect x="1142.4" y="723.0" width="6.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.4" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.18%)</title><rect x="1144.5" y="707.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.5" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.09%)</title><rect x="1146.5" y="707.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.5" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1146.5" y="691.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1149.5" y="702.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.09%)</title><rect x="1147.6" y="707.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1150.6" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.09%)</title><rect x="1148.6" y="723.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.6" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1148.6" y="707.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1151.6" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (5 samples, 0.44%)</title><rect x="1149.6" y="723.0" width="5.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.6" y="734.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.09%)</title><rect x="1151.7" y="707.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.7" y="718.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.09%)</title><rect x="1152.7" y="707.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.7" y="718.0"></text>
</g>
<g>
<title>rRegIOper::type() const (1 samples, 0.09%)</title><rect x="1153.8" y="707.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.8" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.18%)</title><rect x="1154.8" y="723.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.8" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.09%)</title><rect x="1156.9" y="723.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.9" y="734.0"></text>
</g>
<g>
<title>Compile::Optimize() (17 samples, 1.49%)</title><rect x="1157.9" y="755.0" width="17.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.9" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.09%)</title><rect x="1157.9" y="739.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.9" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.09%)</title><rect x="1157.9" y="723.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.9" y="734.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.09%)</title><rect x="1158.9" y="739.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.9" y="750.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.09%)</title><rect x="1158.9" y="723.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1161.9" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (12 samples, 1.05%)</title><rect x="1160.0" y="739.0" width="12.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1163.0" y="750.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="1160.0" y="723.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.0" y="734.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="1160.0" y="707.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.0" y="718.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="1160.0" y="691.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.0" y="702.0"></text>
</g>
<g>
<title>IdealLoopTree::merge_many_backedges(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="1160.0" y="675.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.0" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.09%)</title><rect x="1161.0" y="723.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.0" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 0.61%)</title><rect x="1162.1" y="723.0" width="7.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.1" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (6 samples, 0.53%)</title><rect x="1163.1" y="707.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.1" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 0.18%)</title><rect x="1167.2" y="691.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.2" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1168.3" y="675.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.3" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1168.3" y="659.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.3" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.18%)</title><rect x="1169.3" y="723.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.3" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.18%)</title><rect x="1169.3" y="707.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.3" y="718.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1169.3" y="691.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.3" y="702.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.09%)</title><rect x="1169.3" y="675.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.3" y="686.0"></text>
</g>
<g>
<title>RegionNode::Opcode() const (1 samples, 0.09%)</title><rect x="1170.3" y="691.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.3" y="702.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.09%)</title><rect x="1171.4" y="723.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.4" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.18%)</title><rect x="1172.4" y="739.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.4" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.18%)</title><rect x="1172.4" y="723.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.4" y="734.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1172.4" y="707.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.4" y="718.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.09%)</title><rect x="1172.4" y="691.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.4" y="702.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_interface() (1 samples, 0.09%)</title><rect x="1173.4" y="707.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.4" y="718.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.09%)</title><rect x="1174.5" y="739.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.5" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1174.5" y="723.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.5" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1174.5" y="707.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.5" y="718.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1174.5" y="691.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.5" y="702.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.09%)</title><rect x="1174.5" y="675.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.5" y="686.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.09%)</title><rect x="1174.5" y="659.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.5" y="670.0"></text>
</g>
<g>
<title>TypeNarrowPtr::hash() const (1 samples, 0.09%)</title><rect x="1174.5" y="643.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.5" y="654.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.09%)</title><rect x="1174.5" y="627.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.5" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.70%)</title><rect x="1175.5" y="755.0" width="8.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.5" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.70%)</title><rect x="1175.5" y="739.0" width="8.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.70%)</title><rect x="1175.5" y="723.0" width="8.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.70%)</title><rect x="1175.5" y="707.0" width="8.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.70%)</title><rect x="1175.5" y="691.0" width="8.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.61%)</title><rect x="1175.5" y="675.0" width="7.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.5" y="686.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1175.5" y="659.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.5" y="670.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1175.5" y="643.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.5" y="654.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1175.5" y="627.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.5" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1175.5" y="611.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.5" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1175.5" y="595.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.5" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1175.5" y="579.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.5" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1175.5" y="563.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.5" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::compute_exceptions() (1 samples, 0.09%)</title><rect x="1175.5" y="547.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.5" y="558.0"></text>
</g>
<g>
<title>ciExceptionHandlerStream::count() (1 samples, 0.09%)</title><rect x="1175.5" y="531.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.5" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.53%)</title><rect x="1176.5" y="659.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.5" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.53%)</title><rect x="1176.5" y="643.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.44%)</title><rect x="1176.5" y="627.0" width="5.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.44%)</title><rect x="1176.5" y="611.0" width="5.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.44%)</title><rect x="1176.5" y="595.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.44%)</title><rect x="1176.5" y="579.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.5" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.35%)</title><rect x="1176.5" y="563.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.5" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.35%)</title><rect x="1176.5" y="547.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.35%)</title><rect x="1176.5" y="531.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.35%)</title><rect x="1176.5" y="515.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.35%)</title><rect x="1176.5" y="499.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.35%)</title><rect x="1176.5" y="483.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.5" y="494.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1176.5" y="467.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.5" y="478.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1176.5" y="451.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.5" y="462.0"></text>
</g>
<g>
<title>ciMethod::can_be_compiled() (1 samples, 0.09%)</title><rect x="1176.5" y="435.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.5" y="446.0"></text>
</g>
<g>
<title>ciEnv::comp_level() (1 samples, 0.09%)</title><rect x="1176.5" y="419.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.5" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1177.6" y="467.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.6" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1177.6" y="451.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1177.6" y="435.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.6" y="446.0"></text>
</g>
<g>
<title>GraphKit::add_predicate(int) (1 samples, 0.09%)</title><rect x="1177.6" y="419.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.6" y="430.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.09%)</title><rect x="1177.6" y="403.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.6" y="414.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.09%)</title><rect x="1177.6" y="387.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.6" y="398.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.09%)</title><rect x="1177.6" y="371.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.6" y="382.0"></text>
</g>
<g>
<title>TypeInt::make(int) (1 samples, 0.09%)</title><rect x="1177.6" y="355.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.6" y="366.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.09%)</title><rect x="1177.6" y="339.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1178.6" y="419.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1178.6" y="403.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1178.6" y="387.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.6" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.6" y="371.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.6" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.6" y="355.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.6" y="339.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.6" y="323.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.6" y="307.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1178.6" y="291.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.6" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.6" y="275.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.6" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.6" y="259.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.6" y="243.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.6" y="227.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.6" y="211.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.6" y="222.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1178.6" y="195.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.6" y="206.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.09%)</title><rect x="1178.6" y="179.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.6" y="190.0"></text>
</g>
<g>
<title>GraphKit::g1_mark_card(IdealKit&amp;, Node*, Node*, unsigned int, Node*, Node*, Node*, TypeFunc const*) (1 samples, 0.09%)</title><rect x="1178.6" y="163.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.6" y="174.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1178.6" y="147.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.6" y="158.0"></text>
</g>
<g>
<title>SubLNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1178.6" y="131.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.6" y="142.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.09%)</title><rect x="1179.6" y="387.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.6" y="398.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_klass(bool&amp;) (1 samples, 0.09%)</title><rect x="1179.6" y="371.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.6" y="382.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1179.6" y="355.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.6" y="366.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1179.6" y="339.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.6" y="350.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.09%)</title><rect x="1179.6" y="323.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.6" y="334.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.7" y="563.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.7" y="574.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.7" y="547.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.7" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.7" y="531.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.7" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.7" y="515.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.7" y="499.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.7" y="483.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.7" y="467.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.7" y="451.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.7" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.7" y="435.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.7" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.7" y="419.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.7" y="403.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.7" y="387.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.7" y="371.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.7" y="355.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.7" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.7" y="339.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.7" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.7" y="323.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.7" y="307.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.7" y="291.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.7" y="275.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.7" y="259.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.7" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.7" y="243.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.7" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.7" y="227.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.7" y="211.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.7" y="195.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.7" y="179.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.7" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.7" y="163.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.7" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.7" y="147.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.7" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.7" y="131.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.7" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.7" y="115.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.7" y="126.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.09%)</title><rect x="1180.7" y="99.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.7" y="110.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.09%)</title><rect x="1180.7" y="83.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.7" y="94.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1180.7" y="67.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.7" y="78.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1180.7" y="51.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.7" y="62.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1180.7" y="35.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.7" y="46.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.09%)</title><rect x="1181.7" y="627.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.7" y="638.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::is_mature(Method*) (1 samples, 0.09%)</title><rect x="1181.7" y="611.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1182.8" y="675.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1182.8" y="659.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.8" y="670.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.09%)</title><rect x="1182.8" y="643.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.8" y="654.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.09%)</title><rect x="1182.8" y="627.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.8" y="638.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1182.8" y="611.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.8" y="622.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1182.8" y="595.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.8" y="606.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1182.8" y="579.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.8" y="590.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.09%)</title><rect x="1182.8" y="563.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.8" y="574.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 0.26%)</title><rect x="1183.8" y="787.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.8" y="798.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 0.26%)</title><rect x="1183.8" y="771.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.8" y="782.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.26%)</title><rect x="1183.8" y="755.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.8" y="766.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.18%)</title><rect x="1183.8" y="739.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.8" y="750.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.09%)</title><rect x="1183.8" y="723.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.8" y="734.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1183.8" y="707.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.8" y="718.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.09%)</title><rect x="1183.8" y="691.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.8" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.09%)</title><rect x="1183.8" y="675.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.8" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.09%)</title><rect x="1183.8" y="659.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.8" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.09%)</title><rect x="1183.8" y="643.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.8" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1183.8" y="627.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.8" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1183.8" y="611.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.8" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1183.8" y="595.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.8" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.09%)</title><rect x="1183.8" y="579.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.8" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.09%)</title><rect x="1183.8" y="563.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.8" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1183.8" y="547.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.8" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1183.8" y="531.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.8" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1183.8" y="515.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.8" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.09%)</title><rect x="1183.8" y="499.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.8" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.09%)</title><rect x="1183.8" y="483.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.8" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1183.8" y="467.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.8" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1183.8" y="451.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.8" y="462.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1183.8" y="435.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.8" y="446.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.09%)</title><rect x="1183.8" y="419.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.8" y="430.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.09%)</title><rect x="1183.8" y="403.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.8" y="414.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1183.8" y="387.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.8" y="398.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1183.8" y="371.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.8" y="382.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1183.8" y="355.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.8" y="366.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.09%)</title><rect x="1183.8" y="339.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.8" y="350.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.09%)</title><rect x="1183.8" y="323.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.8" y="334.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1183.8" y="307.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.8" y="318.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1183.8" y="291.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.8" y="302.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1183.8" y="275.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.8" y="286.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.09%)</title><rect x="1183.8" y="259.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.8" y="270.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.09%)</title><rect x="1183.8" y="243.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.8" y="254.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1183.8" y="227.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.8" y="238.0"></text>
</g>
<g>
<title>GraphBuilder::try_method_handle_inline(ciMethod*) (1 samples, 0.09%)</title><rect x="1183.8" y="211.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.8" y="222.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1183.8" y="195.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.8" y="206.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.09%)</title><rect x="1183.8" y="179.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.8" y="190.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.09%)</title><rect x="1183.8" y="163.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.8" y="174.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.09%)</title><rect x="1183.8" y="147.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.8" y="158.0"></text>
</g>
<g>
<title>GraphBuilder::check_cast(int) (1 samples, 0.09%)</title><rect x="1183.8" y="131.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.8" y="142.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.09%)</title><rect x="1183.8" y="115.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.8" y="126.0"></text>
</g>
<g>
<title>Canonicalizer::do_CheckCast(CheckCast*) (1 samples, 0.09%)</title><rect x="1183.8" y="99.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.8" y="110.0"></text>
</g>
<g>
<title>ObjectConstant::exact_type() const (1 samples, 0.09%)</title><rect x="1183.8" y="83.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.8" y="94.0"></text>
</g>
<g>
<title>ciObject::klass() (1 samples, 0.09%)</title><rect x="1183.8" y="67.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.8" y="78.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="1183.8" y="51.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.8" y="62.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.09%)</title><rect x="1184.8" y="723.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.8" y="734.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.09%)</title><rect x="1184.8" y="707.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.8" y="718.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.09%)</title><rect x="1184.8" y="691.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.8" y="702.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.09%)</title><rect x="1184.8" y="675.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.8" y="686.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.09%)</title><rect x="1184.8" y="659.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.8" y="670.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.09%)</title><rect x="1184.8" y="643.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.8" y="654.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.09%)</title><rect x="1185.9" y="739.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.9" y="750.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.09%)</title><rect x="1185.9" y="723.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.9" y="734.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.09%)</title><rect x="1185.9" y="707.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.9" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::add_dependent_nmethod(nmethod*) (1 samples, 0.09%)</title><rect x="1185.9" y="691.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.9" y="702.0"></text>
</g>
<g>
<title>ciEnv::~ciEnv() (1 samples, 0.09%)</title><rect x="1186.9" y="787.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.9" y="798.0"></text>
</g>
<g>
<title>ciObjectFactory::remove_symbols() (1 samples, 0.09%)</title><rect x="1186.9" y="771.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.9" y="782.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.18%)</title><rect x="1187.9" y="851.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.9" y="862.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.18%)</title><rect x="1187.9" y="835.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.9" y="846.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.18%)</title><rect x="1187.9" y="819.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.9" y="830.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.18%)</title><rect x="1187.9" y="803.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.9" y="814.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.18%)</title><rect x="1187.9" y="787.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.9" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.18%)</title><rect x="1187.9" y="771.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.9" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.09%)</title><rect x="1187.9" y="755.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.9" y="766.0"></text>
</g>
<g>
<title>nmethod::oops_do_marking_epilogue() (1 samples, 0.09%)</title><rect x="1187.9" y="739.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.9" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::gc_prologue(bool) (1 samples, 0.09%)</title><rect x="1189.0" y="755.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.0" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::ensure_parsability(bool) (1 samples, 0.09%)</title><rect x="1189.0" y="739.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.0" y="750.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::make_parsable(bool) (1 samples, 0.09%)</title><rect x="1189.0" y="723.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.0" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.09%)</title><rect x="1189.0" y="707.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.0" y="718.0"></text>
</g>
</g>
</svg>
