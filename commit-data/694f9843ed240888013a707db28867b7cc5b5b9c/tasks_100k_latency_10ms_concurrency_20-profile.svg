<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (299 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (27 samples, 9.03%)</title><rect x="10.0" y="883.0" width="106.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="894.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (2 samples, 0.67%)</title><rect x="10.0" y="867.0" width="7.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (2 samples, 0.67%)</title><rect x="10.0" y="851.0" width="7.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.commitOffsets (2 samples, 0.67%)</title><rect x="10.0" y="835.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.33%)</title><rect x="13.9" y="819.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="16.9" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (24 samples, 8.03%)</title><rect x="17.9" y="867.0" width="94.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.9" y="878.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.33%)</title><rect x="17.9" y="851.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pause (1 samples, 0.33%)</title><rect x="17.9" y="835.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.pause (1 samples, 0.33%)</title><rect x="17.9" y="819.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="20.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$2500 (1 samples, 0.33%)</title><rect x="17.9" y="803.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.9" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (2 samples, 0.67%)</title><rect x="21.8" y="851.0" width="7.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.8" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (2 samples, 0.67%)</title><rect x="21.8" y="835.0" width="7.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.8" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/856375932.linkToTargetMethod (1 samples, 0.33%)</title><rect x="21.8" y="819.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.8" y="830.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.33%)</title><rect x="21.8" y="803.0" width="4.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="24.8" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.33%)</title><rect x="25.8" y="819.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="28.8" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.33%)</title><rect x="25.8" y="803.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.8" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.33%)</title><rect x="25.8" y="787.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="28.8" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.33%)</title><rect x="25.8" y="771.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.8" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.33%)</title><rect x="25.8" y="755.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.8" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.33%)</title><rect x="25.8" y="739.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="28.8" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.33%)</title><rect x="25.8" y="723.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="28.8" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.33%)</title><rect x="25.8" y="707.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.8" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.33%)</title><rect x="25.8" y="691.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="28.8" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$270/1620914631.apply (1 samples, 0.33%)</title><rect x="25.8" y="675.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.8" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.topicPartition (1 samples, 0.33%)</title><rect x="25.8" y="659.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="28.8" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionScope.topicPartition (1 samples, 0.33%)</title><rect x="25.8" y="643.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.8" y="654.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (4 samples, 1.34%)</title><rect x="29.7" y="851.0" width="15.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="32.7" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1223954879.accept (4 samples, 1.34%)</title><rect x="29.7" y="835.0" width="15.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="32.7" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$72 (4 samples, 1.34%)</title><rect x="29.7" y="819.0" width="15.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="32.7" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (2 samples, 0.67%)</title><rect x="29.7" y="803.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="32.7" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (2 samples, 0.67%)</title><rect x="29.7" y="787.0" width="7.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="32.7" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (2 samples, 0.67%)</title><rect x="29.7" y="771.0" width="7.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="32.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 0.67%)</title><rect x="29.7" y="755.0" width="7.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="32.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.67%)</title><rect x="29.7" y="739.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="32.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.33%)</title><rect x="33.7" y="723.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="36.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.33%)</title><rect x="33.7" y="707.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="36.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.33%)</title><rect x="33.7" y="691.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="36.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.33%)</title><rect x="33.7" y="675.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="36.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.33%)</title><rect x="33.7" y="659.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="36.7" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (2 samples, 0.67%)</title><rect x="37.6" y="803.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.6" y="814.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.67%)</title><rect x="37.6" y="787.0" width="7.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="40.6" y="798.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.67%)</title><rect x="37.6" y="771.0" width="7.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="40.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (17 samples, 5.69%)</title><rect x="45.5" y="851.0" width="67.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="48.5" y="862.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (17 samples, 5.69%)</title><rect x="45.5" y="835.0" width="67.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="48.5" y="846.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (12 samples, 4.01%)</title><rect x="45.5" y="819.0" width="47.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="48.5" y="830.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (9 samples, 3.01%)</title><rect x="45.5" y="803.0" width="35.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="48.5" y="814.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (9 samples, 3.01%)</title><rect x="45.5" y="787.0" width="35.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="48.5" y="798.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (8 samples, 2.68%)</title><rect x="45.5" y="771.0" width="31.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="48.5" y="782.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (3 samples, 1.00%)</title><rect x="45.5" y="755.0" width="11.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="48.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.33%)</title><rect x="45.5" y="739.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="48.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.33%)</title><rect x="45.5" y="723.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="48.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.33%)</title><rect x="45.5" y="707.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="48.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.33%)</title><rect x="45.5" y="691.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="48.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Max.update (1 samples, 0.33%)</title><rect x="45.5" y="675.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="48.5" y="686.0"></text>
</g>
<g>
<title>java/lang/Math.max (1 samples, 0.33%)</title><rect x="45.5" y="659.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="48.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (2 samples, 0.67%)</title><rect x="49.5" y="739.0" width="7.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="52.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (2 samples, 0.67%)</title><rect x="49.5" y="723.0" width="7.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="52.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/Errors.forCode (2 samples, 0.67%)</title><rect x="49.5" y="707.0" width="7.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="52.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (5 samples, 1.67%)</title><rect x="57.4" y="755.0" width="19.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="60.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.33%)</title><rect x="57.4" y="739.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="60.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.33%)</title><rect x="57.4" y="723.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="60.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.33%)</title><rect x="61.3" y="739.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="64.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.33%)</title><rect x="61.3" y="723.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="64.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.33%)</title><rect x="61.3" y="707.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="64.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.33%)</title><rect x="61.3" y="691.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="64.3" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.33%)</title><rect x="61.3" y="675.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="64.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.33%)</title><rect x="61.3" y="659.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="64.3" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.33%)</title><rect x="61.3" y="643.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="64.3" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.33%)</title><rect x="61.3" y="627.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="64.3" y="638.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.33%)</title><rect x="61.3" y="611.0" width="4.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="64.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (3 samples, 1.00%)</title><rect x="65.3" y="739.0" width="11.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="68.3" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (2 samples, 0.67%)</title><rect x="65.3" y="723.0" width="7.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="68.3" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (2 samples, 0.67%)</title><rect x="65.3" y="707.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="68.3" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (2 samples, 0.67%)</title><rect x="65.3" y="691.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="68.3" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.33%)</title><rect x="65.3" y="675.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="68.3" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.33%)</title><rect x="65.3" y="659.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="68.3" y="670.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.33%)</title><rect x="65.3" y="643.0" width="3.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="68.3" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (1 samples, 0.33%)</title><rect x="69.2" y="675.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="72.2" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.33%)</title><rect x="69.2" y="659.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="72.2" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.33%)</title><rect x="69.2" y="643.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="72.2" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.33%)</title><rect x="73.1" y="723.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="76.1" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.33%)</title><rect x="73.1" y="707.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="76.1" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.33%)</title><rect x="73.1" y="691.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="76.1" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.33%)</title><rect x="73.1" y="675.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="76.1" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.updateRegistrations (1 samples, 0.33%)</title><rect x="73.1" y="659.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="76.1" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollCtl (1 samples, 0.33%)</title><rect x="73.1" y="643.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="76.1" y="654.0"></text>
</g>
<g>
<title>__GI_epoll_ctl (1 samples, 0.33%)</title><rect x="73.1" y="627.0" width="4.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="76.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Timer.update (1 samples, 0.33%)</title><rect x="77.1" y="771.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="80.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 1.00%)</title><rect x="81.0" y="803.0" width="11.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="84.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 1.00%)</title><rect x="81.0" y="787.0" width="11.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="84.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 1.00%)</title><rect x="81.0" y="771.0" width="11.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="84.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.00%)</title><rect x="81.0" y="755.0" width="11.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="84.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.67%)</title><rect x="81.0" y="739.0" width="7.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="84.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.33%)</title><rect x="85.0" y="723.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="88.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.33%)</title><rect x="85.0" y="707.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="88.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.33%)</title><rect x="85.0" y="691.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="88.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.33%)</title><rect x="85.0" y="675.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="88.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.33%)</title><rect x="85.0" y="659.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="88.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.33%)</title><rect x="85.0" y="643.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="88.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.33%)</title><rect x="85.0" y="627.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="88.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.33%)</title><rect x="88.9" y="739.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="91.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.33%)</title><rect x="88.9" y="723.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="91.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.33%)</title><rect x="88.9" y="707.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="91.9" y="718.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.33%)</title><rect x="88.9" y="691.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="91.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.33%)</title><rect x="92.9" y="819.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="95.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.33%)</title><rect x="92.9" y="803.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="95.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.33%)</title><rect x="92.9" y="787.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="95.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.33%)</title><rect x="92.9" y="771.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="95.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.33%)</title><rect x="92.9" y="755.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="95.9" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.33%)</title><rect x="92.9" y="739.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="95.9" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.33%)</title><rect x="92.9" y="723.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="95.9" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.33%)</title><rect x="92.9" y="707.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="95.9" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.33%)</title><rect x="92.9" y="691.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="95.9" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.33%)</title><rect x="92.9" y="675.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="95.9" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.33%)</title><rect x="92.9" y="659.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="95.9" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.33%)</title><rect x="92.9" y="643.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="95.9" y="654.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.33%)</title><rect x="92.9" y="627.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="95.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 1.00%)</title><rect x="96.8" y="819.0" width="11.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="99.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.67%)</title><rect x="96.8" y="803.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="99.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.67%)</title><rect x="96.8" y="787.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="99.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.33%)</title><rect x="96.8" y="771.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="99.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.33%)</title><rect x="96.8" y="755.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="99.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.33%)</title><rect x="96.8" y="739.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="99.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.33%)</title><rect x="96.8" y="723.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="99.8" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.33%)</title><rect x="96.8" y="707.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="99.8" y="718.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.33%)</title><rect x="96.8" y="691.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="99.8" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.33%)</title><rect x="96.8" y="675.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="99.8" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.33%)</title><rect x="96.8" y="659.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="99.8" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.33%)</title><rect x="96.8" y="643.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="99.8" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.33%)</title><rect x="96.8" y="627.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="99.8" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.33%)</title><rect x="96.8" y="611.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="99.8" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.33%)</title><rect x="96.8" y="595.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="99.8" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.33%)</title><rect x="96.8" y="579.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="99.8" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.33%)</title><rect x="100.8" y="771.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="103.8" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.33%)</title><rect x="100.8" y="755.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="103.8" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.33%)</title><rect x="100.8" y="739.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="103.8" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.33%)</title><rect x="100.8" y="723.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="103.8" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.33%)</title><rect x="100.8" y="707.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="103.8" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.33%)</title><rect x="100.8" y="691.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="103.8" y="702.0"></text>
</g>
<g>
<title>__GI_epoll_wait (1 samples, 0.33%)</title><rect x="100.8" y="675.0" width="3.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="103.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.33%)</title><rect x="104.7" y="803.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="107.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.33%)</title><rect x="104.7" y="787.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="107.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.33%)</title><rect x="104.7" y="771.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="107.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.33%)</title><rect x="104.7" y="755.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="107.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.33%)</title><rect x="104.7" y="739.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="107.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.33%)</title><rect x="104.7" y="723.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="107.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.33%)</title><rect x="104.7" y="707.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="107.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.sizeOf (1 samples, 0.33%)</title><rect x="104.7" y="691.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="107.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.sizeOf (1 samples, 0.33%)</title><rect x="104.7" y="675.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="107.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.sizeOf (1 samples, 0.33%)</title><rect x="104.7" y="659.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="107.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.sizeOf (1 samples, 0.33%)</title><rect x="104.7" y="643.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="107.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.sizeOf (1 samples, 0.33%)</title><rect x="104.7" y="627.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="107.7" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.33%)</title><rect x="108.7" y="819.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="111.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.33%)</title><rect x="108.7" y="803.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="111.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.33%)</title><rect x="108.7" y="787.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="111.7" y="798.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.33%)</title><rect x="108.7" y="771.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="111.7" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.33%)</title><rect x="108.7" y="755.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="111.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.33%)</title><rect x="108.7" y="739.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="111.7" y="750.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.33%)</title><rect x="112.6" y="867.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="115.6" y="878.0"></text>
</g>
<g>
<title>java/lang/Thread.run (227 samples, 75.92%)</title><rect x="116.6" y="883.0" width="895.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="119.6" y="894.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (227 samples, 75.92%)</title><rect x="116.6" y="867.0" width="895.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="119.6" y="878.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (227 samples, 75.92%)</title><rect x="116.6" y="851.0" width="895.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="119.6" y="862.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/1325189724.run (218 samples, 72.91%)</title><rect x="124.4" y="835.0" width="860.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="127.4" y="846.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/1325189724.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (218 samples, 72.91%)</title><rect x="124.4" y="819.0" width="860.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="127.4" y="830.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (218 samples, 72.91%)</title><rect x="124.4" y="803.0" width="860.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="127.4" y="814.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (214 samples, 71.57%)</title><rect x="124.4" y="787.0" width="844.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="127.4" y="798.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (36 samples, 12.04%)</title><rect x="140.2" y="771.0" width="142.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="143.2" y="782.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (35 samples, 11.71%)</title><rect x="144.2" y="755.0" width="138.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="147.2" y="766.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (35 samples, 11.71%)</title><rect x="144.2" y="739.0" width="138.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="147.2" y="750.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (35 samples, 11.71%)</title><rect x="144.2" y="723.0" width="138.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="147.2" y="734.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (35 samples, 11.71%)</title><rect x="144.2" y="707.0" width="138.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="147.2" y="718.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (35 samples, 11.71%)</title><rect x="144.2" y="691.0" width="138.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="147.2" y="702.0">com/fasterxml/jac..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (14 samples, 4.68%)</title><rect x="144.2" y="675.0" width="55.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="147.2" y="686.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (5 samples, 1.67%)</title><rect x="144.2" y="659.0" width="19.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="147.2" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (5 samples, 1.67%)</title><rect x="144.2" y="643.0" width="19.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="147.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (5 samples, 1.67%)</title><rect x="144.2" y="627.0" width="19.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="147.2" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 1.67%)</title><rect x="144.2" y="611.0" width="19.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="147.2" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (9 samples, 3.01%)</title><rect x="163.9" y="659.0" width="35.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="166.9" y="670.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (9 samples, 3.01%)</title><rect x="163.9" y="643.0" width="35.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="166.9" y="654.0">com..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.33%)</title><rect x="163.9" y="627.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="166.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 1.00%)</title><rect x="167.9" y="627.0" width="11.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="170.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (3 samples, 1.00%)</title><rect x="167.9" y="611.0" width="11.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="170.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (3 samples, 1.00%)</title><rect x="179.7" y="627.0" width="11.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="182.7" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (3 samples, 1.00%)</title><rect x="179.7" y="611.0" width="11.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="182.7" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.33%)</title><rect x="187.6" y="595.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="190.6" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (2 samples, 0.67%)</title><rect x="191.5" y="627.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="194.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.33%)</title><rect x="191.5" y="611.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="194.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (1 samples, 0.33%)</title><rect x="195.5" y="611.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="198.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (18 samples, 6.02%)</title><rect x="199.4" y="675.0" width="71.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="202.4" y="686.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.67%)</title><rect x="199.4" y="659.0" width="7.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="202.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (2 samples, 0.67%)</title><rect x="199.4" y="643.0" width="7.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="202.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (2 samples, 0.67%)</title><rect x="199.4" y="627.0" width="7.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="202.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (2 samples, 0.67%)</title><rect x="199.4" y="611.0" width="7.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="202.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (1 samples, 0.33%)</title><rect x="199.4" y="595.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="202.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (1 samples, 0.33%)</title><rect x="199.4" y="579.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="202.4" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (1 samples, 0.33%)</title><rect x="199.4" y="563.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="202.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.resetWithEmpty (1 samples, 0.33%)</title><rect x="203.4" y="595.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="206.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 1.00%)</title><rect x="207.3" y="659.0" width="11.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="210.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 1.00%)</title><rect x="207.3" y="643.0" width="11.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="210.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.33%)</title><rect x="215.2" y="627.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="218.2" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (3 samples, 1.00%)</title><rect x="219.2" y="659.0" width="11.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="222.2" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 1.00%)</title><rect x="219.2" y="643.0" width="11.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="222.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (10 samples, 3.34%)</title><rect x="231.0" y="659.0" width="39.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="234.0" y="670.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.00%)</title><rect x="231.0" y="643.0" width="11.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="234.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.33%)</title><rect x="238.9" y="627.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="241.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.33%)</title><rect x="238.9" y="611.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="241.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.33%)</title><rect x="238.9" y="595.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="241.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (7 samples, 2.34%)</title><rect x="242.8" y="643.0" width="27.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="245.8" y="654.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (7 samples, 2.34%)</title><rect x="242.8" y="627.0" width="27.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="245.8" y="638.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (7 samples, 2.34%)</title><rect x="242.8" y="611.0" width="27.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="245.8" y="622.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.67%)</title><rect x="242.8" y="595.0" width="7.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="245.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.67%)</title><rect x="242.8" y="579.0" width="7.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="245.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.67%)</title><rect x="242.8" y="563.0" width="7.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="245.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.67%)</title><rect x="242.8" y="547.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="245.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.33%)</title><rect x="246.8" y="531.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="249.8" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.67%)</title><rect x="250.7" y="595.0" width="7.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="253.7" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.33%)</title><rect x="254.7" y="579.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="257.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.33%)</title><rect x="254.7" y="563.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="257.7" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.33%)</title><rect x="254.7" y="547.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="257.7" y="558.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.33%)</title><rect x="254.7" y="531.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="257.7" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.33%)</title><rect x="258.6" y="595.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="261.6" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.33%)</title><rect x="258.6" y="579.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="261.6" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.33%)</title><rect x="258.6" y="563.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="261.6" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 0.67%)</title><rect x="262.6" y="595.0" width="7.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="265.6" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (2 samples, 0.67%)</title><rect x="262.6" y="579.0" width="7.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="265.6" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.33%)</title><rect x="266.5" y="563.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="269.5" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (3 samples, 1.00%)</title><rect x="270.5" y="675.0" width="11.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="273.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 1.00%)</title><rect x="270.5" y="659.0" width="11.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="273.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (3 samples, 1.00%)</title><rect x="270.5" y="643.0" width="11.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="273.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (3 samples, 1.00%)</title><rect x="270.5" y="627.0" width="11.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="273.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 1.00%)</title><rect x="270.5" y="611.0" width="11.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="273.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (1 samples, 0.33%)</title><rect x="278.4" y="595.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="281.4" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (157 samples, 52.51%)</title><rect x="282.3" y="771.0" width="619.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="285.3" y="782.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (32 samples, 10.70%)</title><rect x="282.3" y="755.0" width="126.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="285.3" y="766.0">com/linecorp/dec..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (30 samples, 10.03%)</title><rect x="290.2" y="739.0" width="118.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="293.2" y="750.0">org/slf4j/MDC...</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (26 samples, 8.70%)</title><rect x="306.0" y="723.0" width="102.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="309.0" y="734.0">ch/qos/logba..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.67%)</title><rect x="309.9" y="707.0" width="7.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="312.9" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.67%)</title><rect x="309.9" y="691.0" width="7.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="312.9" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.67%)</title><rect x="309.9" y="675.0" width="7.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="312.9" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.67%)</title><rect x="309.9" y="659.0" width="7.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="312.9" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.33%)</title><rect x="313.9" y="643.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="316.9" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (23 samples, 7.69%)</title><rect x="317.8" y="707.0" width="90.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="320.8" y="718.0">java/util/..</text>
</g>
<g>
<title>java/util/HashMap.remove (12 samples, 4.01%)</title><rect x="361.2" y="691.0" width="47.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="364.2" y="702.0">java..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (12 samples, 4.01%)</title><rect x="361.2" y="675.0" width="47.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="364.2" y="686.0">java..</text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 1.34%)</title><rect x="392.8" y="659.0" width="15.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="395.8" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.67%)</title><rect x="408.6" y="755.0" width="7.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="411.6" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.67%)</title><rect x="408.6" y="739.0" width="7.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="411.6" y="750.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.67%)</title><rect x="408.6" y="723.0" width="7.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="411.6" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (19 samples, 6.35%)</title><rect x="416.5" y="755.0" width="75.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="419.5" y="766.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (19 samples, 6.35%)</title><rect x="416.5" y="739.0" width="75.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="419.5" y="750.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (9 samples, 3.01%)</title><rect x="424.4" y="723.0" width="35.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="427.4" y="734.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (9 samples, 3.01%)</title><rect x="424.4" y="707.0" width="35.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="427.4" y="718.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (9 samples, 3.01%)</title><rect x="424.4" y="691.0" width="35.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="427.4" y="702.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (7 samples, 2.34%)</title><rect x="424.4" y="675.0" width="27.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="427.4" y="686.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (7 samples, 2.34%)</title><rect x="424.4" y="659.0" width="27.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="427.4" y="670.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 2.34%)</title><rect x="424.4" y="643.0" width="27.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="427.4" y="654.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (5 samples, 1.67%)</title><rect x="424.4" y="627.0" width="19.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="427.4" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.67%)</title><rect x="424.4" y="611.0" width="7.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="427.4" y="622.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.67%)</title><rect x="424.4" y="595.0" width="7.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="427.4" y="606.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.67%)</title><rect x="424.4" y="579.0" width="7.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="427.4" y="590.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.33%)</title><rect x="424.4" y="563.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="427.4" y="574.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.33%)</title><rect x="428.3" y="563.0" width="4.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="431.3" y="574.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 1.00%)</title><rect x="432.3" y="611.0" width="11.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="435.3" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 1.00%)</title><rect x="432.3" y="595.0" width="11.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="435.3" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.33%)</title><rect x="440.2" y="579.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="443.2" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.33%)</title><rect x="440.2" y="563.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="443.2" y="574.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.33%)</title><rect x="440.2" y="547.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="443.2" y="558.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.33%)</title><rect x="440.2" y="531.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="443.2" y="542.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.67%)</title><rect x="444.1" y="627.0" width="7.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="447.1" y="638.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.67%)</title><rect x="452.0" y="675.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="455.0" y="686.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.33%)</title><rect x="459.9" y="723.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="462.9" y="734.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.33%)</title><rect x="459.9" y="707.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="462.9" y="718.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.33%)</title><rect x="459.9" y="691.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="462.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.33%)</title><rect x="459.9" y="675.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="462.9" y="686.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (7 samples, 2.34%)</title><rect x="463.8" y="723.0" width="27.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="466.8" y="734.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (7 samples, 2.34%)</title><rect x="463.8" y="707.0" width="27.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="466.8" y="718.0">c..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (7 samples, 2.34%)</title><rect x="463.8" y="691.0" width="27.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="466.8" y="702.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (7 samples, 2.34%)</title><rect x="463.8" y="675.0" width="27.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="466.8" y="686.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 1.67%)</title><rect x="471.7" y="659.0" width="19.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="474.7" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.33%)</title><rect x="487.5" y="643.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="490.5" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (93 samples, 31.10%)</title><rect x="491.5" y="755.0" width="367.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="494.5" y="766.0">com/linecorp/decaton/processor/runtime/ProcessingC..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (93 samples, 31.10%)</title><rect x="491.5" y="739.0" width="367.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="494.5" y="750.0">com/linecorp/decaton/processor/runtime/ProcessingC..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1487619603.process (83 samples, 27.76%)</title><rect x="499.4" y="723.0" width="327.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="502.4" y="734.0">com/linecorp/decaton/benchmark/DecatonRunner..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (83 samples, 27.76%)</title><rect x="499.4" y="707.0" width="327.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="502.4" y="718.0">com/linecorp/decaton/benchmark/DecatonRunner..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (81 samples, 27.09%)</title><rect x="503.3" y="691.0" width="319.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="506.3" y="702.0">com/linecorp/decaton/benchmark/Recording.pr..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (77 samples, 25.75%)</title><rect x="507.3" y="675.0" width="303.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="510.3" y="686.0">com/linecorp/decaton/benchmark/Recording$..</text>
</g>
<g>
<title>java/lang/Thread.sleep (76 samples, 25.42%)</title><rect x="507.3" y="659.0" width="299.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="510.3" y="670.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (69 samples, 23.08%)</title><rect x="527.0" y="643.0" width="272.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="530.0" y="654.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.67%)</title><rect x="554.6" y="627.0" width="7.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="557.6" y="638.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.33%)</title><rect x="562.5" y="627.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="565.5" y="638.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.33%)</title><rect x="566.5" y="627.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="569.5" y="638.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 1.67%)</title><rect x="570.4" y="627.0" width="19.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="573.4" y="638.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.33%)</title><rect x="586.2" y="611.0" width="3.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="589.2" y="622.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.33%)</title><rect x="590.1" y="627.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="593.1" y="638.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.33%)</title><rect x="594.1" y="627.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="597.1" y="638.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (51 samples, 17.06%)</title><rect x="598.0" y="627.0" width="201.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="601.0" y="638.0">os::sleep(Thread*, long, b..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (5 samples, 1.67%)</title><rect x="649.3" y="611.0" width="19.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="652.3" y="622.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.33%)</title><rect x="669.1" y="611.0" width="3.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="672.1" y="622.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.33%)</title><rect x="669.1" y="595.0" width="3.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="672.1" y="606.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 1.34%)</title><rect x="673.0" y="611.0" width="15.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="676.0" y="622.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (12 samples, 4.01%)</title><rect x="688.8" y="611.0" width="47.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="691.8" y="622.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.33%)</title><rect x="736.2" y="611.0" width="3.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="739.2" y="622.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.67%)</title><rect x="740.1" y="611.0" width="7.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="743.1" y="622.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (10 samples, 3.34%)</title><rect x="748.0" y="611.0" width="39.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="751.0" y="622.0">os:..</text>
</g>
<g>
<title>pthread_getspecific (3 samples, 1.00%)</title><rect x="787.5" y="611.0" width="11.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="790.5" y="622.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.33%)</title><rect x="799.3" y="643.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="802.3" y="654.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (1 samples, 0.33%)</title><rect x="803.2" y="643.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="806.2" y="654.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.33%)</title><rect x="807.2" y="659.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="810.2" y="670.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.33%)</title><rect x="807.2" y="643.0" width="3.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="810.2" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.33%)</title><rect x="811.1" y="675.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="814.1" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.67%)</title><rect x="815.1" y="675.0" width="7.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="818.1" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.67%)</title><rect x="815.1" y="659.0" width="7.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="818.1" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.67%)</title><rect x="815.1" y="643.0" width="7.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="818.1" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.33%)</title><rect x="823.0" y="691.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="826.0" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.33%)</title><rect x="823.0" y="675.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="826.0" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.33%)</title><rect x="823.0" y="659.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="826.0" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.33%)</title><rect x="823.0" y="643.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="826.0" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.33%)</title><rect x="823.0" y="627.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="826.0" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (2 samples, 0.67%)</title><rect x="826.9" y="723.0" width="7.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="829.9" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1016925085.linkToTargetMethod (3 samples, 1.00%)</title><rect x="834.8" y="723.0" width="11.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="837.8" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (3 samples, 1.00%)</title><rect x="834.8" y="707.0" width="11.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="837.8" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$290/1888296165.get$Lambda (3 samples, 1.00%)</title><rect x="834.8" y="691.0" width="11.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="837.8" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.67%)</title><rect x="846.7" y="723.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="849.7" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.67%)</title><rect x="846.7" y="707.0" width="7.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="849.7" y="718.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.33%)</title><rect x="846.7" y="691.0" width="3.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="849.7" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.33%)</title><rect x="850.6" y="691.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="853.6" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.33%)</title><rect x="854.5" y="723.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="857.5" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.33%)</title><rect x="854.5" y="707.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="857.5" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.33%)</title><rect x="858.5" y="755.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="861.5" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.33%)</title><rect x="858.5" y="739.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="861.5" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.33%)</title><rect x="858.5" y="723.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="861.5" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.33%)</title><rect x="858.5" y="707.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="861.5" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.33%)</title><rect x="858.5" y="691.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="861.5" y="702.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.33%)</title><rect x="858.5" y="675.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="861.5" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.33%)</title><rect x="858.5" y="659.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="861.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 3.34%)</title><rect x="862.4" y="755.0" width="39.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="865.4" y="766.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 3.34%)</title><rect x="862.4" y="739.0" width="39.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="865.4" y="750.0">jav..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.33%)</title><rect x="894.0" y="723.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="897.0" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.33%)</title><rect x="894.0" y="707.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="897.0" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.33%)</title><rect x="894.0" y="691.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="897.0" y="702.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.33%)</title><rect x="898.0" y="723.0" width="3.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="901.0" y="734.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.33%)</title><rect x="898.0" y="707.0" width="3.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="901.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (17 samples, 5.69%)</title><rect x="901.9" y="771.0" width="67.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="904.9" y="782.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (17 samples, 5.69%)</title><rect x="901.9" y="755.0" width="67.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="904.9" y="766.0">java/ut..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (2 samples, 0.67%)</title><rect x="901.9" y="739.0" width="7.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="904.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (15 samples, 5.02%)</title><rect x="909.8" y="739.0" width="59.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="912.8" y="750.0">java/u..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$295/1555559644.accept (15 samples, 5.02%)</title><rect x="909.8" y="723.0" width="59.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="912.8" y="734.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$43 (15 samples, 5.02%)</title><rect x="909.8" y="707.0" width="59.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="912.8" y="718.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/1219200556.complete (15 samples, 5.02%)</title><rect x="909.8" y="691.0" width="59.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="912.8" y="702.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$46 (15 samples, 5.02%)</title><rect x="909.8" y="675.0" width="59.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="912.8" y="686.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/456944376.complete (13 samples, 4.35%)</title><rect x="909.8" y="659.0" width="51.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="912.8" y="670.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (13 samples, 4.35%)</title><rect x="909.8" y="643.0" width="51.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="912.8" y="654.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (13 samples, 4.35%)</title><rect x="909.8" y="627.0" width="51.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="912.8" y="638.0">com/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (13 samples, 4.35%)</title><rect x="909.8" y="611.0" width="51.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="912.8" y="622.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (13 samples, 4.35%)</title><rect x="909.8" y="595.0" width="51.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="912.8" y="606.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (13 samples, 4.35%)</title><rect x="909.8" y="579.0" width="51.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="912.8" y="590.0">ch/qo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$276/787011348.complete (2 samples, 0.67%)</title><rect x="961.1" y="659.0" width="7.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="964.1" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$null$71 (2 samples, 0.67%)</title><rect x="961.1" y="643.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="964.1" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (4 samples, 1.34%)</title><rect x="969.0" y="787.0" width="15.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="972.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (7 samples, 2.34%)</title><rect x="984.8" y="835.0" width="27.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="987.8" y="846.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (6 samples, 2.01%)</title><rect x="984.8" y="819.0" width="23.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="987.8" y="830.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.00%)</title><rect x="996.6" y="803.0" width="11.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="999.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.00%)</title><rect x="996.6" y="787.0" width="11.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="999.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.00%)</title><rect x="996.6" y="771.0" width="11.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="999.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.00%)</title><rect x="996.6" y="755.0" width="11.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="999.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateOf (1 samples, 0.33%)</title><rect x="1008.5" y="819.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1011.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.67%)</title><rect x="1012.4" y="883.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1015.4" y="894.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.33%)</title><rect x="1012.4" y="867.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1015.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.33%)</title><rect x="1016.4" y="867.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1019.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.33%)</title><rect x="1016.4" y="851.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1019.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.maybeThrowAnyException (1 samples, 0.33%)</title><rect x="1016.4" y="835.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1019.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.clearErrorsAndMaybeThrowException (1 samples, 0.33%)</title><rect x="1016.4" y="819.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1019.4" y="830.0"></text>
</g>
<g>
<title>java/util/Optional.orElseGet (1 samples, 0.33%)</title><rect x="1016.4" y="803.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1019.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$85/1438706454.get (1 samples, 0.33%)</title><rect x="1016.4" y="787.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1019.4" y="798.0"></text>
</g>
<g>
<title>start_thread (43 samples, 14.38%)</title><rect x="1020.3" y="883.0" width="169.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1023.3" y="894.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (43 samples, 14.38%)</title><rect x="1020.3" y="867.0" width="169.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1023.3" y="878.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (10 samples, 3.34%)</title><rect x="1020.3" y="851.0" width="39.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1023.3" y="862.0">Gan..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (10 samples, 3.34%)</title><rect x="1020.3" y="835.0" width="39.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1023.3" y="846.0">G1P..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 3.01%)</title><rect x="1020.3" y="819.0" width="35.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1023.3" y="830.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (9 samples, 3.01%)</title><rect x="1020.3" y="803.0" width="35.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1023.3" y="814.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 1.00%)</title><rect x="1040.0" y="787.0" width="11.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1043.0" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (3 samples, 1.00%)</title><rect x="1040.0" y="771.0" width="11.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1043.0" y="782.0"></text>
</g>
<g>
<title>Klass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.33%)</title><rect x="1051.9" y="787.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1054.9" y="798.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.33%)</title><rect x="1055.8" y="819.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1058.8" y="830.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.33%)</title><rect x="1055.8" y="803.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1058.8" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.33%)</title><rect x="1055.8" y="787.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1058.8" y="798.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.33%)</title><rect x="1055.8" y="771.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1058.8" y="782.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.33%)</title><rect x="1055.8" y="755.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1058.8" y="766.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.33%)</title><rect x="1055.8" y="739.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1058.8" y="750.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.33%)</title><rect x="1055.8" y="723.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1058.8" y="734.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.33%)</title><rect x="1055.8" y="707.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1058.8" y="718.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.33%)</title><rect x="1055.8" y="691.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1058.8" y="702.0"></text>
</g>
<g>
<title>JavaThread::run() (32 samples, 10.70%)</title><rect x="1059.8" y="851.0" width="126.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1062.8" y="862.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (32 samples, 10.70%)</title><rect x="1059.8" y="835.0" width="126.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1062.8" y="846.0">JavaThread::thre..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (32 samples, 10.70%)</title><rect x="1059.8" y="819.0" width="126.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1062.8" y="830.0">CompileBroker::c..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (32 samples, 10.70%)</title><rect x="1059.8" y="803.0" width="126.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1062.8" y="814.0">CompileBroker::i..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (29 samples, 9.70%)</title><rect x="1059.8" y="787.0" width="114.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1062.8" y="798.0">C2Compiler::co..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (29 samples, 9.70%)</title><rect x="1059.8" y="771.0" width="114.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1062.8" y="782.0">Compile::Compi..</text>
</g>
<g>
<title>Compile::Code_Gen() (17 samples, 5.69%)</title><rect x="1059.8" y="755.0" width="67.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1062.8" y="766.0">Compile..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.67%)</title><rect x="1059.8" y="739.0" width="7.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1062.8" y="750.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.33%)</title><rect x="1059.8" y="723.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1062.8" y="734.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.33%)</title><rect x="1059.8" y="707.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1062.8" y="718.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.33%)</title><rect x="1059.8" y="691.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1062.8" y="702.0"></text>
</g>
<g>
<title>loadConINode::bottom_type() const (1 samples, 0.33%)</title><rect x="1059.8" y="675.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1062.8" y="686.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.33%)</title><rect x="1059.8" y="659.0" width="3.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1062.8" y="670.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.33%)</title><rect x="1063.7" y="723.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1066.7" y="734.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.33%)</title><rect x="1063.7" y="707.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1066.7" y="718.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.33%)</title><rect x="1063.7" y="691.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1066.7" y="702.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.33%)</title><rect x="1063.7" y="675.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1066.7" y="686.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.33%)</title><rect x="1063.7" y="659.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1066.7" y="670.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.33%)</title><rect x="1067.7" y="739.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1070.7" y="750.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.33%)</title><rect x="1067.7" y="723.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1070.7" y="734.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.33%)</title><rect x="1067.7" y="707.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1070.7" y="718.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.33%)</title><rect x="1067.7" y="691.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1070.7" y="702.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.67%)</title><rect x="1071.6" y="739.0" width="7.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1074.6" y="750.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.33%)</title><rect x="1071.6" y="723.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1074.6" y="734.0"></text>
</g>
<g>
<title>MachSafePointNode::jvms() const (1 samples, 0.33%)</title><rect x="1071.6" y="707.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1074.6" y="718.0"></text>
</g>
<g>
<title>MergeMemNode::Opcode() const (1 samples, 0.33%)</title><rect x="1075.6" y="723.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1078.6" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.67%)</title><rect x="1079.5" y="739.0" width="7.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1082.5" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.67%)</title><rect x="1079.5" y="723.0" width="7.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1082.5" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (2 samples, 0.67%)</title><rect x="1079.5" y="707.0" width="7.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1082.5" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (10 samples, 3.34%)</title><rect x="1087.4" y="739.0" width="39.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1090.4" y="750.0">Pha..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.33%)</title><rect x="1087.4" y="723.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1090.4" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.33%)</title><rect x="1091.3" y="723.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1094.3" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 0.67%)</title><rect x="1095.3" y="723.0" width="7.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1098.3" y="734.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.33%)</title><rect x="1095.3" y="707.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1098.3" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.33%)</title><rect x="1099.2" y="707.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1102.2" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.67%)</title><rect x="1103.2" y="723.0" width="7.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1106.2" y="734.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.33%)</title><rect x="1107.1" y="707.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1110.1" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.33%)</title><rect x="1111.1" y="723.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1114.1" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.33%)</title><rect x="1111.1" y="707.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1114.1" y="718.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.67%)</title><rect x="1115.0" y="723.0" width="7.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1118.0" y="734.0"></text>
</g>
<g>
<title>RegMask::num_registers(unsigned int) (1 samples, 0.33%)</title><rect x="1122.9" y="723.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1125.9" y="734.0"></text>
</g>
<g>
<title>Compile::Optimize() (8 samples, 2.68%)</title><rect x="1126.9" y="755.0" width="31.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.9" y="766.0">Co..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.33%)</title><rect x="1126.9" y="739.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1129.9" y="750.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.33%)</title><rect x="1126.9" y="723.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.9" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.33%)</title><rect x="1130.8" y="739.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1133.8" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.33%)</title><rect x="1130.8" y="723.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1133.8" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.33%)</title><rect x="1130.8" y="707.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1133.8" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.33%)</title><rect x="1130.8" y="691.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1133.8" y="702.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.33%)</title><rect x="1130.8" y="675.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1133.8" y="686.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.33%)</title><rect x="1130.8" y="659.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1133.8" y="670.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.33%)</title><rect x="1130.8" y="643.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1133.8" y="654.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.33%)</title><rect x="1130.8" y="627.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1133.8" y="638.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.33%)</title><rect x="1130.8" y="611.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1133.8" y="622.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.33%)</title><rect x="1130.8" y="595.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1133.8" y="606.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.33%)</title><rect x="1130.8" y="579.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1133.8" y="590.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.33%)</title><rect x="1130.8" y="563.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1133.8" y="574.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.33%)</title><rect x="1130.8" y="547.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1133.8" y="558.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.33%)</title><rect x="1130.8" y="531.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1133.8" y="542.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.33%)</title><rect x="1130.8" y="515.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1133.8" y="526.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.33%)</title><rect x="1130.8" y="499.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1133.8" y="510.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.33%)</title><rect x="1130.8" y="483.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1133.8" y="494.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.33%)</title><rect x="1130.8" y="467.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1133.8" y="478.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.33%)</title><rect x="1130.8" y="451.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1133.8" y="462.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.33%)</title><rect x="1130.8" y="435.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1133.8" y="446.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.33%)</title><rect x="1130.8" y="419.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.8" y="430.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.33%)</title><rect x="1130.8" y="403.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1133.8" y="414.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.33%)</title><rect x="1130.8" y="387.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1133.8" y="398.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.33%)</title><rect x="1130.8" y="371.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1133.8" y="382.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.33%)</title><rect x="1130.8" y="355.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1133.8" y="366.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.33%)</title><rect x="1130.8" y="339.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1133.8" y="350.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.33%)</title><rect x="1130.8" y="323.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1133.8" y="334.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.33%)</title><rect x="1130.8" y="307.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.8" y="318.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.33%)</title><rect x="1130.8" y="291.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1133.8" y="302.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.33%)</title><rect x="1130.8" y="275.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1133.8" y="286.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.33%)</title><rect x="1130.8" y="259.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1133.8" y="270.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.33%)</title><rect x="1130.8" y="243.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1133.8" y="254.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.33%)</title><rect x="1130.8" y="227.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.8" y="238.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.33%)</title><rect x="1134.7" y="739.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1137.7" y="750.0"></text>
</g>
<g>
<title>URShiftLNode::Value(PhaseTransform*) const (1 samples, 0.33%)</title><rect x="1134.7" y="723.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1137.7" y="734.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.33%)</title><rect x="1134.7" y="707.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1137.7" y="718.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.33%)</title><rect x="1134.7" y="691.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1137.7" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (2 samples, 0.67%)</title><rect x="1138.7" y="739.0" width="7.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1141.7" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.33%)</title><rect x="1138.7" y="723.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1141.7" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.33%)</title><rect x="1142.6" y="723.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1145.6" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.67%)</title><rect x="1146.6" y="739.0" width="7.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.6" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.33%)</title><rect x="1146.6" y="723.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.6" y="734.0"></text>
</g>
<g>
<title>AbstractLockNode::find_lock_and_unlock_through_if(Node*, LockNode*, GrowableArray&lt;AbstractLockNode*&gt;&amp;) (1 samples, 0.33%)</title><rect x="1146.6" y="707.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.6" y="718.0"></text>
</g>
<g>
<title>TypePtr::singleton() const (1 samples, 0.33%)</title><rect x="1150.5" y="723.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.5" y="734.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.33%)</title><rect x="1154.5" y="739.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.5" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.33%)</title><rect x="1154.5" y="723.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1157.5" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.33%)</title><rect x="1154.5" y="707.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.5" y="718.0"></text>
</g>
<g>
<title>StoreNode::Identity(PhaseTransform*) (1 samples, 0.33%)</title><rect x="1154.5" y="691.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1157.5" y="702.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.33%)</title><rect x="1154.5" y="675.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1157.5" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.34%)</title><rect x="1158.4" y="755.0" width="15.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.4" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.34%)</title><rect x="1158.4" y="739.0" width="15.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.4" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.34%)</title><rect x="1158.4" y="723.0" width="15.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.34%)</title><rect x="1158.4" y="707.0" width="15.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.34%)</title><rect x="1158.4" y="691.0" width="15.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.34%)</title><rect x="1158.4" y="675.0" width="15.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.4" y="686.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.33%)</title><rect x="1158.4" y="659.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.4" y="670.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.33%)</title><rect x="1158.4" y="643.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.4" y="654.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.33%)</title><rect x="1158.4" y="627.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.4" y="638.0"></text>
</g>
<g>
<title>LinkResolver::resolve_virtual_call_or_null(KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.33%)</title><rect x="1158.4" y="611.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.4" y="622.0"></text>
</g>
<g>
<title>LinkResolver::resolve_virtual_call(CallInfo&amp;, Handle, KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.33%)</title><rect x="1158.4" y="595.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.4" y="606.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_virtual_method(CallInfo&amp;, methodHandle, KlassHandle, Handle, KlassHandle, bool, Thread*) (1 samples, 0.33%)</title><rect x="1158.4" y="579.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.4" y="590.0"></text>
</g>
<g>
<title>CallInfo::set_virtual(KlassHandle, KlassHandle, methodHandle, methodHandle, int, Thread*) (1 samples, 0.33%)</title><rect x="1158.4" y="563.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.4" y="574.0"></text>
</g>
<g>
<title>CallInfo::set_common(KlassHandle, KlassHandle, methodHandle, methodHandle, CallInfo::CallKind, int, Thread*) (1 samples, 0.33%)</title><rect x="1158.4" y="547.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.4" y="558.0"></text>
</g>
<g>
<title>CompilationPolicy::must_be_compiled(methodHandle, int) (1 samples, 0.33%)</title><rect x="1158.4" y="531.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.4" y="542.0"></text>
</g>
<g>
<title>CompilationPolicy::can_be_compiled(methodHandle, int) (1 samples, 0.33%)</title><rect x="1158.4" y="515.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.4" y="526.0"></text>
</g>
<g>
<title>AbstractInterpreter::can_be_compiled(methodHandle) (1 samples, 0.33%)</title><rect x="1158.4" y="499.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.4" y="510.0"></text>
</g>
<g>
<title>Method::is_accessor() const (1 samples, 0.33%)</title><rect x="1158.4" y="483.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.4" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.67%)</title><rect x="1162.4" y="659.0" width="7.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.4" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.67%)</title><rect x="1162.4" y="643.0" width="7.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.67%)</title><rect x="1162.4" y="627.0" width="7.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.67%)</title><rect x="1162.4" y="611.0" width="7.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.67%)</title><rect x="1162.4" y="595.0" width="7.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.67%)</title><rect x="1162.4" y="579.0" width="7.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.4" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.67%)</title><rect x="1162.4" y="563.0" width="7.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.4" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.67%)</title><rect x="1162.4" y="547.0" width="7.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.67%)</title><rect x="1162.4" y="531.0" width="7.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.67%)</title><rect x="1162.4" y="515.0" width="7.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.67%)</title><rect x="1162.4" y="499.0" width="7.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.67%)</title><rect x="1162.4" y="483.0" width="7.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.4" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.67%)</title><rect x="1162.4" y="467.0" width="7.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.4" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.67%)</title><rect x="1162.4" y="451.0" width="7.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.67%)</title><rect x="1162.4" y="435.0" width="7.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.67%)</title><rect x="1162.4" y="419.0" width="7.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.67%)</title><rect x="1162.4" y="403.0" width="7.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.67%)</title><rect x="1162.4" y="387.0" width="7.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1165.4" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.67%)</title><rect x="1162.4" y="371.0" width="7.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.4" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.67%)</title><rect x="1162.4" y="355.0" width="7.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.67%)</title><rect x="1162.4" y="339.0" width="7.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.67%)</title><rect x="1162.4" y="323.0" width="7.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.67%)</title><rect x="1162.4" y="307.0" width="7.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.67%)</title><rect x="1162.4" y="291.0" width="7.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.4" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.67%)</title><rect x="1162.4" y="275.0" width="7.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.4" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.67%)</title><rect x="1162.4" y="259.0" width="7.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.4" y="270.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.33%)</title><rect x="1162.4" y="243.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.4" y="254.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.33%)</title><rect x="1162.4" y="227.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.4" y="238.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.33%)</title><rect x="1162.4" y="211.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.33%)</title><rect x="1166.3" y="243.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.33%)</title><rect x="1166.3" y="227.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.33%)</title><rect x="1166.3" y="211.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.3" y="222.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.33%)</title><rect x="1166.3" y="195.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.3" y="206.0"></text>
</g>
<g>
<title>RegionNode::RegionNode(unsigned int) (1 samples, 0.33%)</title><rect x="1166.3" y="179.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.3" y="190.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.33%)</title><rect x="1166.3" y="163.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.3" y="174.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1170.3" y="659.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.3" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1170.3" y="643.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.3" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.33%)</title><rect x="1170.3" y="627.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.33%)</title><rect x="1170.3" y="611.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.33%)</title><rect x="1170.3" y="595.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.33%)</title><rect x="1170.3" y="579.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.33%)</title><rect x="1170.3" y="563.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.3" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1170.3" y="547.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.3" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.33%)</title><rect x="1170.3" y="531.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.33%)</title><rect x="1170.3" y="515.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.33%)</title><rect x="1170.3" y="499.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.33%)</title><rect x="1170.3" y="483.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.33%)</title><rect x="1170.3" y="467.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.3" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1170.3" y="451.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.3" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.33%)</title><rect x="1170.3" y="435.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.33%)</title><rect x="1170.3" y="419.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.33%)</title><rect x="1170.3" y="403.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.33%)</title><rect x="1170.3" y="387.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.33%)</title><rect x="1170.3" y="371.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.3" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1170.3" y="355.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.3" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.33%)</title><rect x="1170.3" y="339.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.33%)</title><rect x="1170.3" y="323.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.33%)</title><rect x="1170.3" y="307.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.33%)</title><rect x="1170.3" y="291.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.33%)</title><rect x="1170.3" y="275.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.3" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.33%)</title><rect x="1170.3" y="259.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.3" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.33%)</title><rect x="1170.3" y="243.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.33%)</title><rect x="1170.3" y="227.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.33%)</title><rect x="1170.3" y="211.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.33%)</title><rect x="1170.3" y="195.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.33%)</title><rect x="1170.3" y="179.0" width="3.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.3" y="190.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.33%)</title><rect x="1170.3" y="163.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.3" y="174.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.33%)</title><rect x="1170.3" y="147.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.3" y="158.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.33%)</title><rect x="1170.3" y="131.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.3" y="142.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.33%)</title><rect x="1170.3" y="115.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.3" y="126.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.33%)</title><rect x="1170.3" y="99.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.3" y="110.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.33%)</title><rect x="1170.3" y="83.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.3" y="94.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.33%)</title><rect x="1170.3" y="67.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.3" y="78.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.33%)</title><rect x="1170.3" y="51.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.3" y="62.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*) (1 samples, 0.33%)</title><rect x="1170.3" y="35.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.3" y="46.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.00%)</title><rect x="1174.2" y="787.0" width="11.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.2" y="798.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.00%)</title><rect x="1174.2" y="771.0" width="11.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.2" y="782.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.00%)</title><rect x="1174.2" y="755.0" width="11.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.2" y="766.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.67%)</title><rect x="1174.2" y="739.0" width="7.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.2" y="750.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (2 samples, 0.67%)</title><rect x="1174.2" y="723.0" width="7.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.2" y="734.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (2 samples, 0.67%)</title><rect x="1174.2" y="707.0" width="7.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.2" y="718.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_op1(LIR_Op1*) (1 samples, 0.33%)</title><rect x="1174.2" y="691.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.2" y="702.0"></text>
</g>
<g>
<title>LIR_Assembler::reg2reg(LIR_OprDesc*, LIR_OprDesc*) (1 samples, 0.33%)</title><rect x="1174.2" y="675.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.2" y="686.0"></text>
</g>
<g>
<title>MacroAssembler::testl(RegisterImpl*, AddressLiteral) (1 samples, 0.33%)</title><rect x="1178.2" y="691.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.2" y="702.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.33%)</title><rect x="1182.1" y="739.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.1" y="750.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.33%)</title><rect x="1182.1" y="723.0" width="4.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.1" y="734.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.33%)</title><rect x="1182.1" y="707.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.1" y="718.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.33%)</title><rect x="1182.1" y="691.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.1" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::register_nmethod(nmethod*) (1 samples, 0.33%)</title><rect x="1182.1" y="675.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.1" y="686.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.33%)</title><rect x="1182.1" y="659.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.1" y="670.0"></text>
</g>
<g>
<title>G1CodeRootSet::add(nmethod*) (1 samples, 0.33%)</title><rect x="1182.1" y="643.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.1" y="654.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.33%)</title><rect x="1186.1" y="851.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.1" y="862.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.33%)</title><rect x="1186.1" y="835.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.1" y="846.0"></text>
</g>
<g>
<title>PerfLongVariant::sample() (1 samples, 0.33%)</title><rect x="1186.1" y="819.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.1" y="830.0"></text>
</g>
</g>
</svg>
