<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1206" onload="init(evt)" viewBox="0 0 1200 1206" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1189"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1189"> </text>
<g id="frames">
<g>
<title>all (1,167 samples, 100.00%)</title><rect x="10.0" y="1155.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1166.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (268 samples, 22.96%)</title><rect x="10.0" y="1139.0" width="271.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1150.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="10.0" y="1123.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="10.0" y="1107.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.09%)</title><rect x="11.0" y="1123.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.0" y="1134.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="11.0" y="1107.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.0" y="1118.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="11.0" y="1091.0" width="1.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="14.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (265 samples, 22.71%)</title><rect x="12.0" y="1123.0" width="268.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.0" y="1134.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (2 samples, 0.17%)</title><rect x="12.0" y="1107.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.0" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.17%)</title><rect x="12.0" y="1091.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/698405056.accept (2 samples, 0.17%)</title><rect x="12.0" y="1075.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.0" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (2 samples, 0.17%)</title><rect x="12.0" y="1059.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.0" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.09%)</title><rect x="13.0" y="1043.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.0" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.09%)</title><rect x="13.0" y="1027.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (4 samples, 0.34%)</title><rect x="14.0" y="1107.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.0" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (4 samples, 0.34%)</title><rect x="14.0" y="1091.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.0" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.34%)</title><rect x="14.0" y="1075.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.0" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.34%)</title><rect x="14.0" y="1059.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.0" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.26%)</title><rect x="15.1" y="1043.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.1" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.26%)</title><rect x="15.1" y="1027.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.1" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.26%)</title><rect x="15.1" y="1011.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.1" y="1022.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="15.1" y="995.0" width="1.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="18.1" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.17%)</title><rect x="16.1" y="995.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.1" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.17%)</title><rect x="16.1" y="979.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.1" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.17%)</title><rect x="16.1" y="963.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.1" y="974.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.17%)</title><rect x="16.1" y="947.0" width="2.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="19.1" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.09%)</title><rect x="18.1" y="1107.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.1" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.09%)</title><rect x="18.1" y="1091.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (196 samples, 16.80%)</title><rect x="19.1" y="1107.0" width="198.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.1" y="1118.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1191485037.accept (191 samples, 16.37%)</title><rect x="19.1" y="1091.0" width="193.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.1" y="1102.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="19.1" y="1075.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="22.1" y="1086.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="19.1" y="1059.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="22.1" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$72 (190 samples, 16.28%)</title><rect x="20.1" y="1075.0" width="192.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.1" y="1086.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (158 samples, 13.54%)</title><rect x="20.1" y="1059.0" width="159.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.1" y="1070.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (158 samples, 13.54%)</title><rect x="20.1" y="1043.0" width="159.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.1" y="1054.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (158 samples, 13.54%)</title><rect x="20.1" y="1027.0" width="159.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.1" y="1038.0">com/linecorp/decaton..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (158 samples, 13.54%)</title><rect x="20.1" y="1011.0" width="159.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.1" y="1022.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (158 samples, 13.54%)</title><rect x="20.1" y="995.0" width="159.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.1" y="1006.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (158 samples, 13.54%)</title><rect x="20.1" y="979.0" width="159.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.1" y="990.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (112 samples, 9.60%)</title><rect x="57.5" y="963.0" width="113.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="60.5" y="974.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (20 samples, 1.71%)</title><rect x="57.5" y="947.0" width="20.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="60.5" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (20 samples, 1.71%)</title><rect x="57.5" y="931.0" width="20.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="60.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (20 samples, 1.71%)</title><rect x="57.5" y="915.0" width="20.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="60.5" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (12 samples, 1.03%)</title><rect x="77.7" y="947.0" width="12.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="80.7" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (12 samples, 1.03%)</title><rect x="77.7" y="931.0" width="12.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="80.7" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.26%)</title><rect x="78.8" y="915.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="81.8" y="926.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (3 samples, 0.26%)</title><rect x="78.8" y="899.0" width="3.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="81.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (8 samples, 0.69%)</title><rect x="81.8" y="915.0" width="8.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="84.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (80 samples, 6.86%)</title><rect x="89.9" y="947.0" width="80.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="92.9" y="958.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (80 samples, 6.86%)</title><rect x="89.9" y="931.0" width="80.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="92.9" y="942.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (78 samples, 6.68%)</title><rect x="89.9" y="915.0" width="78.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="92.9" y="926.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (78 samples, 6.68%)</title><rect x="89.9" y="899.0" width="78.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="92.9" y="910.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (76 samples, 6.51%)</title><rect x="91.9" y="883.0" width="76.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="94.9" y="894.0">sun/misc..</text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="92.9" y="867.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="95.9" y="878.0"></text>
</g>
<g>
<title>Unsafe_Unpark (70 samples, 6.00%)</title><rect x="93.9" y="867.0" width="70.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="96.9" y="878.0">Unsafe_U..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.17%)</title><rect x="94.9" y="851.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="97.9" y="862.0"></text>
</g>
<g>
<title>Parker::unpark() (4 samples, 0.34%)</title><rect x="97.0" y="851.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="100.0" y="862.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="101.0" y="851.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="104.0" y="862.0"></text>
</g>
<g>
<title>__pthread_cond_signal (39 samples, 3.34%)</title><rect x="102.0" y="851.0" width="39.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="105.0" y="862.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.17%)</title><rect x="141.4" y="851.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="144.4" y="862.0"></text>
</g>
<g>
<title>pthread_mutex_lock (21 samples, 1.80%)</title><rect x="143.5" y="851.0" width="21.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="146.5" y="862.0">p..</text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.34%)</title><rect x="164.7" y="867.0" width="4.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="167.7" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.17%)</title><rect x="168.7" y="915.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="171.7" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.09%)</title><rect x="170.8" y="963.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="173.8" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.09%)</title><rect x="170.8" y="947.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="173.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.09%)</title><rect x="170.8" y="931.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="173.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.43%)</title><rect x="171.8" y="963.0" width="5.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="174.8" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (5 samples, 0.43%)</title><rect x="171.8" y="947.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="174.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.43%)</title><rect x="171.8" y="931.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="174.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.09%)</title><rect x="176.8" y="963.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="179.8" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="176.8" y="947.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="179.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.09%)</title><rect x="176.8" y="931.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="179.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.09%)</title><rect x="176.8" y="915.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="179.8" y="926.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="177.8" y="963.0" width="2.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="180.8" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (7 samples, 0.60%)</title><rect x="179.9" y="1059.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="182.9" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.60%)</title><rect x="179.9" y="1043.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="182.9" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.60%)</title><rect x="179.9" y="1027.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="182.9" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (25 samples, 2.14%)</title><rect x="186.9" y="1059.0" width="25.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="189.9" y="1070.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (25 samples, 2.14%)</title><rect x="186.9" y="1043.0" width="25.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="189.9" y="1054.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 0.51%)</title><rect x="204.1" y="1027.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="207.1" y="1038.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.17%)</title><rect x="204.1" y="1011.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="207.1" y="1022.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.17%)</title><rect x="204.1" y="995.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="207.1" y="1006.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.17%)</title><rect x="204.1" y="979.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="207.1" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="205.1" y="963.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="208.1" y="974.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="205.1" y="947.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="208.1" y="958.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (3 samples, 0.26%)</title><rect x="206.2" y="1011.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="209.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.09%)</title><rect x="209.2" y="1011.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="212.2" y="1022.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="210.2" y="1027.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="213.2" y="1038.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="211.2" y="1027.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="214.2" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.09%)</title><rect x="212.2" y="1091.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="215.2" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.09%)</title><rect x="212.2" y="1075.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="215.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.17%)</title><rect x="213.2" y="1091.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="216.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 0.17%)</title><rect x="213.2" y="1075.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="216.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.17%)</title><rect x="213.2" y="1059.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="216.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.17%)</title><rect x="213.2" y="1043.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="216.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (2 samples, 0.17%)</title><rect x="215.3" y="1091.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="218.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.17%)</title><rect x="215.3" y="1075.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="218.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 0.17%)</title><rect x="215.3" y="1059.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="218.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.17%)</title><rect x="215.3" y="1043.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="218.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.17%)</title><rect x="215.3" y="1027.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="218.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (62 samples, 5.31%)</title><rect x="217.3" y="1107.0" width="62.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="220.3" y="1118.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (62 samples, 5.31%)</title><rect x="217.3" y="1091.0" width="62.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="220.3" y="1102.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (35 samples, 3.00%)</title><rect x="217.3" y="1075.0" width="35.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="220.3" y="1086.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (2 samples, 0.17%)</title><rect x="217.3" y="1059.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="220.3" y="1070.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 0.09%)</title><rect x="217.3" y="1043.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="220.3" y="1054.0"></text>
</g>
<g>
<title>ExceptionMark::~ExceptionMark() (1 samples, 0.09%)</title><rect x="217.3" y="1027.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="220.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.09%)</title><rect x="218.3" y="1043.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="221.3" y="1054.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.09%)</title><rect x="218.3" y="1027.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="221.3" y="1038.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.09%)</title><rect x="218.3" y="1011.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="221.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (33 samples, 2.83%)</title><rect x="219.3" y="1059.0" width="33.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="222.3" y="1070.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (31 samples, 2.66%)</title><rect x="221.3" y="1043.0" width="31.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="224.3" y="1054.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (26 samples, 2.23%)</title><rect x="221.3" y="1027.0" width="26.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="224.3" y="1038.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (26 samples, 2.23%)</title><rect x="221.3" y="1011.0" width="26.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="224.3" y="1022.0">o..</text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.09%)</title><rect x="223.4" y="995.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="226.4" y="1006.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.09%)</title><rect x="223.4" y="979.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="226.4" y="990.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.09%)</title><rect x="223.4" y="963.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="226.4" y="974.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.09%)</title><rect x="223.4" y="947.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="226.4" y="958.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.09%)</title><rect x="223.4" y="931.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="226.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (10 samples, 0.86%)</title><rect x="224.4" y="995.0" width="10.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="227.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (7 samples, 0.60%)</title><rect x="227.4" y="979.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="230.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (7 samples, 0.60%)</title><rect x="227.4" y="963.0" width="7.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="230.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (7 samples, 0.60%)</title><rect x="227.4" y="947.0" width="7.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="230.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (7 samples, 0.60%)</title><rect x="227.4" y="931.0" width="7.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="230.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (7 samples, 0.60%)</title><rect x="227.4" y="915.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="230.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (7 samples, 0.60%)</title><rect x="227.4" y="899.0" width="7.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="230.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (7 samples, 0.60%)</title><rect x="227.4" y="883.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="230.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (13 samples, 1.11%)</title><rect x="234.5" y="995.0" width="13.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="237.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (12 samples, 1.03%)</title><rect x="235.5" y="979.0" width="12.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="238.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (8 samples, 0.69%)</title><rect x="238.5" y="963.0" width="8.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="241.5" y="974.0"></text>
</g>
<g>
<title>java/util/Optional.of (8 samples, 0.69%)</title><rect x="238.5" y="947.0" width="8.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="241.5" y="958.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.26%)</title><rect x="243.6" y="931.0" width="3.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="246.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.09%)</title><rect x="246.6" y="963.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="249.6" y="974.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.09%)</title><rect x="246.6" y="947.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="249.6" y="958.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="246.6" y="931.0" width="1.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="249.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (3 samples, 0.26%)</title><rect x="247.6" y="1027.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="250.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (3 samples, 0.26%)</title><rect x="247.6" y="1011.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="250.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.09%)</title><rect x="247.6" y="995.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="250.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="247.6" y="979.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="250.6" y="990.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.09%)</title><rect x="247.6" y="963.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="250.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.09%)</title><rect x="247.6" y="947.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="250.6" y="958.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="247.6" y="931.0" width="1.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="250.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="248.6" y="995.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="251.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="248.6" y="979.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="251.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="248.6" y="963.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="251.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (2 samples, 0.17%)</title><rect x="248.6" y="947.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="251.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="249.6" y="931.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="252.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.09%)</title><rect x="250.7" y="1027.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="253.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.09%)</title><rect x="250.7" y="1011.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="253.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="250.7" y="995.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="253.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="250.7" y="979.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="253.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="250.7" y="963.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="253.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="250.7" y="947.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="253.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.09%)</title><rect x="251.7" y="1027.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="254.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.contains (1 samples, 0.09%)</title><rect x="251.7" y="1011.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="254.7" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.09%)</title><rect x="251.7" y="995.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="254.7" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="251.7" y="979.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="254.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (9 samples, 0.77%)</title><rect x="252.7" y="1075.0" width="9.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="255.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (9 samples, 0.77%)</title><rect x="252.7" y="1059.0" width="9.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="255.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (8 samples, 0.69%)</title><rect x="252.7" y="1043.0" width="8.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="255.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.09%)</title><rect x="253.7" y="1027.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="256.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.09%)</title><rect x="253.7" y="1011.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="256.7" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (1 samples, 0.09%)</title><rect x="253.7" y="995.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="256.7" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (1 samples, 0.09%)</title><rect x="253.7" y="979.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="256.7" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.09%)</title><rect x="253.7" y="963.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="256.7" y="974.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.09%)</title><rect x="253.7" y="947.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="256.7" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.09%)</title><rect x="253.7" y="931.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="256.7" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="253.7" y="915.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="256.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (3 samples, 0.26%)</title><rect x="254.7" y="1027.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="257.7" y="1038.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (3 samples, 0.26%)</title><rect x="254.7" y="1011.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="257.7" y="1022.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (2 samples, 0.17%)</title><rect x="254.7" y="995.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="257.7" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.09%)</title><rect x="254.7" y="979.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="257.7" y="990.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="255.7" y="979.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="258.7" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="255.7" y="963.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="258.7" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="255.7" y="947.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="258.7" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.09%)</title><rect x="255.7" y="931.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="258.7" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.09%)</title><rect x="256.7" y="995.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="259.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (3 samples, 0.26%)</title><rect x="257.7" y="1027.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="260.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (3 samples, 0.26%)</title><rect x="257.7" y="1011.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="260.7" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.26%)</title><rect x="257.7" y="995.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="260.7" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.26%)</title><rect x="257.7" y="979.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="260.7" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.26%)</title><rect x="257.7" y="963.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="260.7" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.26%)</title><rect x="257.7" y="947.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="260.7" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.26%)</title><rect x="257.7" y="931.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="260.7" y="942.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="257.7" y="915.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="260.7" y="926.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (1 samples, 0.09%)</title><rect x="257.7" y="899.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="260.7" y="910.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.09%)</title><rect x="257.7" y="883.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="260.7" y="894.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="258.7" y="915.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="261.7" y="926.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.09%)</title><rect x="258.7" y="899.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="261.7" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="258.7" y="883.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="261.7" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="258.7" y="867.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="261.7" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="258.7" y="851.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="261.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$230/709657138.test (1 samples, 0.09%)</title><rect x="258.7" y="835.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="261.7" y="846.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="259.8" y="915.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="262.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.09%)</title><rect x="260.8" y="1043.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="263.8" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.09%)</title><rect x="260.8" y="1027.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="263.8" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="260.8" y="1011.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="263.8" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="260.8" y="995.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="263.8" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.09%)</title><rect x="260.8" y="979.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="263.8" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="260.8" y="963.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="263.8" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="260.8" y="947.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="263.8" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.09%)</title><rect x="260.8" y="931.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="263.8" y="942.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="260.8" y="915.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="263.8" y="926.0"></text>
</g>
<g>
<title>java/util/stream/Sink.begin (1 samples, 0.09%)</title><rect x="260.8" y="899.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="263.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.09%)</title><rect x="261.8" y="1075.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="264.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.09%)</title><rect x="261.8" y="1059.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="264.8" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="261.8" y="1043.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="264.8" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="261.8" y="1027.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="264.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.09%)</title><rect x="261.8" y="1011.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="264.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeTriggerWakeup (1 samples, 0.09%)</title><rect x="262.8" y="1075.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="265.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (7 samples, 0.60%)</title><rect x="263.8" y="1075.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="266.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (7 samples, 0.60%)</title><rect x="263.8" y="1059.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="266.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (7 samples, 0.60%)</title><rect x="263.8" y="1043.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="266.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (7 samples, 0.60%)</title><rect x="263.8" y="1027.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="266.8" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (5 samples, 0.43%)</title><rect x="263.8" y="1011.0" width="5.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="266.8" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (5 samples, 0.43%)</title><rect x="263.8" y="995.0" width="5.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="266.8" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (5 samples, 0.43%)</title><rect x="263.8" y="979.0" width="5.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="266.8" y="990.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.43%)</title><rect x="263.8" y="963.0" width="5.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="266.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.17%)</title><rect x="268.9" y="1011.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="271.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.09%)</title><rect x="268.9" y="995.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="271.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.09%)</title><rect x="268.9" y="979.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="271.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.09%)</title><rect x="268.9" y="963.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="271.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.09%)</title><rect x="268.9" y="947.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="271.9" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.09%)</title><rect x="268.9" y="931.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="271.9" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.09%)</title><rect x="268.9" y="915.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="271.9" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.09%)</title><rect x="268.9" y="899.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="271.9" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.09%)</title><rect x="268.9" y="883.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="271.9" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.09%)</title><rect x="268.9" y="867.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="271.9" y="878.0"></text>
</g>
<g>
<title>__read (1 samples, 0.09%)</title><rect x="268.9" y="851.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="271.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToStagedReceives (1 samples, 0.09%)</title><rect x="269.9" y="995.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="272.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (6 samples, 0.51%)</title><rect x="270.9" y="1075.0" width="6.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="273.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (6 samples, 0.51%)</title><rect x="270.9" y="1059.0" width="6.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="273.9" y="1070.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="270.9" y="1043.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="273.9" y="1054.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.09%)</title><rect x="270.9" y="1027.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="273.9" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.09%)</title><rect x="270.9" y="1011.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="273.9" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="270.9" y="995.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="273.9" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="270.9" y="979.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="273.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.09%)</title><rect x="271.9" y="1043.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="274.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.09%)</title><rect x="271.9" y="1027.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="274.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.09%)</title><rect x="271.9" y="1011.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="274.9" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="271.9" y="995.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="274.9" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="271.9" y="979.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="274.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.26%)</title><rect x="272.9" y="1043.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="275.9" y="1054.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.17%)</title><rect x="272.9" y="1027.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="275.9" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="273.9" y="1011.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="276.9" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="273.9" y="995.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="276.9" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.09%)</title><rect x="273.9" y="979.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="276.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.09%)</title><rect x="274.9" y="1027.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="277.9" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="274.9" y="1011.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="277.9" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="274.9" y="995.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="277.9" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="274.9" y="979.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="277.9" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="274.9" y="963.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="277.9" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="274.9" y="947.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="277.9" y="958.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="274.9" y="931.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="277.9" y="942.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.09%)</title><rect x="274.9" y="915.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="277.9" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="274.9" y="899.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="277.9" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="274.9" y="883.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="277.9" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="274.9" y="867.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="277.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$258/2083118729.test (1 samples, 0.09%)</title><rect x="274.9" y="851.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="277.9" y="862.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="275.9" y="1043.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="278.9" y="1054.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="275.9" y="1027.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="278.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.09%)</title><rect x="276.9" y="1075.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="279.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="276.9" y="1059.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="279.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 0.17%)</title><rect x="278.0" y="1075.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="281.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="278.0" y="1059.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="281.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="278.0" y="1043.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="281.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="278.0" y="1027.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="281.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="279.0" y="1011.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="282.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.09%)</title><rect x="279.0" y="995.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="282.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Max.update (1 samples, 0.09%)</title><rect x="279.0" y="979.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="282.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="280.0" y="1123.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="283.0" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.09%)</title><rect x="280.0" y="1107.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="283.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/Thread.run (766 samples, 65.64%)</title><rect x="281.0" y="1139.0" width="774.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="284.0" y="1150.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (766 samples, 65.64%)</title><rect x="281.0" y="1123.0" width="774.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="284.0" y="1134.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (766 samples, 65.64%)</title><rect x="281.0" y="1107.0" width="774.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="284.0" y="1118.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/978837454.run (534 samples, 45.76%)</title><rect x="284.0" y="1091.0" width="540.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="287.0" y="1102.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/978837454...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (534 samples, 45.76%)</title><rect x="284.0" y="1075.0" width="540.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="287.0" y="1086.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (534 samples, 45.76%)</title><rect x="284.0" y="1059.0" width="540.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="287.0" y="1070.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (526 samples, 45.07%)</title><rect x="284.0" y="1043.0" width="531.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="287.0" y="1054.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.09%)</title><rect x="292.1" y="1027.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="295.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (1 samples, 0.09%)</title><rect x="293.1" y="1027.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="296.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.09%)</title><rect x="293.1" y="1011.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="296.1" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$197/925115120.get (1 samples, 0.09%)</title><rect x="293.1" y="995.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="296.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.09%)</title><rect x="293.1" y="979.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="296.1" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="293.1" y="963.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="296.1" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="293.1" y="947.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="296.1" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="293.1" y="931.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="296.1" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="293.1" y="915.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="296.1" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="293.1" y="899.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="296.1" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (181 samples, 15.51%)</title><rect x="294.1" y="1027.0" width="183.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="297.1" y="1038.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (181 samples, 15.51%)</title><rect x="294.1" y="1011.0" width="183.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="297.1" y="1022.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (181 samples, 15.51%)</title><rect x="294.1" y="995.0" width="183.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="297.1" y="1006.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (181 samples, 15.51%)</title><rect x="294.1" y="979.0" width="183.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="297.1" y="990.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (181 samples, 15.51%)</title><rect x="294.1" y="963.0" width="183.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="297.1" y="974.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (181 samples, 15.51%)</title><rect x="294.1" y="947.0" width="183.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="297.1" y="958.0">com/fasterxml/jackson/da..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (66 samples, 5.66%)</title><rect x="294.1" y="931.0" width="66.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="297.1" y="942.0">com/fas..</text>
</g>
<g>
<title>__clock_gettime (13 samples, 1.11%)</title><rect x="316.4" y="915.0" width="13.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="319.4" y="926.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.77%)</title><rect x="320.4" y="899.0" width="9.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="323.4" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (5 samples, 0.43%)</title><rect x="329.5" y="915.0" width="5.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="332.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (5 samples, 0.43%)</title><rect x="329.5" y="899.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="332.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (5 samples, 0.43%)</title><rect x="329.5" y="883.0" width="5.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="332.5" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.43%)</title><rect x="329.5" y="867.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="332.5" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 0.43%)</title><rect x="329.5" y="851.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="332.5" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.43%)</title><rect x="329.5" y="835.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="332.5" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (5 samples, 0.43%)</title><rect x="329.5" y="819.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="332.5" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (25 samples, 2.14%)</title><rect x="334.6" y="915.0" width="25.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="337.6" y="926.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (5 samples, 0.43%)</title><rect x="354.8" y="899.0" width="5.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="357.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.17%)</title><rect x="354.8" y="883.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="357.8" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="354.8" y="867.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="357.8" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.09%)</title><rect x="355.8" y="867.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="358.8" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (3 samples, 0.26%)</title><rect x="356.8" y="883.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="359.8" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="356.8" y="867.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="359.8" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="356.8" y="851.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="359.8" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="356.8" y="835.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="359.8" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="356.8" y="819.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="359.8" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="356.8" y="803.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="359.8" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="356.8" y="787.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="359.8" y="798.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="356.8" y="771.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="359.8" y="782.0"></text>
</g>
<g>
<title>G1CollectorPolicy::is_young_list_full() (1 samples, 0.09%)</title><rect x="356.8" y="755.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="359.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.17%)</title><rect x="357.8" y="867.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="360.8" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.09%)</title><rect x="357.8" y="851.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="360.8" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="357.8" y="835.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="360.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.09%)</title><rect x="358.8" y="851.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="361.8" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="358.8" y="835.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="361.8" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="358.8" y="819.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="361.8" y="830.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="359.9" y="915.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="362.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (102 samples, 8.74%)</title><rect x="360.9" y="931.0" width="103.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="363.9" y="942.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.17%)</title><rect x="363.9" y="915.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="366.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (2 samples, 0.17%)</title><rect x="365.9" y="915.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="368.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (2 samples, 0.17%)</title><rect x="367.9" y="915.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="370.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (5 samples, 0.43%)</title><rect x="370.0" y="915.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="373.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.43%)</title><rect x="370.0" y="899.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="373.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (5 samples, 0.43%)</title><rect x="375.0" y="915.0" width="5.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="378.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 0.43%)</title><rect x="375.0" y="899.0" width="5.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="378.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (4 samples, 0.34%)</title><rect x="376.0" y="883.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="379.0" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 0.26%)</title><rect x="377.0" y="867.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="380.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="379.1" y="851.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="382.1" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (11 samples, 0.94%)</title><rect x="380.1" y="915.0" width="11.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="383.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (10 samples, 0.86%)</title><rect x="381.1" y="899.0" width="10.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="384.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (68 samples, 5.83%)</title><rect x="391.2" y="915.0" width="68.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="394.2" y="926.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (28 samples, 2.40%)</title><rect x="392.2" y="899.0" width="28.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="395.2" y="910.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (14 samples, 1.20%)</title><rect x="392.2" y="883.0" width="14.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="395.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (14 samples, 1.20%)</title><rect x="392.2" y="867.0" width="14.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="395.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (14 samples, 1.20%)</title><rect x="392.2" y="851.0" width="14.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="395.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (11 samples, 0.94%)</title><rect x="406.4" y="883.0" width="11.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="409.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.26%)</title><rect x="417.5" y="883.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="420.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.26%)</title><rect x="417.5" y="867.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="420.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.09%)</title><rect x="420.5" y="899.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="423.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (38 samples, 3.26%)</title><rect x="421.5" y="899.0" width="38.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="424.5" y="910.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (38 samples, 3.26%)</title><rect x="421.5" y="883.0" width="38.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="424.5" y="894.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (38 samples, 3.26%)</title><rect x="421.5" y="867.0" width="38.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="424.5" y="878.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 0.94%)</title><rect x="424.6" y="851.0" width="11.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="427.6" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.34%)</title><rect x="429.6" y="835.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="432.6" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.34%)</title><rect x="429.6" y="819.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="432.6" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.34%)</title><rect x="429.6" y="803.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="432.6" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.26%)</title><rect x="430.6" y="787.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="433.6" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.17%)</title><rect x="433.7" y="835.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="436.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (10 samples, 0.86%)</title><rect x="435.7" y="851.0" width="10.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="438.7" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (7 samples, 0.60%)</title><rect x="438.7" y="835.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="441.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.60%)</title><rect x="438.7" y="819.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="441.7" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.60%)</title><rect x="438.7" y="803.0" width="7.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="441.7" y="814.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (7 samples, 0.60%)</title><rect x="438.7" y="787.0" width="7.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="441.7" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (5 samples, 0.43%)</title><rect x="445.8" y="851.0" width="5.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="448.8" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (5 samples, 0.43%)</title><rect x="445.8" y="835.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="448.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (5 samples, 0.43%)</title><rect x="445.8" y="819.0" width="5.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="448.8" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (5 samples, 0.43%)</title><rect x="445.8" y="803.0" width="5.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="448.8" y="814.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (5 samples, 0.43%)</title><rect x="445.8" y="787.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="448.8" y="798.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (5 samples, 0.43%)</title><rect x="445.8" y="771.0" width="5.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="448.8" y="782.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (4 samples, 0.34%)</title><rect x="446.8" y="755.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="449.8" y="766.0"></text>
</g>
<g>
<title>sun/reflect/misc/ReflectUtil.isVMAnonymousClass (1 samples, 0.09%)</title><rect x="449.8" y="739.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="452.8" y="750.0"></text>
</g>
<g>
<title>java/lang/Class.getName (1 samples, 0.09%)</title><rect x="449.8" y="723.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="452.8" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="449.8" y="707.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="452.8" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="449.8" y="691.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="452.8" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="449.8" y="675.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="452.8" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (4 samples, 0.34%)</title><rect x="450.9" y="851.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="453.9" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.34%)</title><rect x="450.9" y="835.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="453.9" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.34%)</title><rect x="450.9" y="819.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="453.9" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.17%)</title><rect x="452.9" y="803.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="455.9" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (5 samples, 0.43%)</title><rect x="454.9" y="851.0" width="5.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="457.9" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (5 samples, 0.43%)</title><rect x="454.9" y="835.0" width="5.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="457.9" y="846.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.17%)</title><rect x="457.9" y="819.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="460.9" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (2 samples, 0.17%)</title><rect x="460.0" y="915.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="463.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.17%)</title><rect x="462.0" y="915.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="465.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (13 samples, 1.11%)</title><rect x="464.0" y="931.0" width="13.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="467.0" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.09%)</title><rect x="464.0" y="915.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="467.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (12 samples, 1.03%)</title><rect x="465.0" y="915.0" width="12.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="468.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (12 samples, 1.03%)</title><rect x="465.0" y="899.0" width="12.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="468.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (12 samples, 1.03%)</title><rect x="465.0" y="883.0" width="12.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="468.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (12 samples, 1.03%)</title><rect x="465.0" y="867.0" width="12.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="468.0" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (319 samples, 27.34%)</title><rect x="477.1" y="1027.0" width="322.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="480.1" y="1038.0">com/linecorp/decaton/processor/runtime/Proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (76 samples, 6.51%)</title><rect x="478.2" y="1011.0" width="76.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="481.2" y="1022.0">com/line..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (75 samples, 6.43%)</title><rect x="479.2" y="995.0" width="75.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="482.2" y="1006.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (71 samples, 6.08%)</title><rect x="483.2" y="979.0" width="71.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="486.2" y="990.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (14 samples, 1.20%)</title><rect x="483.2" y="963.0" width="14.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="486.2" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (14 samples, 1.20%)</title><rect x="483.2" y="947.0" width="14.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="486.2" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (14 samples, 1.20%)</title><rect x="483.2" y="931.0" width="14.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="486.2" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (14 samples, 1.20%)</title><rect x="483.2" y="915.0" width="14.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="486.2" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="497.4" y="963.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="500.4" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="497.4" y="947.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="500.4" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="497.4" y="931.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="500.4" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.09%)</title><rect x="497.4" y="915.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="500.4" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.09%)</title><rect x="497.4" y="899.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="500.4" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (56 samples, 4.80%)</title><rect x="498.4" y="963.0" width="56.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="501.4" y="974.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.remove (18 samples, 1.54%)</title><rect x="536.8" y="947.0" width="18.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="539.8" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.09%)</title><rect x="536.8" y="931.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="539.8" y="942.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.09%)</title><rect x="536.8" y="915.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="539.8" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (17 samples, 1.46%)</title><rect x="537.8" y="931.0" width="17.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="540.8" y="942.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.26%)</title><rect x="548.9" y="915.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="551.9" y="926.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.26%)</title><rect x="552.0" y="915.0" width="3.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="555.0" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (11 samples, 0.94%)</title><rect x="555.0" y="1011.0" width="11.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="558.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (11 samples, 0.94%)</title><rect x="555.0" y="995.0" width="11.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="558.0" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (11 samples, 0.94%)</title><rect x="555.0" y="979.0" width="11.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="558.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (152 samples, 13.02%)</title><rect x="566.1" y="1011.0" width="153.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="569.1" y="1022.0">com/linecorp/decato..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="566.1" y="995.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="569.1" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="566.1" y="979.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="569.1" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="566.1" y="963.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="569.1" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="566.1" y="947.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="569.1" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="566.1" y="931.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="569.1" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="566.1" y="915.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="569.1" y="926.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="566.1" y="899.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="569.1" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="566.1" y="883.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="569.1" y="894.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="566.1" y="867.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="569.1" y="878.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.09%)</title><rect x="566.1" y="851.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="569.1" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (151 samples, 12.94%)</title><rect x="567.1" y="995.0" width="152.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="570.1" y="1006.0">com/linecorp/decato..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.34%)</title><rect x="574.2" y="979.0" width="4.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="577.2" y="990.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="575.2" y="963.0" width="3.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="578.2" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (49 samples, 4.20%)</title><rect x="578.3" y="979.0" width="49.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="581.3" y="990.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (47 samples, 4.03%)</title><rect x="579.3" y="963.0" width="47.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="582.3" y="974.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (38 samples, 3.26%)</title><rect x="585.3" y="947.0" width="38.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="588.3" y="958.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (27 samples, 2.31%)</title><rect x="591.4" y="931.0" width="27.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="594.4" y="942.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (27 samples, 2.31%)</title><rect x="591.4" y="915.0" width="27.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="594.4" y="926.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (27 samples, 2.31%)</title><rect x="591.4" y="899.0" width="27.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="594.4" y="910.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (12 samples, 1.03%)</title><rect x="601.5" y="883.0" width="12.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="604.5" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 0.34%)</title><rect x="601.5" y="867.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="604.5" y="878.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.34%)</title><rect x="601.5" y="851.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="604.5" y="862.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (4 samples, 0.34%)</title><rect x="601.5" y="835.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="604.5" y="846.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="601.5" y="819.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="604.5" y="830.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="601.5" y="803.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="604.5" y="814.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.09%)</title><rect x="602.5" y="819.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="605.5" y="830.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (2 samples, 0.17%)</title><rect x="603.5" y="819.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="606.5" y="830.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (8 samples, 0.69%)</title><rect x="605.6" y="867.0" width="8.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="608.6" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (7 samples, 0.60%)</title><rect x="606.6" y="851.0" width="7.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="609.6" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (2 samples, 0.17%)</title><rect x="606.6" y="835.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="609.6" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (2 samples, 0.17%)</title><rect x="608.6" y="835.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="611.6" y="846.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (2 samples, 0.17%)</title><rect x="610.6" y="835.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="613.6" y="846.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (2 samples, 0.17%)</title><rect x="610.6" y="819.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="613.6" y="830.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.09%)</title><rect x="612.6" y="835.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="615.6" y="846.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.34%)</title><rect x="613.7" y="883.0" width="4.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="616.7" y="894.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (1 samples, 0.09%)</title><rect x="617.7" y="883.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="620.7" y="894.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.26%)</title><rect x="618.7" y="931.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="621.7" y="942.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="621.7" y="931.0" width="1.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="624.7" y="942.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="622.8" y="931.0" width="1.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="625.8" y="942.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.26%)</title><rect x="623.8" y="947.0" width="3.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="626.8" y="958.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.09%)</title><rect x="626.8" y="963.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="629.8" y="974.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.09%)</title><rect x="626.8" y="947.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="629.8" y="958.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.09%)</title><rect x="626.8" y="931.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="629.8" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="626.8" y="915.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="629.8" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.17%)</title><rect x="627.8" y="979.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="630.8" y="990.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (7 samples, 0.60%)</title><rect x="629.8" y="979.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="632.8" y="990.0"></text>
</g>
<g>
<title>java/lang/Long.toString (7 samples, 0.60%)</title><rect x="629.8" y="963.0" width="7.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="632.8" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="629.8" y="947.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="632.8" y="958.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="629.8" y="931.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="632.8" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="629.8" y="915.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="632.8" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="629.8" y="899.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="632.8" y="910.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.51%)</title><rect x="630.8" y="947.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="633.8" y="958.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (82 samples, 7.03%)</title><rect x="636.9" y="979.0" width="82.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="639.9" y="990.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (81 samples, 6.94%)</title><rect x="637.9" y="963.0" width="81.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="640.9" y="974.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.43%)</title><rect x="637.9" y="947.0" width="5.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="640.9" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.43%)</title><rect x="637.9" y="931.0" width="5.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="640.9" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.43%)</title><rect x="637.9" y="915.0" width="5.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="640.9" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.43%)</title><rect x="637.9" y="899.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="640.9" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.43%)</title><rect x="643.0" y="947.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="646.0" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 0.43%)</title><rect x="643.0" y="931.0" width="5.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="646.0" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.43%)</title><rect x="643.0" y="915.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="646.0" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (5 samples, 0.43%)</title><rect x="643.0" y="899.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="646.0" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.34%)</title><rect x="644.0" y="883.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="647.0" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (71 samples, 6.08%)</title><rect x="648.0" y="947.0" width="71.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="651.0" y="958.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.put (66 samples, 5.66%)</title><rect x="653.1" y="931.0" width="66.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="656.1" y="942.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.putVal (43 samples, 3.68%)</title><rect x="676.3" y="915.0" width="43.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="679.3" y="926.0">java..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.17%)</title><rect x="696.6" y="899.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="699.6" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (16 samples, 1.37%)</title><rect x="698.6" y="899.0" width="16.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="701.6" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.26%)</title><rect x="711.7" y="883.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="714.7" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.17%)</title><rect x="712.7" y="867.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="715.7" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="713.8" y="851.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="716.8" y="862.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (1 samples, 0.09%)</title><rect x="713.8" y="835.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="716.8" y="846.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 0.43%)</title><rect x="714.8" y="899.0" width="5.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="717.8" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (61 samples, 5.23%)</title><rect x="719.8" y="1011.0" width="61.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="722.8" y="1022.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (61 samples, 5.23%)</title><rect x="719.8" y="995.0" width="61.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="722.8" y="1006.0">com/li..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="722.9" y="979.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="725.9" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/996459959.process (27 samples, 2.31%)</title><rect x="723.9" y="979.0" width="27.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="726.9" y="990.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (26 samples, 2.23%)</title><rect x="724.9" y="963.0" width="26.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="727.9" y="974.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (23 samples, 1.97%)</title><rect x="725.9" y="947.0" width="23.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="728.9" y="958.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 0.34%)</title><rect x="739.0" y="931.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="742.0" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 0.34%)</title><rect x="739.0" y="915.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="742.0" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (4 samples, 0.34%)</title><rect x="739.0" y="899.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="742.0" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (4 samples, 0.34%)</title><rect x="739.0" y="883.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="742.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (3 samples, 0.26%)</title><rect x="740.0" y="867.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="743.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.09%)</title><rect x="742.1" y="851.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="745.1" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (6 samples, 0.51%)</title><rect x="743.1" y="931.0" width="6.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="746.1" y="942.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.43%)</title><rect x="744.1" y="915.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="747.1" y="926.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.34%)</title><rect x="745.1" y="899.0" width="4.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="748.1" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.17%)</title><rect x="749.1" y="947.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="752.1" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.17%)</title><rect x="749.1" y="931.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="752.1" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.17%)</title><rect x="749.1" y="915.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="752.1" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.17%)</title><rect x="749.1" y="899.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="752.1" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.17%)</title><rect x="749.1" y="883.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="752.1" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (11 samples, 0.94%)</title><rect x="751.2" y="979.0" width="11.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="754.2" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="761.3" y="963.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="764.3" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="761.3" y="947.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="764.3" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="761.3" y="931.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="764.3" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="761.3" y="915.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="764.3" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.26%)</title><rect x="762.3" y="979.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="765.3" y="990.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.26%)</title><rect x="762.3" y="963.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="765.3" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1016925085.linkToTargetMethod (1 samples, 0.09%)</title><rect x="765.3" y="979.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="768.3" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.09%)</title><rect x="765.3" y="963.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="768.3" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$284/357077992.get$Lambda (1 samples, 0.09%)</title><rect x="765.3" y="947.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="768.3" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="766.3" y="979.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="769.3" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="766.3" y="963.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="769.3" y="974.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (1 samples, 0.09%)</title><rect x="766.3" y="947.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="769.3" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.51%)</title><rect x="767.3" y="979.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="770.3" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.34%)</title><rect x="769.4" y="963.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="772.4" y="974.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.17%)</title><rect x="769.4" y="947.0" width="2.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="772.4" y="958.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.17%)</title><rect x="771.4" y="947.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="774.4" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.26%)</title><rect x="773.4" y="979.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="776.4" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.17%)</title><rect x="774.4" y="963.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="777.4" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.43%)</title><rect x="776.4" y="979.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="779.4" y="990.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.09%)</title><rect x="778.5" y="963.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="781.5" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="778.5" y="947.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="781.5" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="778.5" y="931.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="781.5" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="778.5" y="915.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="781.5" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="778.5" y="899.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="781.5" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="778.5" y="883.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="781.5" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.17%)</title><rect x="779.5" y="963.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="782.5" y="974.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.09%)</title><rect x="780.5" y="947.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="783.5" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="780.5" y="931.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="783.5" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="780.5" y="915.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="783.5" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="780.5" y="899.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="783.5" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.09%)</title><rect x="781.5" y="1011.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="784.5" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="781.5" y="995.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="784.5" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="781.5" y="979.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="784.5" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="781.5" y="963.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="784.5" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="781.5" y="947.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="784.5" y="958.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.09%)</title><rect x="781.5" y="931.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="784.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (17 samples, 1.46%)</title><rect x="782.5" y="1011.0" width="17.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="785.5" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (17 samples, 1.46%)</title><rect x="782.5" y="995.0" width="17.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="785.5" y="1006.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.34%)</title><rect x="787.6" y="979.0" width="4.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="790.6" y="990.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.34%)</title><rect x="787.6" y="963.0" width="4.0" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="790.6" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.69%)</title><rect x="791.6" y="979.0" width="8.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="794.6" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$286/314879060.accept (8 samples, 0.69%)</title><rect x="791.6" y="963.0" width="8.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="794.6" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$43 (8 samples, 0.69%)</title><rect x="791.6" y="947.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="794.6" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/1194216973.complete (8 samples, 0.69%)</title><rect x="791.6" y="931.0" width="8.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="794.6" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$46 (8 samples, 0.69%)</title><rect x="791.6" y="915.0" width="8.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="794.6" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1791347205.complete (8 samples, 0.69%)</title><rect x="791.6" y="899.0" width="8.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="794.6" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (8 samples, 0.69%)</title><rect x="791.6" y="883.0" width="8.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="794.6" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (8 samples, 0.69%)</title><rect x="791.6" y="867.0" width="8.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="794.6" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (8 samples, 0.69%)</title><rect x="791.6" y="851.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="794.6" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (8 samples, 0.69%)</title><rect x="791.6" y="835.0" width="8.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="794.6" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (8 samples, 0.69%)</title><rect x="791.6" y="819.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="794.6" y="830.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.26%)</title><rect x="795.7" y="803.0" width="3.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="798.7" y="814.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="795.7" y="787.0" width="3.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="798.7" y="798.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="798.7" y="803.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="801.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 0.94%)</title><rect x="799.7" y="1027.0" width="11.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="802.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 0.94%)</title><rect x="799.7" y="1011.0" width="11.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="802.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 0.86%)</title><rect x="800.7" y="995.0" width="10.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="803.7" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$286/314879060.accept (10 samples, 0.86%)</title><rect x="800.7" y="979.0" width="10.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="803.7" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$43 (10 samples, 0.86%)</title><rect x="800.7" y="963.0" width="10.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="803.7" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/1194216973.complete (10 samples, 0.86%)</title><rect x="800.7" y="947.0" width="10.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="803.7" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$46 (10 samples, 0.86%)</title><rect x="800.7" y="931.0" width="10.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="803.7" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1791347205.complete (9 samples, 0.77%)</title><rect x="800.7" y="915.0" width="9.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="803.7" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (9 samples, 0.77%)</title><rect x="800.7" y="899.0" width="9.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="803.7" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (9 samples, 0.77%)</title><rect x="800.7" y="883.0" width="9.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="803.7" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (9 samples, 0.77%)</title><rect x="800.7" y="867.0" width="9.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="803.7" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (9 samples, 0.77%)</title><rect x="800.7" y="851.0" width="9.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="803.7" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (9 samples, 0.77%)</title><rect x="800.7" y="835.0" width="9.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="803.7" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$276/149563730.complete (1 samples, 0.09%)</title><rect x="809.8" y="915.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="812.8" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$null$71 (1 samples, 0.09%)</title><rect x="809.8" y="899.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="812.8" y="910.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.43%)</title><rect x="810.8" y="1027.0" width="5.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="813.8" y="1038.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.43%)</title><rect x="810.8" y="1011.0" width="5.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="813.8" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (8 samples, 0.69%)</title><rect x="815.9" y="1043.0" width="8.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="818.9" y="1054.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.26%)</title><rect x="819.9" y="1027.0" width="3.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="822.9" y="1038.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="820.9" y="1011.0" width="2.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="823.9" y="1022.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="823.0" y="1027.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="826.0" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.09%)</title><rect x="824.0" y="1091.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="827.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.17%)</title><rect x="825.0" y="1091.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="828.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.17%)</title><rect x="825.0" y="1075.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="828.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.17%)</title><rect x="825.0" y="1059.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="828.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.17%)</title><rect x="825.0" y="1043.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="828.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (226 samples, 19.37%)</title><rect x="827.0" y="1091.0" width="228.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="830.0" y="1102.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (226 samples, 19.37%)</title><rect x="827.0" y="1075.0" width="228.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="830.0" y="1086.0">java/util/concurrent/LinkedBlo..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (206 samples, 17.65%)</title><rect x="827.0" y="1059.0" width="208.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="830.0" y="1070.0">java/util/concurrent/locks/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (14 samples, 1.20%)</title><rect x="833.1" y="1043.0" width="14.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="836.1" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (7 samples, 0.60%)</title><rect x="847.2" y="1043.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="850.2" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.60%)</title><rect x="847.2" y="1027.0" width="7.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="850.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.60%)</title><rect x="847.2" y="1011.0" width="7.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="850.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (4 samples, 0.34%)</title><rect x="854.3" y="1043.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="857.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (4 samples, 0.34%)</title><rect x="854.3" y="1027.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="857.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (175 samples, 15.00%)</title><rect x="858.3" y="1043.0" width="177.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="861.3" y="1054.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (175 samples, 15.00%)</title><rect x="858.3" y="1027.0" width="177.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="861.3" y="1038.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.17%)</title><rect x="867.4" y="1011.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="870.4" y="1022.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.17%)</title><rect x="869.5" y="1011.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="872.5" y="1022.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.17%)</title><rect x="871.5" y="1011.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="874.5" y="1022.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 0.26%)</title><rect x="873.5" y="1011.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="876.5" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.26%)</title><rect x="876.5" y="1011.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="879.5" y="1022.0"></text>
</g>
<g>
<title>Unsafe_Park (150 samples, 12.85%)</title><rect x="879.6" y="1011.0" width="151.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="882.6" y="1022.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.26%)</title><rect x="883.6" y="995.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="886.6" y="1006.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.09%)</title><rect x="886.7" y="995.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="889.7" y="1006.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="887.7" y="995.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="890.7" y="1006.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (31 samples, 2.66%)</title><rect x="888.7" y="995.0" width="31.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="891.7" y="1006.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (10 samples, 0.86%)</title><rect x="899.8" y="979.0" width="10.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="902.8" y="990.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.34%)</title><rect x="901.8" y="963.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="904.8" y="974.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (3 samples, 0.26%)</title><rect x="902.8" y="947.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="905.8" y="958.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.17%)</title><rect x="905.9" y="963.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="908.9" y="974.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.17%)</title><rect x="907.9" y="963.0" width="2.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="910.9" y="974.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="909.9" y="979.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="912.9" y="990.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="910.9" y="979.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="913.9" y="990.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (7 samples, 0.60%)</title><rect x="911.9" y="979.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="914.9" y="990.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="919.0" y="979.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="922.0" y="990.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.17%)</title><rect x="920.0" y="995.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="923.0" y="1006.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.09%)</title><rect x="922.0" y="995.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="925.0" y="1006.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.17%)</title><rect x="923.1" y="995.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="926.1" y="1006.0"></text>
</g>
<g>
<title>__lll_lock_wait (7 samples, 0.60%)</title><rect x="925.1" y="995.0" width="7.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="928.1" y="1006.0"></text>
</g>
<g>
<title>__lll_unlock_wake (36 samples, 3.08%)</title><rect x="932.2" y="995.0" width="36.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="935.2" y="1006.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (44 samples, 3.77%)</title><rect x="968.6" y="995.0" width="44.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="971.6" y="1006.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.26%)</title><rect x="1013.1" y="995.0" width="3.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1016.1" y="1006.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.09%)</title><rect x="1016.1" y="995.0" width="1.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1019.1" y="1006.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (6 samples, 0.51%)</title><rect x="1017.1" y="995.0" width="6.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1020.1" y="1006.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.17%)</title><rect x="1023.2" y="995.0" width="2.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1026.2" y="1006.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.17%)</title><rect x="1025.2" y="995.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1028.2" y="1006.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.17%)</title><rect x="1027.2" y="995.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1030.2" y="1006.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.17%)</title><rect x="1029.2" y="995.0" width="2.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1032.2" y="1006.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.09%)</title><rect x="1031.3" y="1011.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1034.3" y="1022.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.09%)</title><rect x="1032.3" y="1011.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1035.3" y="1022.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.17%)</title><rect x="1033.3" y="1011.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1036.3" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (4 samples, 0.34%)</title><rect x="1035.3" y="1059.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1038.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.09%)</title><rect x="1039.3" y="1059.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1042.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.09%)</title><rect x="1039.3" y="1043.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1042.3" y="1054.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.09%)</title><rect x="1039.3" y="1027.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1042.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.09%)</title><rect x="1039.3" y="1011.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1042.3" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (15 samples, 1.29%)</title><rect x="1040.4" y="1059.0" width="15.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1043.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (15 samples, 1.29%)</title><rect x="1040.4" y="1043.0" width="15.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1043.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (15 samples, 1.29%)</title><rect x="1040.4" y="1027.0" width="15.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1043.4" y="1038.0"></text>
</g>
<g>
<title>start_thread (133 samples, 11.40%)</title><rect x="1055.5" y="1139.0" width="134.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1058.5" y="1150.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (133 samples, 11.40%)</title><rect x="1055.5" y="1123.0" width="134.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1058.5" y="1134.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (23 samples, 1.97%)</title><rect x="1055.5" y="1107.0" width="23.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1058.5" y="1118.0">G..</text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (1 samples, 0.09%)</title><rect x="1055.5" y="1091.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1058.5" y="1102.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1055.5" y="1075.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1058.5" y="1086.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (8 samples, 0.69%)</title><rect x="1056.5" y="1091.0" width="8.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1059.5" y="1102.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 0.69%)</title><rect x="1056.5" y="1075.0" width="8.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1059.5" y="1086.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.26%)</title><rect x="1056.5" y="1059.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1059.5" y="1070.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.43%)</title><rect x="1059.6" y="1059.0" width="5.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1062.6" y="1070.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 1.20%)</title><rect x="1064.6" y="1091.0" width="14.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1067.6" y="1102.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.17%)</title><rect x="1064.6" y="1075.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1067.6" y="1086.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.09%)</title><rect x="1064.6" y="1059.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1067.6" y="1070.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.09%)</title><rect x="1064.6" y="1043.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1067.6" y="1054.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.09%)</title><rect x="1065.6" y="1059.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1068.6" y="1070.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (8 samples, 0.69%)</title><rect x="1066.6" y="1075.0" width="8.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1069.6" y="1086.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.43%)</title><rect x="1066.6" y="1059.0" width="5.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1069.6" y="1070.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (5 samples, 0.43%)</title><rect x="1066.6" y="1043.0" width="5.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1069.6" y="1054.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (5 samples, 0.43%)</title><rect x="1066.6" y="1027.0" width="5.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1069.6" y="1038.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (4 samples, 0.34%)</title><rect x="1066.6" y="1011.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1069.6" y="1022.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)2, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.09%)</title><rect x="1069.7" y="995.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1072.7" y="1006.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.09%)</title><rect x="1069.7" y="979.0" width="1.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1072.7" y="990.0"></text>
</g>
<g>
<title>JNIHandleBlock::oops_do(OopClosure*) (1 samples, 0.09%)</title><rect x="1070.7" y="1011.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1073.7" y="1022.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.26%)</title><rect x="1071.7" y="1059.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1074.7" y="1070.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.26%)</title><rect x="1071.7" y="1043.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1074.7" y="1054.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (4 samples, 0.34%)</title><rect x="1074.7" y="1075.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1077.7" y="1086.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (4 samples, 0.34%)</title><rect x="1074.7" y="1059.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1077.7" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (3 samples, 0.26%)</title><rect x="1074.7" y="1043.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1077.7" y="1054.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (3 samples, 0.26%)</title><rect x="1074.7" y="1027.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1077.7" y="1038.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 0.26%)</title><rect x="1074.7" y="1011.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1077.7" y="1022.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (3 samples, 0.26%)</title><rect x="1074.7" y="995.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1077.7" y="1006.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.26%)</title><rect x="1074.7" y="979.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1077.7" y="990.0"></text>
</g>
<g>
<title>G1BlockOffsetArray::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.09%)</title><rect x="1074.7" y="963.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1077.7" y="974.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.09%)</title><rect x="1074.7" y="947.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1077.7" y="958.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (2 samples, 0.17%)</title><rect x="1075.7" y="963.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1078.7" y="974.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.09%)</title><rect x="1077.8" y="1043.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1080.8" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.09%)</title><rect x="1077.8" y="1027.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1080.8" y="1038.0"></text>
</g>
<g>
<title>HeapRegionRemSet::iter_is_complete() (1 samples, 0.09%)</title><rect x="1077.8" y="1011.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1080.8" y="1022.0"></text>
</g>
<g>
<title>JavaThread::run() (106 samples, 9.08%)</title><rect x="1078.8" y="1107.0" width="107.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1081.8" y="1118.0">JavaThread::r..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (106 samples, 9.08%)</title><rect x="1078.8" y="1091.0" width="107.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1081.8" y="1102.0">JavaThread::t..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (106 samples, 9.08%)</title><rect x="1078.8" y="1075.0" width="107.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1081.8" y="1086.0">CompileBroker..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (106 samples, 9.08%)</title><rect x="1078.8" y="1059.0" width="107.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1081.8" y="1070.0">CompileBroker..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (103 samples, 8.83%)</title><rect x="1078.8" y="1043.0" width="104.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1081.8" y="1054.0">C2Compiler::..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (103 samples, 8.83%)</title><rect x="1078.8" y="1027.0" width="104.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1081.8" y="1038.0">Compile::Com..</text>
</g>
<g>
<title>Compile::Code_Gen() (51 samples, 4.37%)</title><rect x="1078.8" y="1011.0" width="51.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1081.8" y="1022.0">Compi..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.26%)</title><rect x="1078.8" y="995.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1081.8" y="1006.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (3 samples, 0.26%)</title><rect x="1078.8" y="979.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1081.8" y="990.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.17%)</title><rect x="1078.8" y="963.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1081.8" y="974.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.09%)</title><rect x="1079.8" y="947.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1082.8" y="958.0"></text>
</g>
<g>
<title>CodeSection::initialize_shared_locs(relocInfo*, int) (1 samples, 0.09%)</title><rect x="1079.8" y="931.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1082.8" y="942.0"></text>
</g>
<g>
<title>MachNode::alignment_required() const (1 samples, 0.09%)</title><rect x="1080.8" y="963.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1083.8" y="974.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.26%)</title><rect x="1081.8" y="995.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1084.8" y="1006.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.17%)</title><rect x="1081.8" y="979.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1084.8" y="990.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (2 samples, 0.17%)</title><rect x="1081.8" y="963.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1084.8" y="974.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.17%)</title><rect x="1081.8" y="947.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1084.8" y="958.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.09%)</title><rect x="1083.8" y="979.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1086.8" y="990.0"></text>
</g>
<g>
<title>Assembler::movl(RegisterImpl*, RegisterImpl*) (1 samples, 0.09%)</title><rect x="1083.8" y="963.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1086.8" y="974.0"></text>
</g>
<g>
<title>Compile::valid_bundle_info(Node const*) (1 samples, 0.09%)</title><rect x="1084.8" y="995.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1087.8" y="1006.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 0.43%)</title><rect x="1085.9" y="995.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1088.9" y="1006.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.09%)</title><rect x="1085.9" y="979.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1088.9" y="990.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.26%)</title><rect x="1086.9" y="979.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1089.9" y="990.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.17%)</title><rect x="1086.9" y="963.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1089.9" y="974.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.09%)</title><rect x="1088.9" y="963.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1091.9" y="974.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1088.9" y="947.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1091.9" y="958.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.09%)</title><rect x="1088.9" y="931.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1091.9" y="942.0"></text>
</g>
<g>
<title>URShiftLNode::Opcode() const (1 samples, 0.09%)</title><rect x="1089.9" y="979.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1092.9" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.26%)</title><rect x="1090.9" y="995.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1093.9" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.26%)</title><rect x="1090.9" y="979.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1093.9" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (3 samples, 0.26%)</title><rect x="1090.9" y="963.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1093.9" y="974.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.09%)</title><rect x="1090.9" y="947.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1093.9" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (2 samples, 0.17%)</title><rect x="1091.9" y="947.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1094.9" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (36 samples, 3.08%)</title><rect x="1093.9" y="995.0" width="36.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1096.9" y="1006.0">Pha..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.09%)</title><rect x="1095.0" y="979.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1098.0" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.09%)</title><rect x="1096.0" y="979.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1099.0" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.09%)</title><rect x="1096.0" y="963.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1099.0" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1096.0" y="947.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1099.0" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.26%)</title><rect x="1097.0" y="979.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1100.0" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1098.0" y="963.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1101.0" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.09%)</title><rect x="1099.0" y="963.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1102.0" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 0.43%)</title><rect x="1100.0" y="979.0" width="5.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1103.0" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 0.69%)</title><rect x="1105.1" y="979.0" width="8.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1108.1" y="990.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.09%)</title><rect x="1107.1" y="963.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1110.1" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1108.1" y="963.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1111.1" y="974.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.09%)</title><rect x="1109.1" y="963.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1112.1" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.26%)</title><rect x="1110.1" y="963.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1113.1" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1112.1" y="947.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1115.1" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.17%)</title><rect x="1113.2" y="979.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1116.2" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.17%)</title><rect x="1113.2" y="963.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1116.2" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1114.2" y="947.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1117.2" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (5 samples, 0.43%)</title><rect x="1115.2" y="979.0" width="5.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1118.2" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.17%)</title><rect x="1120.2" y="979.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1123.2" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.17%)</title><rect x="1120.2" y="963.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1123.2" y="974.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.09%)</title><rect x="1122.3" y="979.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.3" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1122.3" y="963.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1125.3" y="974.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 0.43%)</title><rect x="1123.3" y="979.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1126.3" y="990.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1126.3" y="963.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.3" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1126.3" y="947.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1129.3" y="958.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1127.3" y="963.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1130.3" y="974.0"></text>
</g>
<g>
<title>RegMask::is_vector(unsigned int) (1 samples, 0.09%)</title><rect x="1128.3" y="979.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1131.3" y="990.0"></text>
</g>
<g>
<title>rbx_RegPOper::in_RegMask(int) const (1 samples, 0.09%)</title><rect x="1129.3" y="979.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1132.3" y="990.0"></text>
</g>
<g>
<title>Compile::Optimize() (45 samples, 3.86%)</title><rect x="1130.3" y="1011.0" width="45.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1133.3" y="1022.0">Comp..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.17%)</title><rect x="1130.3" y="995.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1133.3" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.17%)</title><rect x="1130.3" y="979.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.3" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::add_local_var_and_edge(Node*, PointsToNode::EscapeState, Node*, Unique_Node_List*) (1 samples, 0.09%)</title><rect x="1130.3" y="963.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1133.3" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.09%)</title><rect x="1131.4" y="963.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1134.4" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (1 samples, 0.09%)</title><rect x="1131.4" y="947.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1134.4" y="958.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.09%)</title><rect x="1131.4" y="931.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1134.4" y="942.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.09%)</title><rect x="1132.4" y="995.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1135.4" y="1006.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1132.4" y="979.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1135.4" y="990.0"></text>
</g>
<g>
<title>TypeInt::filter_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1132.4" y="963.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1135.4" y="974.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1132.4" y="947.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1135.4" y="958.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1132.4" y="931.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1135.4" y="942.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1132.4" y="915.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1135.4" y="926.0"></text>
</g>
<g>
<title>TypeInt::hash() const (1 samples, 0.09%)</title><rect x="1132.4" y="899.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1135.4" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (34 samples, 2.91%)</title><rect x="1133.4" y="995.0" width="34.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1136.4" y="1006.0">Ph..</text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="1133.4" y="979.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.4" y="990.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="1133.4" y="963.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.4" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="1133.4" y="947.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1136.4" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_counted_loop(Node*, IdealLoopTree*) (1 samples, 0.09%)</title><rect x="1133.4" y="931.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.4" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.26%)</title><rect x="1134.4" y="979.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1137.4" y="990.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.09%)</title><rect x="1136.4" y="963.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1139.4" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.34%)</title><rect x="1137.4" y="979.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1140.4" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.17%)</title><rect x="1139.4" y="963.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1142.4" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.17%)</title><rect x="1139.4" y="947.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.4" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (21 samples, 1.80%)</title><rect x="1141.5" y="979.0" width="21.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1144.5" y="990.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (17 samples, 1.46%)</title><rect x="1145.5" y="963.0" width="17.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.5" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1145.5" y="947.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.5" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.09%)</title><rect x="1146.5" y="947.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1149.5" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (15 samples, 1.29%)</title><rect x="1147.5" y="947.0" width="15.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.5" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.09%)</title><rect x="1159.7" y="931.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.7" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1159.7" y="915.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.7" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1159.7" y="899.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.7" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.17%)</title><rect x="1160.7" y="931.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.7" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.17%)</title><rect x="1162.7" y="979.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.7" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.17%)</title><rect x="1164.7" y="979.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.7" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1166.7" y="979.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.7" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1166.7" y="963.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.7" y="974.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1166.7" y="947.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.7" y="958.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1166.7" y="931.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.7" y="942.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1166.7" y="915.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.7" y="926.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1166.7" y="899.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.7" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (7 samples, 0.60%)</title><rect x="1167.8" y="995.0" width="7.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.8" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (7 samples, 0.60%)</title><rect x="1167.8" y="979.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.8" y="990.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (3 samples, 0.26%)</title><rect x="1167.8" y="963.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.8" y="974.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1167.8" y="947.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.8" y="958.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.09%)</title><rect x="1168.8" y="931.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.8" y="942.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1168.8" y="915.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.8" y="926.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1168.8" y="899.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.8" y="910.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1168.8" y="883.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.8" y="894.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.09%)</title><rect x="1168.8" y="867.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.8" y="878.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1169.8" y="947.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.8" y="958.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1169.8" y="931.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.8" y="942.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1169.8" y="915.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.8" y="926.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1170.8" y="963.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.8" y="974.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1170.8" y="947.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.8" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.09%)</title><rect x="1171.8" y="963.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.8" y="974.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1172.8" y="963.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.8" y="974.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.09%)</title><rect x="1172.8" y="947.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.8" y="958.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1173.8" y="963.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.8" y="974.0"></text>
</g>
<g>
<title>TypeInt::filter_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1173.8" y="947.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.8" y="958.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1173.8" y="931.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.8" y="942.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.09%)</title><rect x="1174.8" y="995.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.8" y="1006.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.09%)</title><rect x="1174.8" y="979.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.8" y="990.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1174.8" y="963.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.8" y="974.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.09%)</title><rect x="1174.8" y="947.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.8" y="958.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1174.8" y="931.0" width="1.0" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1177.8" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.51%)</title><rect x="1175.8" y="1011.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.8" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.51%)</title><rect x="1175.8" y="995.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.8" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.51%)</title><rect x="1175.8" y="979.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.8" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.51%)</title><rect x="1175.8" y="963.0" width="6.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.8" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.51%)</title><rect x="1175.8" y="947.0" width="6.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.8" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.51%)</title><rect x="1175.8" y="931.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.8" y="942.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1175.8" y="915.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.8" y="926.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1175.8" y="899.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.8" y="910.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1175.8" y="883.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.8" y="894.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1175.8" y="867.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.8" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1175.8" y="851.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.8" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1175.8" y="835.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.8" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1175.8" y="819.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.8" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1175.8" y="803.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.8" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1175.8" y="787.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.8" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="1175.8" y="771.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.8" y="782.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1175.8" y="755.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.8" y="766.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1175.8" y="739.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.8" y="750.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1175.8" y="723.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.8" y="734.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1175.8" y="707.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.8" y="718.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.09%)</title><rect x="1175.8" y="691.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.8" y="702.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call(CallInfo&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.09%)</title><rect x="1175.8" y="675.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.8" y="686.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.09%)</title><rect x="1175.8" y="659.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.8" y="670.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="1175.8" y="643.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.8" y="654.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="1175.8" y="627.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.8" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.09%)</title><rect x="1175.8" y="611.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.8" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.09%)</title><rect x="1175.8" y="595.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.8" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.34%)</title><rect x="1176.9" y="915.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.9" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.34%)</title><rect x="1176.9" y="899.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.34%)</title><rect x="1176.9" y="883.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.34%)</title><rect x="1176.9" y="867.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.34%)</title><rect x="1176.9" y="851.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.34%)</title><rect x="1176.9" y="835.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.9" y="846.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1176.9" y="819.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.9" y="830.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1176.9" y="803.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.9" y="814.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1176.9" y="787.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.9" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1176.9" y="771.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.9" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1176.9" y="755.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.9" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1176.9" y="739.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.9" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1176.9" y="723.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.9" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1176.9" y="707.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.9" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) (1 samples, 0.09%)</title><rect x="1176.9" y="691.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.9" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::Block(ciTypeFlow*, ciBlock*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1176.9" y="675.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.9" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1177.9" y="819.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.9" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1177.9" y="803.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1177.9" y="787.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1177.9" y="771.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1177.9" y="755.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1177.9" y="739.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.9" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1177.9" y="723.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.9" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1177.9" y="707.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1177.9" y="691.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1177.9" y="675.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1177.9" y="659.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1177.9" y="643.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.9" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1177.9" y="627.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.9" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1177.9" y="611.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1177.9" y="595.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1177.9" y="579.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1177.9" y="563.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1177.9" y="547.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.9" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1177.9" y="531.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.9" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1177.9" y="515.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1177.9" y="499.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1177.9" y="483.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1177.9" y="467.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1177.9" y="451.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.9" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1177.9" y="435.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.9" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1177.9" y="419.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1177.9" y="403.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1177.9" y="387.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1177.9" y="371.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1177.9" y="355.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.9" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1177.9" y="339.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.9" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1177.9" y="323.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1177.9" y="307.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1177.9" y="291.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1177.9" y="275.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1177.9" y="259.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.9" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1177.9" y="243.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.9" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1177.9" y="227.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1177.9" y="211.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1177.9" y="195.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1177.9" y="179.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.9" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1177.9" y="163.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.9" y="174.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.09%)</title><rect x="1177.9" y="147.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.9" y="158.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.09%)</title><rect x="1177.9" y="131.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.9" y="142.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.09%)</title><rect x="1177.9" y="115.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.9" y="126.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1177.9" y="99.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.9" y="110.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1177.9" y="83.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.9" y="94.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1177.9" y="67.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.9" y="78.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 0.09%)</title><rect x="1177.9" y="51.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.9" y="62.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.9" y="627.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.9" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.9" y="611.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.9" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.9" y="595.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.9" y="579.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.9" y="563.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.9" y="547.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1178.9" y="531.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.9" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.9" y="515.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.9" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.9" y="499.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.9" y="483.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.9" y="467.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.9" y="451.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1178.9" y="435.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.9" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.9" y="419.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.9" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.9" y="403.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.9" y="387.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.9" y="371.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.9" y="355.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1178.9" y="339.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.9" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.9" y="323.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.9" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.9" y="307.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.9" y="291.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.9" y="275.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.9" y="259.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1178.9" y="243.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1178.9" y="227.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.9" y="238.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1178.9" y="211.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.9" y="222.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.09%)</title><rect x="1178.9" y="195.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.9" y="206.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1178.9" y="179.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.9" y="190.0"></text>
</g>
<g>
<title>AddPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1178.9" y="163.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.9" y="174.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.09%)</title><rect x="1178.9" y="147.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.9" y="158.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.9" y="723.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.9" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.9" y="707.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.9" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.9" y="691.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.9" y="675.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.9" y="659.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.9" y="643.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.9" y="627.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.9" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.9" y="611.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.9" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.9" y="595.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.9" y="579.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.9" y="563.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.9" y="547.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.9" y="531.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.9" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.9" y="515.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.9" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.9" y="499.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.9" y="483.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.9" y="467.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.9" y="451.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.9" y="435.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.9" y="446.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.9" y="419.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.9" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.9" y="403.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.9" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.9" y="387.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.9" y="371.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.9" y="355.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.9" y="339.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.9" y="323.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.9" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.9" y="307.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.9" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.9" y="291.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.9" y="275.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.9" y="259.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.9" y="243.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.9" y="227.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.9" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.9" y="211.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.9" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.9" y="195.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.9" y="179.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.9" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.9" y="163.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.9" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.9" y="147.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.9" y="158.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1179.9" y="131.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.9" y="142.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1179.9" y="115.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.9" y="126.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.09%)</title><rect x="1179.9" y="99.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.9" y="110.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1179.9" y="83.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.9" y="94.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1179.9" y="67.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.9" y="78.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1179.9" y="51.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.9" y="62.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.09%)</title><rect x="1179.9" y="35.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.9" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.9" y="915.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.9" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.9" y="899.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.9" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.9" y="883.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.9" y="867.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.9" y="851.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.9" y="835.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.9" y="819.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.9" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.9" y="803.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.9" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.9" y="787.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.9" y="771.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.9" y="755.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.9" y="739.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1180.9" y="723.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1180.9" y="707.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.9" y="718.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1180.9" y="691.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.9" y="702.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.09%)</title><rect x="1180.9" y="675.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.9" y="686.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.09%)</title><rect x="1180.9" y="659.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.9" y="670.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.09%)</title><rect x="1180.9" y="643.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.9" y="654.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1180.9" y="627.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.9" y="638.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1180.9" y="611.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.9" y="622.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.09%)</title><rect x="1181.9" y="1011.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.9" y="1022.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.09%)</title><rect x="1181.9" y="995.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.9" y="1006.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 0.26%)</title><rect x="1182.9" y="1043.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.9" y="1054.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 0.26%)</title><rect x="1182.9" y="1027.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.9" y="1038.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.26%)</title><rect x="1182.9" y="1011.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.9" y="1022.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.26%)</title><rect x="1182.9" y="995.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.9" y="1006.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 0.17%)</title><rect x="1182.9" y="979.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.9" y="990.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 0.17%)</title><rect x="1182.9" y="963.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.9" y="974.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 0.17%)</title><rect x="1182.9" y="947.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.9" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 0.17%)</title><rect x="1182.9" y="931.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.9" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.17%)</title><rect x="1182.9" y="915.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.9" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.17%)</title><rect x="1182.9" y="899.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.9" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1182.9" y="883.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.9" y="894.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.09%)</title><rect x="1182.9" y="867.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.9" y="878.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1182.9" y="851.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.9" y="862.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1182.9" y="835.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.9" y="846.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1182.9" y="819.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.9" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1182.9" y="803.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.9" y="814.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1182.9" y="787.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.9" y="798.0"></text>
</g>
<g>
<title>Symbol::as_C_string() const (1 samples, 0.09%)</title><rect x="1182.9" y="771.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.9" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1183.9" y="883.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.9" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::profile_return_type(Instruction*, ciMethod*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1183.9" y="867.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.9" y="878.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.09%)</title><rect x="1183.9" y="851.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.9" y="862.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.09%)</title><rect x="1184.9" y="979.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.9" y="990.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.09%)</title><rect x="1184.9" y="963.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.9" y="974.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_op1(LIR_Op1*) (1 samples, 0.09%)</title><rect x="1184.9" y="947.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.9" y="958.0"></text>
</g>
<g>
<title>LIR_Assembler::mem2reg(LIR_OprDesc*, LIR_OprDesc*, BasicType, LIR_PatchCode, CodeEmitInfo*, bool, bool) (1 samples, 0.09%)</title><rect x="1184.9" y="931.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.9" y="942.0"></text>
</g>
<g>
<title>LIR_Assembler::as_Address(LIR_Address*, RegisterImpl*) (1 samples, 0.09%)</title><rect x="1184.9" y="915.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.9" y="926.0"></text>
</g>
<g>
<title>VMThread::run() (4 samples, 0.34%)</title><rect x="1186.0" y="1107.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.0" y="1118.0"></text>
</g>
<g>
<title>VMThread::loop() (4 samples, 0.34%)</title><rect x="1186.0" y="1091.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.0" y="1102.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.17%)</title><rect x="1186.0" y="1075.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.0" y="1086.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.09%)</title><rect x="1188.0" y="1075.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.0" y="1086.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.09%)</title><rect x="1188.0" y="1059.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.0" y="1070.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.09%)</title><rect x="1188.0" y="1043.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.0" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.09%)</title><rect x="1188.0" y="1027.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.0" y="1038.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.09%)</title><rect x="1188.0" y="1011.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.0" y="1022.0"></text>
</g>
<g>
<title>HeapRegion::hr_clear(bool, bool, bool) (1 samples, 0.09%)</title><rect x="1188.0" y="995.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.0" y="1006.0"></text>
</g>
<g>
<title>__vsnprintf (1 samples, 0.09%)</title><rect x="1189.0" y="1075.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1192.0" y="1086.0"></text>
</g>
</g>
</svg>
