<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1542" onload="init(evt)" viewBox="0 0 1200 1542" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1525"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1525"> </text>
<g id="frames">
<g>
<title>all (387 samples, 100.00%)</title><rect x="10.0" y="1491.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1502.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (28 samples, 7.24%)</title><rect x="10.0" y="1475.0" width="85.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1486.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (28 samples, 7.24%)</title><rect x="10.0" y="1459.0" width="85.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1470.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.26%)</title><rect x="10.0" y="1443.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.26%)</title><rect x="10.0" y="1427.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/356409816.accept (1 samples, 0.26%)</title><rect x="10.0" y="1411.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.26%)</title><rect x="10.0" y="1395.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.26%)</title><rect x="10.0" y="1379.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.26%)</title><rect x="10.0" y="1363.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.26%)</title><rect x="13.0" y="1443.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.0" y="1454.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (1 samples, 0.26%)</title><rect x="13.0" y="1427.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.0" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.26%)</title><rect x="16.1" y="1443.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.1" y="1454.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.26%)</title><rect x="16.1" y="1427.0" width="3.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="19.1" y="1438.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (12 samples, 3.10%)</title><rect x="19.1" y="1443.0" width="36.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.1" y="1454.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1988987165.accept (12 samples, 3.10%)</title><rect x="19.1" y="1427.0" width="36.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="22.1" y="1438.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$72 (12 samples, 3.10%)</title><rect x="19.1" y="1411.0" width="36.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="22.1" y="1422.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (6 samples, 1.55%)</title><rect x="19.1" y="1395.0" width="18.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.1" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (6 samples, 1.55%)</title><rect x="19.1" y="1379.0" width="18.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="22.1" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (6 samples, 1.55%)</title><rect x="19.1" y="1363.0" width="18.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.1" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (6 samples, 1.55%)</title><rect x="19.1" y="1347.0" width="18.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.1" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (6 samples, 1.55%)</title><rect x="19.1" y="1331.0" width="18.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="22.1" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (6 samples, 1.55%)</title><rect x="19.1" y="1315.0" width="18.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="22.1" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 1.55%)</title><rect x="19.1" y="1299.0" width="18.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.1" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 1.55%)</title><rect x="19.1" y="1283.0" width="18.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="22.1" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (6 samples, 1.55%)</title><rect x="19.1" y="1267.0" width="18.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.1" y="1278.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.52%)</title><rect x="31.3" y="1251.0" width="6.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="34.3" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (6 samples, 1.55%)</title><rect x="37.4" y="1395.0" width="18.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="40.4" y="1406.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 1.55%)</title><rect x="37.4" y="1379.0" width="18.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="40.4" y="1390.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.52%)</title><rect x="49.6" y="1363.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="52.6" y="1374.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.26%)</title><rect x="49.6" y="1347.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="52.6" y="1358.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.26%)</title><rect x="49.6" y="1331.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="52.6" y="1342.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.26%)</title><rect x="49.6" y="1315.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="52.6" y="1326.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.26%)</title><rect x="52.7" y="1347.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="55.7" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 3.36%)</title><rect x="55.7" y="1443.0" width="39.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="58.7" y="1454.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 3.36%)</title><rect x="55.7" y="1427.0" width="39.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="58.7" y="1438.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (5 samples, 1.29%)</title><rect x="55.7" y="1411.0" width="15.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.7" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.52%)</title><rect x="55.7" y="1395.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="58.7" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.52%)</title><rect x="55.7" y="1379.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="58.7" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.maybeThrowAnyException (1 samples, 0.26%)</title><rect x="55.7" y="1363.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="58.7" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.clearErrorsAndMaybeThrowException (1 samples, 0.26%)</title><rect x="55.7" y="1347.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="58.7" y="1358.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.26%)</title><rect x="55.7" y="1331.0" width="3.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="58.7" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.26%)</title><rect x="58.8" y="1363.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="61.8" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.26%)</title><rect x="58.8" y="1347.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="61.8" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.26%)</title><rect x="58.8" y="1331.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="61.8" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.26%)</title><rect x="58.8" y="1315.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="61.8" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.26%)</title><rect x="58.8" y="1299.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="61.8" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.26%)</title><rect x="58.8" y="1283.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="61.8" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Max.update (1 samples, 0.26%)</title><rect x="58.8" y="1267.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="61.8" y="1278.0"></text>
</g>
<g>
<title>java/lang/Math.max (1 samples, 0.26%)</title><rect x="58.8" y="1251.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="61.8" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 0.78%)</title><rect x="61.8" y="1395.0" width="9.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="64.8" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 0.78%)</title><rect x="61.8" y="1379.0" width="9.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="64.8" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 0.52%)</title><rect x="61.8" y="1363.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="64.8" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.52%)</title><rect x="61.8" y="1347.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="64.8" y="1358.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.26%)</title><rect x="61.8" y="1331.0" width="3.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="64.8" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.26%)</title><rect x="64.9" y="1331.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="67.9" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.26%)</title><rect x="64.9" y="1315.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="67.9" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.26%)</title><rect x="64.9" y="1299.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="67.9" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.26%)</title><rect x="64.9" y="1283.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="67.9" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.26%)</title><rect x="64.9" y="1267.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="67.9" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.26%)</title><rect x="64.9" y="1251.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="67.9" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.26%)</title><rect x="64.9" y="1235.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="67.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.26%)</title><rect x="64.9" y="1219.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="67.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.26%)</title><rect x="67.9" y="1363.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.9" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.26%)</title><rect x="67.9" y="1347.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="70.9" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.26%)</title><rect x="67.9" y="1331.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="70.9" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.26%)</title><rect x="67.9" y="1315.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="70.9" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.52%)</title><rect x="71.0" y="1411.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="74.0" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.26%)</title><rect x="71.0" y="1395.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="74.0" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.26%)</title><rect x="71.0" y="1379.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="74.0" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.26%)</title><rect x="74.0" y="1395.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="77.0" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.maybeUpdateSubscriptionMetadata (1 samples, 0.26%)</title><rect x="74.0" y="1379.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="77.0" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.updateVersion (1 samples, 0.26%)</title><rect x="74.0" y="1363.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="77.0" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 1.03%)</title><rect x="77.1" y="1411.0" width="12.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="80.1" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.26%)</title><rect x="77.1" y="1395.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="80.1" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.26%)</title><rect x="77.1" y="1379.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="80.1" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.26%)</title><rect x="77.1" y="1363.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="80.1" y="1374.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.26%)</title><rect x="77.1" y="1347.0" width="3.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="80.1" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.26%)</title><rect x="80.1" y="1395.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="83.1" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.26%)</title><rect x="80.1" y="1379.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="83.1" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.26%)</title><rect x="80.1" y="1363.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="83.1" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.26%)</title><rect x="80.1" y="1347.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="83.1" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.26%)</title><rect x="80.1" y="1331.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="83.1" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.26%)</title><rect x="80.1" y="1315.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="83.1" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.26%)</title><rect x="80.1" y="1299.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="83.1" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.26%)</title><rect x="80.1" y="1283.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="83.1" y="1294.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.26%)</title><rect x="80.1" y="1267.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="83.1" y="1278.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.26%)</title><rect x="80.1" y="1251.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="83.1" y="1262.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.26%)</title><rect x="80.1" y="1235.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="83.1" y="1246.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.26%)</title><rect x="80.1" y="1219.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="83.1" y="1230.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.26%)</title><rect x="80.1" y="1203.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="83.1" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.52%)</title><rect x="83.2" y="1395.0" width="6.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="86.2" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.52%)</title><rect x="83.2" y="1379.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="86.2" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.52%)</title><rect x="83.2" y="1363.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="86.2" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.52%)</title><rect x="83.2" y="1347.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="86.2" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (2 samples, 0.52%)</title><rect x="83.2" y="1331.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="86.2" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (2 samples, 0.52%)</title><rect x="83.2" y="1315.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="86.2" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (2 samples, 0.52%)</title><rect x="83.2" y="1299.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="86.2" y="1310.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet.iterator (1 samples, 0.26%)</title><rect x="83.2" y="1283.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="86.2" y="1294.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$1.&lt;init&gt; (1 samples, 0.26%)</title><rect x="83.2" y="1267.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="86.2" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$TopicAndPartitionData.batchByTopic (1 samples, 0.26%)</title><rect x="86.2" y="1283.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="89.2" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.26%)</title><rect x="86.2" y="1267.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="89.2" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.26%)</title><rect x="86.2" y="1251.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="89.2" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.26%)</title><rect x="86.2" y="1235.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="89.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.52%)</title><rect x="89.3" y="1411.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.3" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.52%)</title><rect x="89.3" y="1395.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="92.3" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.52%)</title><rect x="89.3" y="1379.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="92.3" y="1390.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.26%)</title><rect x="89.3" y="1363.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="92.3" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.26%)</title><rect x="92.3" y="1363.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="95.3" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.26%)</title><rect x="92.3" y="1347.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="95.3" y="1358.0"></text>
</g>
<g>
<title>java/lang/Thread.run (213 samples, 55.04%)</title><rect x="95.4" y="1475.0" width="649.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="98.4" y="1486.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (213 samples, 55.04%)</title><rect x="95.4" y="1459.0" width="649.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="98.4" y="1470.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (213 samples, 55.04%)</title><rect x="95.4" y="1443.0" width="649.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="98.4" y="1454.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/63811513.run (201 samples, 51.94%)</title><rect x="95.4" y="1427.0" width="612.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="98.4" y="1438.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/63811513.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (201 samples, 51.94%)</title><rect x="95.4" y="1411.0" width="612.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="98.4" y="1422.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (201 samples, 51.94%)</title><rect x="95.4" y="1395.0" width="612.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="98.4" y="1406.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (199 samples, 51.42%)</title><rect x="101.5" y="1379.0" width="606.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="104.5" y="1390.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (36 samples, 9.30%)</title><rect x="119.8" y="1363.0" width="109.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="122.8" y="1374.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (36 samples, 9.30%)</title><rect x="119.8" y="1347.0" width="109.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="122.8" y="1358.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (36 samples, 9.30%)</title><rect x="119.8" y="1331.0" width="109.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="122.8" y="1342.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (36 samples, 9.30%)</title><rect x="119.8" y="1315.0" width="109.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="122.8" y="1326.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (36 samples, 9.30%)</title><rect x="119.8" y="1299.0" width="109.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="122.8" y="1310.0">com/linecorp/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (36 samples, 9.30%)</title><rect x="119.8" y="1283.0" width="109.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="122.8" y="1294.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (17 samples, 4.39%)</title><rect x="119.8" y="1267.0" width="51.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="122.8" y="1278.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (7 samples, 1.81%)</title><rect x="119.8" y="1251.0" width="21.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="122.8" y="1262.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (7 samples, 1.81%)</title><rect x="119.8" y="1235.0" width="21.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="122.8" y="1246.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (4 samples, 1.03%)</title><rect x="119.8" y="1219.0" width="12.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="122.8" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.78%)</title><rect x="132.0" y="1219.0" width="9.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="135.0" y="1230.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.26%)</title><rect x="132.0" y="1203.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="135.0" y="1214.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (2 samples, 0.52%)</title><rect x="135.0" y="1203.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="138.0" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (10 samples, 2.58%)</title><rect x="141.1" y="1251.0" width="30.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="144.1" y="1262.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.26%)</title><rect x="141.1" y="1235.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="144.1" y="1246.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.26%)</title><rect x="141.1" y="1219.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="144.1" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.26%)</title><rect x="141.1" y="1203.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="144.1" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.26%)</title><rect x="141.1" y="1187.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="144.1" y="1198.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.26%)</title><rect x="141.1" y="1171.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="144.1" y="1182.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.26%)</title><rect x="141.1" y="1155.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="144.1" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (9 samples, 2.33%)</title><rect x="144.2" y="1235.0" width="27.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="147.2" y="1246.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (5 samples, 1.29%)</title><rect x="144.2" y="1219.0" width="15.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="147.2" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (1 samples, 0.26%)</title><rect x="147.2" y="1203.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="150.2" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.checkUTF16 (2 samples, 0.52%)</title><rect x="150.3" y="1203.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="153.3" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.26%)</title><rect x="156.4" y="1203.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="159.4" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (3 samples, 0.78%)</title><rect x="159.4" y="1219.0" width="9.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="162.4" y="1230.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.26%)</title><rect x="159.4" y="1203.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="162.4" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.52%)</title><rect x="162.5" y="1203.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="165.5" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.52%)</title><rect x="162.5" y="1187.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="165.5" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.26%)</title><rect x="168.6" y="1219.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="171.6" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (19 samples, 4.91%)</title><rect x="171.6" y="1267.0" width="57.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="174.6" y="1278.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.26%)</title><rect x="171.6" y="1251.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="174.6" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.26%)</title><rect x="171.6" y="1235.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="174.6" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.26%)</title><rect x="171.6" y="1219.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="174.6" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.26%)</title><rect x="171.6" y="1203.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="174.6" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.52%)</title><rect x="174.7" y="1251.0" width="6.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="177.7" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.52%)</title><rect x="174.7" y="1235.0" width="6.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="177.7" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (2 samples, 0.52%)</title><rect x="174.7" y="1219.0" width="6.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="177.7" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (2 samples, 0.52%)</title><rect x="174.7" y="1203.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="177.7" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (2 samples, 0.52%)</title><rect x="174.7" y="1187.0" width="6.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="177.7" y="1198.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.26%)</title><rect x="174.7" y="1171.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="177.7" y="1182.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.26%)</title><rect x="177.7" y="1171.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="180.7" y="1182.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.26%)</title><rect x="177.7" y="1155.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="180.7" y="1166.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.26%)</title><rect x="177.7" y="1139.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="180.7" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (16 samples, 4.13%)</title><rect x="180.7" y="1251.0" width="48.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="183.7" y="1262.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 1.29%)</title><rect x="180.7" y="1235.0" width="15.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="183.7" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.26%)</title><rect x="186.8" y="1219.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="189.8" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.26%)</title><rect x="186.8" y="1203.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="189.8" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.26%)</title><rect x="186.8" y="1187.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="189.8" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.26%)</title><rect x="189.9" y="1219.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="192.9" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.26%)</title><rect x="192.9" y="1219.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="195.9" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (11 samples, 2.84%)</title><rect x="196.0" y="1235.0" width="33.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="199.0" y="1246.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (11 samples, 2.84%)</title><rect x="196.0" y="1219.0" width="33.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="199.0" y="1230.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (11 samples, 2.84%)</title><rect x="196.0" y="1203.0" width="33.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="199.0" y="1214.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.52%)</title><rect x="199.0" y="1187.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="202.0" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.26%)</title><rect x="199.0" y="1171.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="202.0" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.26%)</title><rect x="199.0" y="1155.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="202.0" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.26%)</title><rect x="199.0" y="1139.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="202.0" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.26%)</title><rect x="199.0" y="1123.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="202.0" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.26%)</title><rect x="199.0" y="1107.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="202.0" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.26%)</title><rect x="202.1" y="1171.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="205.1" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (4 samples, 1.03%)</title><rect x="205.1" y="1187.0" width="12.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="208.1" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 1.03%)</title><rect x="205.1" y="1171.0" width="12.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="208.1" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 1.03%)</title><rect x="205.1" y="1155.0" width="12.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="208.1" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 1.03%)</title><rect x="205.1" y="1139.0" width="12.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="208.1" y="1150.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (4 samples, 1.03%)</title><rect x="205.1" y="1123.0" width="12.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="208.1" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.26%)</title><rect x="217.3" y="1187.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="220.3" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.52%)</title><rect x="220.4" y="1187.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="223.4" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.52%)</title><rect x="220.4" y="1171.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="223.4" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.52%)</title><rect x="220.4" y="1155.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="223.4" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.52%)</title><rect x="220.4" y="1139.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="223.4" y="1150.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.52%)</title><rect x="220.4" y="1123.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.4" y="1134.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (2 samples, 0.52%)</title><rect x="220.4" y="1107.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="223.4" y="1118.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (2 samples, 0.52%)</title><rect x="220.4" y="1091.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="223.4" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.26%)</title><rect x="226.5" y="1187.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="229.5" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.26%)</title><rect x="226.5" y="1171.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="229.5" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.26%)</title><rect x="226.5" y="1155.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="229.5" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (143 samples, 36.95%)</title><rect x="229.5" y="1363.0" width="436.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="232.5" y="1374.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (24 samples, 6.20%)</title><rect x="229.5" y="1347.0" width="73.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="232.5" y="1358.0">com/line..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (20 samples, 5.17%)</title><rect x="241.7" y="1331.0" width="61.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="244.7" y="1342.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (18 samples, 4.65%)</title><rect x="247.8" y="1315.0" width="54.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="250.8" y="1326.0">ch/qo..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (15 samples, 3.88%)</title><rect x="257.0" y="1299.0" width="45.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="260.0" y="1310.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (11 samples, 2.84%)</title><rect x="269.2" y="1283.0" width="33.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="272.2" y="1294.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 0.78%)</title><rect x="293.6" y="1267.0" width="9.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="296.6" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 1.03%)</title><rect x="302.7" y="1347.0" width="12.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="305.7" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 1.03%)</title><rect x="302.7" y="1331.0" width="12.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="305.7" y="1342.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 1.03%)</title><rect x="302.7" y="1315.0" width="12.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="305.7" y="1326.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.26%)</title><rect x="311.9" y="1299.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="314.9" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (26 samples, 6.72%)</title><rect x="314.9" y="1347.0" width="79.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="317.9" y="1358.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (26 samples, 6.72%)</title><rect x="314.9" y="1331.0" width="79.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="317.9" y="1342.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (8 samples, 2.07%)</title><rect x="314.9" y="1315.0" width="24.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="317.9" y="1326.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (8 samples, 2.07%)</title><rect x="314.9" y="1299.0" width="24.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="317.9" y="1310.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 1.81%)</title><rect x="314.9" y="1283.0" width="21.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="317.9" y="1294.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (6 samples, 1.55%)</title><rect x="314.9" y="1267.0" width="18.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="317.9" y="1278.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (6 samples, 1.55%)</title><rect x="314.9" y="1251.0" width="18.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="317.9" y="1262.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 1.55%)</title><rect x="314.9" y="1235.0" width="18.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="317.9" y="1246.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (5 samples, 1.29%)</title><rect x="318.0" y="1219.0" width="15.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="321.0" y="1230.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 1.29%)</title><rect x="318.0" y="1203.0" width="15.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="321.0" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.52%)</title><rect x="327.1" y="1187.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="330.1" y="1198.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.26%)</title><rect x="333.2" y="1267.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="336.2" y="1278.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.26%)</title><rect x="336.3" y="1283.0" width="3.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="339.3" y="1294.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 0.52%)</title><rect x="339.3" y="1315.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="342.3" y="1326.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.26%)</title><rect x="339.3" y="1299.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="342.3" y="1310.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.26%)</title><rect x="339.3" y="1283.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="342.3" y="1294.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.26%)</title><rect x="342.4" y="1299.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="345.4" y="1310.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.26%)</title><rect x="342.4" y="1283.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="345.4" y="1294.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (16 samples, 4.13%)</title><rect x="345.4" y="1315.0" width="48.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="348.4" y="1326.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (12 samples, 3.10%)</title><rect x="351.5" y="1299.0" width="36.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="354.5" y="1310.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.52%)</title><rect x="351.5" y="1283.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="354.5" y="1294.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.52%)</title><rect x="351.5" y="1267.0" width="6.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="354.5" y="1278.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.52%)</title><rect x="351.5" y="1251.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="354.5" y="1262.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.52%)</title><rect x="351.5" y="1235.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="354.5" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (10 samples, 2.58%)</title><rect x="357.6" y="1283.0" width="30.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="360.6" y="1294.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (9 samples, 2.33%)</title><rect x="360.6" y="1267.0" width="27.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="363.6" y="1278.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 1.55%)</title><rect x="369.8" y="1251.0" width="18.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="372.8" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 0.78%)</title><rect x="375.9" y="1235.0" width="9.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="378.9" y="1246.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.26%)</title><rect x="385.0" y="1235.0" width="3.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="388.0" y="1246.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.52%)</title><rect x="388.1" y="1299.0" width="6.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="391.1" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (78 samples, 20.16%)</title><rect x="394.2" y="1347.0" width="237.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="397.2" y="1358.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (78 samples, 20.16%)</title><rect x="394.2" y="1331.0" width="237.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="397.2" y="1342.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/696532246.process (65 samples, 16.80%)</title><rect x="400.3" y="1315.0" width="198.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="403.3" y="1326.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (65 samples, 16.80%)</title><rect x="400.3" y="1299.0" width="198.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="403.3" y="1310.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (65 samples, 16.80%)</title><rect x="400.3" y="1283.0" width="198.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="403.3" y="1294.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.26%)</title><rect x="403.3" y="1267.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="406.3" y="1278.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.26%)</title><rect x="403.3" y="1251.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="406.3" y="1262.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.26%)</title><rect x="403.3" y="1235.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="406.3" y="1246.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.26%)</title><rect x="403.3" y="1219.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="406.3" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (63 samples, 16.28%)</title><rect x="406.4" y="1267.0" width="192.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="409.4" y="1278.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>java/lang/Thread.sleep (60 samples, 15.50%)</title><rect x="406.4" y="1251.0" width="182.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="409.4" y="1262.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.26%)</title><rect x="418.6" y="1235.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="421.6" y="1246.0"></text>
</g>
<g>
<title>JVM_Sleep (55 samples, 14.21%)</title><rect x="421.6" y="1235.0" width="167.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="424.6" y="1246.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.78%)</title><rect x="436.9" y="1219.0" width="9.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="439.9" y="1230.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.26%)</title><rect x="446.0" y="1219.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="449.0" y="1230.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (46 samples, 11.89%)</title><rect x="449.1" y="1219.0" width="140.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="452.1" y="1230.0">os::sleep(Thread*,..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.78%)</title><rect x="470.4" y="1203.0" width="9.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="473.4" y="1214.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (3 samples, 0.78%)</title><rect x="470.4" y="1187.0" width="9.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="473.4" y="1198.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.26%)</title><rect x="479.6" y="1203.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="482.6" y="1214.0"></text>
</g>
<g>
<title>__lll_unlock_wake (7 samples, 1.81%)</title><rect x="482.6" y="1203.0" width="21.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="485.6" y="1214.0">_..</text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.26%)</title><rect x="504.0" y="1203.0" width="3.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="507.0" y="1214.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (23 samples, 5.94%)</title><rect x="507.0" y="1203.0" width="70.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="510.0" y="1214.0">__pthrea..</text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.52%)</title><rect x="577.1" y="1203.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="580.1" y="1214.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.26%)</title><rect x="583.2" y="1203.0" width="3.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="586.2" y="1214.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.26%)</title><rect x="586.3" y="1203.0" width="3.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="589.3" y="1214.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.78%)</title><rect x="589.3" y="1251.0" width="9.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="592.3" y="1262.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.78%)</title><rect x="589.3" y="1235.0" width="9.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="592.3" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (2 samples, 0.52%)</title><rect x="598.5" y="1315.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="601.5" y="1326.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1016925085.linkToTargetMethod (1 samples, 0.26%)</title><rect x="604.6" y="1315.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="607.6" y="1326.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.26%)</title><rect x="604.6" y="1299.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="607.6" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$284/505118715.get$Lambda (1 samples, 0.26%)</title><rect x="604.6" y="1283.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="607.6" y="1294.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (4 samples, 1.03%)</title><rect x="607.6" y="1315.0" width="12.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="610.6" y="1326.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (3 samples, 0.78%)</title><rect x="610.7" y="1299.0" width="9.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="613.7" y="1310.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (1 samples, 0.26%)</title><rect x="616.8" y="1283.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="619.8" y="1294.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.26%)</title><rect x="619.8" y="1315.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="622.8" y="1326.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.26%)</title><rect x="619.8" y="1299.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="622.8" y="1310.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.26%)</title><rect x="619.8" y="1283.0" width="3.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="622.8" y="1294.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.52%)</title><rect x="622.9" y="1315.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="625.9" y="1326.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.52%)</title><rect x="622.9" y="1299.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="625.9" y="1310.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (2 samples, 0.52%)</title><rect x="622.9" y="1283.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="625.9" y="1294.0"></text>
</g>
<g>
<title>java/util/ArrayList.elementData (2 samples, 0.52%)</title><rect x="622.9" y="1267.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="625.9" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.26%)</title><rect x="629.0" y="1315.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="632.0" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.26%)</title><rect x="632.0" y="1347.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="635.0" y="1358.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.26%)</title><rect x="632.0" y="1331.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="635.0" y="1342.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.26%)</title><rect x="632.0" y="1315.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="635.0" y="1326.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.26%)</title><rect x="632.0" y="1299.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="635.0" y="1310.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.26%)</title><rect x="632.0" y="1283.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="635.0" y="1294.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.26%)</title><rect x="632.0" y="1267.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="635.0" y="1278.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.26%)</title><rect x="632.0" y="1251.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="635.0" y="1262.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.26%)</title><rect x="632.0" y="1235.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="635.0" y="1246.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.26%)</title><rect x="632.0" y="1219.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="635.0" y="1230.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.26%)</title><rect x="632.0" y="1203.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="635.0" y="1214.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.26%)</title><rect x="632.0" y="1187.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="635.0" y="1198.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.26%)</title><rect x="632.0" y="1171.0" width="3.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="635.0" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 2.58%)</title><rect x="635.1" y="1347.0" width="30.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="638.1" y="1358.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 2.58%)</title><rect x="635.1" y="1331.0" width="30.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="638.1" y="1342.0">ja..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.26%)</title><rect x="647.3" y="1315.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="650.3" y="1326.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.26%)</title><rect x="647.3" y="1299.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="650.3" y="1310.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.26%)</title><rect x="647.3" y="1283.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="650.3" y="1294.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.26%)</title><rect x="647.3" y="1267.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="650.3" y="1278.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.26%)</title><rect x="647.3" y="1251.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="650.3" y="1262.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.26%)</title><rect x="647.3" y="1235.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="650.3" y="1246.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.52%)</title><rect x="650.3" y="1315.0" width="6.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="653.3" y="1326.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.52%)</title><rect x="650.3" y="1299.0" width="6.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="653.3" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.78%)</title><rect x="656.4" y="1315.0" width="9.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="659.4" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$290/1168538614.accept (3 samples, 0.78%)</title><rect x="656.4" y="1299.0" width="9.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="659.4" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$43 (3 samples, 0.78%)</title><rect x="656.4" y="1283.0" width="9.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="659.4" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/1421532683.complete (3 samples, 0.78%)</title><rect x="656.4" y="1267.0" width="9.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="659.4" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$46 (3 samples, 0.78%)</title><rect x="656.4" y="1251.0" width="9.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="659.4" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1414945980.complete (3 samples, 0.78%)</title><rect x="656.4" y="1235.0" width="9.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="659.4" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (3 samples, 0.78%)</title><rect x="656.4" y="1219.0" width="9.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="659.4" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (3 samples, 0.78%)</title><rect x="656.4" y="1203.0" width="9.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="659.4" y="1214.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (3 samples, 0.78%)</title><rect x="656.4" y="1187.0" width="9.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="659.4" y="1198.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (3 samples, 0.78%)</title><rect x="656.4" y="1171.0" width="9.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="659.4" y="1182.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.78%)</title><rect x="656.4" y="1155.0" width="9.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="659.4" y="1166.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.26%)</title><rect x="659.5" y="1139.0" width="3.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="662.5" y="1150.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.26%)</title><rect x="659.5" y="1123.0" width="3.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="662.5" y="1134.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.26%)</title><rect x="662.5" y="1139.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="665.5" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 3.62%)</title><rect x="665.6" y="1363.0" width="42.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="668.6" y="1374.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (14 samples, 3.62%)</title><rect x="665.6" y="1347.0" width="42.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="668.6" y="1358.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (14 samples, 3.62%)</title><rect x="665.6" y="1331.0" width="42.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="668.6" y="1342.0">java..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$290/1168538614.accept (14 samples, 3.62%)</title><rect x="665.6" y="1315.0" width="42.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="668.6" y="1326.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$43 (14 samples, 3.62%)</title><rect x="665.6" y="1299.0" width="42.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="668.6" y="1310.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/1421532683.complete (14 samples, 3.62%)</title><rect x="665.6" y="1283.0" width="42.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="668.6" y="1294.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$46 (14 samples, 3.62%)</title><rect x="665.6" y="1267.0" width="42.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="668.6" y="1278.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1414945980.complete (14 samples, 3.62%)</title><rect x="665.6" y="1251.0" width="42.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="668.6" y="1262.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (14 samples, 3.62%)</title><rect x="665.6" y="1235.0" width="42.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="668.6" y="1246.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (14 samples, 3.62%)</title><rect x="665.6" y="1219.0" width="42.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="668.6" y="1230.0">com/..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (14 samples, 3.62%)</title><rect x="665.6" y="1203.0" width="42.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="668.6" y="1214.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (14 samples, 3.62%)</title><rect x="665.6" y="1187.0" width="42.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="668.6" y="1198.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (14 samples, 3.62%)</title><rect x="665.6" y="1171.0" width="42.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="668.6" y="1182.0">ch/q..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (6 samples, 1.55%)</title><rect x="708.2" y="1427.0" width="18.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="711.2" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 1.55%)</title><rect x="708.2" y="1411.0" width="18.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="711.2" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 1.55%)</title><rect x="708.2" y="1395.0" width="18.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="711.2" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 1.55%)</title><rect x="708.2" y="1379.0" width="18.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="711.2" y="1390.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.26%)</title><rect x="720.4" y="1363.0" width="3.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="723.4" y="1374.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.26%)</title><rect x="720.4" y="1347.0" width="3.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="723.4" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (1 samples, 0.26%)</title><rect x="723.5" y="1363.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="726.5" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (6 samples, 1.55%)</title><rect x="726.5" y="1427.0" width="18.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="729.5" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (6 samples, 1.55%)</title><rect x="726.5" y="1411.0" width="18.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="729.5" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.26%)</title><rect x="732.6" y="1395.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="735.6" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.26%)</title><rect x="732.6" y="1379.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="735.6" y="1390.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.26%)</title><rect x="732.6" y="1363.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="735.6" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.78%)</title><rect x="735.7" y="1395.0" width="9.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="738.7" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.78%)</title><rect x="735.7" y="1379.0" width="9.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="738.7" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.78%)</title><rect x="735.7" y="1363.0" width="9.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="738.7" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.78%)</title><rect x="735.7" y="1347.0" width="9.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="738.7" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.52%)</title><rect x="744.8" y="1475.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="747.8" y="1486.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.26%)</title><rect x="744.8" y="1459.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="747.8" y="1470.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.26%)</title><rect x="744.8" y="1443.0" width="3.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="747.8" y="1454.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 0.26%)</title><rect x="744.8" y="1427.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="747.8" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.26%)</title><rect x="747.9" y="1459.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="750.9" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.26%)</title><rect x="747.9" y="1443.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="750.9" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.26%)</title><rect x="747.9" y="1427.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="750.9" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.26%)</title><rect x="747.9" y="1411.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="750.9" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.26%)</title><rect x="747.9" y="1395.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="750.9" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.26%)</title><rect x="747.9" y="1379.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="750.9" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.26%)</title><rect x="747.9" y="1363.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="750.9" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.26%)</title><rect x="747.9" y="1347.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="750.9" y="1358.0"></text>
</g>
<g>
<title>start_thread (144 samples, 37.21%)</title><rect x="750.9" y="1475.0" width="439.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="753.9" y="1486.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (144 samples, 37.21%)</title><rect x="750.9" y="1459.0" width="439.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="753.9" y="1470.0">java_start(Thread*)</text>
</g>
<g>
<title>ConcurrentG1RefineThread::run() (1 samples, 0.26%)</title><rect x="750.9" y="1443.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="753.9" y="1454.0"></text>
</g>
<g>
<title>ConcurrentG1RefineThread::run_young_rs_sampling() (1 samples, 0.26%)</title><rect x="750.9" y="1427.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="753.9" y="1438.0"></text>
</g>
<g>
<title>ConcurrentG1RefineThread::sample_young_list_rs_lengths() (1 samples, 0.26%)</title><rect x="750.9" y="1411.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="753.9" y="1422.0"></text>
</g>
<g>
<title>YoungList::rs_length_sampling_next() (1 samples, 0.26%)</title><rect x="750.9" y="1395.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="753.9" y="1406.0"></text>
</g>
<g>
<title>GangWorker::loop() (18 samples, 4.65%)</title><rect x="754.0" y="1443.0" width="54.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="757.0" y="1454.0">GangW..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (18 samples, 4.65%)</title><rect x="754.0" y="1427.0" width="54.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="757.0" y="1438.0">G1Par..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (17 samples, 4.39%)</title><rect x="754.0" y="1411.0" width="51.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="757.0" y="1422.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.26%)</title><rect x="754.0" y="1395.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="757.0" y="1406.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (14 samples, 3.62%)</title><rect x="757.0" y="1395.0" width="42.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="760.0" y="1406.0">G1Pa..</text>
</g>
<g>
<title>G1DefaultParGCAllocator::alloc_buffer(InCSetState, unsigned char) (1 samples, 0.26%)</title><rect x="769.2" y="1379.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="772.2" y="1390.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (7 samples, 1.81%)</title><rect x="772.3" y="1379.0" width="21.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="775.3" y="1390.0">G..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (3 samples, 0.78%)</title><rect x="784.5" y="1363.0" width="9.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="787.5" y="1374.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.26%)</title><rect x="790.6" y="1347.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="793.6" y="1358.0"></text>
</g>
<g>
<title>Klass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.26%)</title><rect x="793.6" y="1379.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="796.6" y="1390.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.26%)</title><rect x="796.7" y="1379.0" width="3.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="799.7" y="1390.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.26%)</title><rect x="799.7" y="1395.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="802.7" y="1406.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.26%)</title><rect x="802.8" y="1395.0" width="3.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="805.8" y="1406.0"></text>
</g>
<g>
<title>G1ParScanThreadState::~G1ParScanThreadState() (1 samples, 0.26%)</title><rect x="805.8" y="1411.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="808.8" y="1422.0"></text>
</g>
<g>
<title>G1DefaultParGCAllocator::retire_alloc_buffers() (1 samples, 0.26%)</title><rect x="805.8" y="1395.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="808.8" y="1406.0"></text>
</g>
<g>
<title>JavaThread::run() (124 samples, 32.04%)</title><rect x="808.9" y="1443.0" width="378.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="811.9" y="1454.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (124 samples, 32.04%)</title><rect x="808.9" y="1427.0" width="378.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="811.9" y="1438.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (124 samples, 32.04%)</title><rect x="808.9" y="1411.0" width="378.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="811.9" y="1422.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (124 samples, 32.04%)</title><rect x="808.9" y="1395.0" width="378.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="811.9" y="1406.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (120 samples, 31.01%)</title><rect x="808.9" y="1379.0" width="365.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="811.9" y="1390.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (120 samples, 31.01%)</title><rect x="808.9" y="1363.0" width="365.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="811.9" y="1374.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, i..</text>
</g>
<g>
<title>Compile::Code_Gen() (57 samples, 14.73%)</title><rect x="808.9" y="1347.0" width="173.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="811.9" y="1358.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.78%)</title><rect x="808.9" y="1331.0" width="9.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="811.9" y="1342.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.52%)</title><rect x="808.9" y="1315.0" width="6.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="811.9" y="1326.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.26%)</title><rect x="815.0" y="1315.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="818.0" y="1326.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.26%)</title><rect x="815.0" y="1299.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="818.0" y="1310.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.26%)</title><rect x="815.0" y="1283.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="818.0" y="1294.0"></text>
</g>
<g>
<title>loadConINode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.26%)</title><rect x="815.0" y="1267.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="818.0" y="1278.0"></text>
</g>
<g>
<title>MachOper::reg(PhaseRegAlloc*, Node const*) const (1 samples, 0.26%)</title><rect x="815.0" y="1251.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="818.0" y="1262.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.52%)</title><rect x="818.0" y="1331.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="821.0" y="1342.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.26%)</title><rect x="818.0" y="1315.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="821.0" y="1326.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.26%)</title><rect x="818.0" y="1299.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="821.0" y="1310.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.26%)</title><rect x="821.1" y="1315.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="824.1" y="1326.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.26%)</title><rect x="821.1" y="1299.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="824.1" y="1310.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.03%)</title><rect x="824.1" y="1331.0" width="12.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="827.1" y="1342.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.03%)</title><rect x="824.1" y="1315.0" width="12.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="827.1" y="1326.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.52%)</title><rect x="824.1" y="1299.0" width="6.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="827.1" y="1310.0"></text>
</g>
<g>
<title>Matcher::collect_null_checks(Node*, Node*) (1 samples, 0.26%)</title><rect x="830.2" y="1299.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="833.2" y="1310.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.26%)</title><rect x="833.3" y="1299.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="836.3" y="1310.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.26%)</title><rect x="833.3" y="1283.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="836.3" y="1294.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.26%)</title><rect x="833.3" y="1267.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="836.3" y="1278.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.26%)</title><rect x="833.3" y="1251.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="836.3" y="1262.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 1.03%)</title><rect x="836.3" y="1331.0" width="12.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="839.3" y="1342.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.26%)</title><rect x="836.3" y="1315.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="839.3" y="1326.0"></text>
</g>
<g>
<title>PhaseCFG::create_loop_tree() (1 samples, 0.26%)</title><rect x="836.3" y="1299.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="839.3" y="1310.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.78%)</title><rect x="839.4" y="1315.0" width="9.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="842.4" y="1326.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.26%)</title><rect x="839.4" y="1299.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="842.4" y="1310.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.26%)</title><rect x="839.4" y="1283.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="842.4" y="1294.0"></text>
</g>
<g>
<title>MachNode::memory_inputs(Node*&amp;, Node*&amp;) const (1 samples, 0.26%)</title><rect x="839.4" y="1267.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="842.4" y="1278.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.52%)</title><rect x="842.4" y="1299.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="845.4" y="1310.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.26%)</title><rect x="842.4" y="1283.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="845.4" y="1294.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.26%)</title><rect x="845.5" y="1283.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="848.5" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (44 samples, 11.37%)</title><rect x="848.5" y="1331.0" width="134.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="851.5" y="1342.0">PhaseChaitin::Reg..</text>
</g>
<g>
<title>Node::cisc_operand() const (1 samples, 0.26%)</title><rect x="848.5" y="1315.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="851.5" y="1326.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.26%)</title><rect x="851.6" y="1315.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="854.6" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.78%)</title><rect x="854.6" y="1315.0" width="9.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="857.6" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.26%)</title><rect x="854.6" y="1299.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="857.6" y="1310.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.52%)</title><rect x="857.6" y="1299.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="860.6" y="1310.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.26%)</title><rect x="860.7" y="1283.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="863.7" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.78%)</title><rect x="863.7" y="1315.0" width="9.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="866.7" y="1326.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 0.78%)</title><rect x="863.7" y="1299.0" width="9.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="866.7" y="1310.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.26%)</title><rect x="869.8" y="1283.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="872.8" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (8 samples, 2.07%)</title><rect x="872.9" y="1315.0" width="24.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="875.9" y="1326.0">P..</text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.26%)</title><rect x="885.1" y="1299.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="888.1" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::split_DEF(Node*, Block*, int, unsigned int, Node**, Node**, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.26%)</title><rect x="888.1" y="1299.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="891.1" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.26%)</title><rect x="888.1" y="1283.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="891.1" y="1294.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.26%)</title><rect x="888.1" y="1267.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="891.1" y="1278.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.26%)</title><rect x="888.1" y="1251.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="891.1" y="1262.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.26%)</title><rect x="891.2" y="1299.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="894.2" y="1310.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.26%)</title><rect x="891.2" y="1283.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="894.2" y="1294.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.26%)</title><rect x="891.2" y="1267.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="894.2" y="1278.0"></text>
</g>
<g>
<title>PhiNode::out_RegMask() const (1 samples, 0.26%)</title><rect x="894.2" y="1299.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="897.2" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 1.55%)</title><rect x="897.3" y="1315.0" width="18.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="900.3" y="1326.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.26%)</title><rect x="903.4" y="1299.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="906.4" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.78%)</title><rect x="906.4" y="1299.0" width="9.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="909.4" y="1310.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (2 samples, 0.52%)</title><rect x="909.5" y="1283.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="912.5" y="1294.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.78%)</title><rect x="915.6" y="1315.0" width="9.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="918.6" y="1326.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.26%)</title><rect x="921.7" y="1299.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="924.7" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.78%)</title><rect x="924.7" y="1315.0" width="9.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="927.7" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.52%)</title><rect x="927.8" y="1299.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="930.8" y="1310.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (9 samples, 2.33%)</title><rect x="933.9" y="1315.0" width="27.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="936.9" y="1326.0">P..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (9 samples, 2.33%)</title><rect x="933.9" y="1299.0" width="27.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="936.9" y="1310.0">P..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (9 samples, 2.33%)</title><rect x="933.9" y="1283.0" width="27.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="936.9" y="1294.0">P..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.52%)</title><rect x="933.9" y="1267.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="936.9" y="1278.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (6 samples, 1.55%)</title><rect x="940.0" y="1267.0" width="18.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="943.0" y="1278.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.26%)</title><rect x="958.3" y="1267.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="961.3" y="1278.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.26%)</title><rect x="958.3" y="1251.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="961.3" y="1262.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.52%)</title><rect x="961.3" y="1315.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="964.3" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.26%)</title><rect x="964.4" y="1299.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="967.4" y="1310.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.26%)</title><rect x="967.4" y="1315.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="970.4" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.26%)</title><rect x="967.4" y="1299.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="970.4" y="1310.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.78%)</title><rect x="970.5" y="1315.0" width="9.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="973.5" y="1326.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.26%)</title><rect x="973.5" y="1299.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="976.5" y="1310.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.26%)</title><rect x="976.6" y="1299.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="979.6" y="1310.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.26%)</title><rect x="979.6" y="1315.0" width="3.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="982.6" y="1326.0"></text>
</g>
<g>
<title>Compile::Optimize() (57 samples, 14.73%)</title><rect x="982.7" y="1347.0" width="173.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="985.7" y="1358.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.26%)</title><rect x="982.7" y="1331.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="985.7" y="1342.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.26%)</title><rect x="982.7" y="1315.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="985.7" y="1326.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.26%)</title><rect x="982.7" y="1299.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="985.7" y="1310.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.26%)</title><rect x="985.7" y="1331.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="988.7" y="1342.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.26%)</title><rect x="985.7" y="1315.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="988.7" y="1326.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.26%)</title><rect x="985.7" y="1299.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="988.7" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.52%)</title><rect x="988.8" y="1331.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="991.8" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.52%)</title><rect x="988.8" y="1315.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="991.8" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.26%)</title><rect x="988.8" y="1299.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="991.8" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.26%)</title><rect x="991.8" y="1299.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="994.8" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (45 samples, 11.63%)</title><rect x="994.9" y="1331.0" width="137.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="997.9" y="1342.0">PhaseIdealLoop::b..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.52%)</title><rect x="994.9" y="1315.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="997.9" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.26%)</title><rect x="1001.0" y="1315.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1004.0" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (40 samples, 10.34%)</title><rect x="1004.0" y="1315.0" width="122.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1007.0" y="1326.0">PhaseIdealLoop:..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (36 samples, 9.30%)</title><rect x="1016.2" y="1299.0" width="109.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1019.2" y="1310.0">PhaseIdealLoo..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (35 samples, 9.04%)</title><rect x="1019.3" y="1283.0" width="106.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1022.3" y="1294.0">PhaseIdealLoo..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.26%)</title><rect x="1107.7" y="1267.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1110.7" y="1278.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.26%)</title><rect x="1107.7" y="1251.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1110.7" y="1262.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (5 samples, 1.29%)</title><rect x="1110.7" y="1267.0" width="15.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1113.7" y="1278.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.26%)</title><rect x="1126.0" y="1315.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1129.0" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.26%)</title><rect x="1126.0" y="1299.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.0" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.26%)</title><rect x="1126.0" y="1283.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1129.0" y="1294.0"></text>
</g>
<g>
<title>PhiNode::make_blank(Node*, Node*) (1 samples, 0.26%)</title><rect x="1126.0" y="1267.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1129.0" y="1278.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.26%)</title><rect x="1126.0" y="1251.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1129.0" y="1262.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.26%)</title><rect x="1129.0" y="1315.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1132.0" y="1326.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (7 samples, 1.81%)</title><rect x="1132.1" y="1331.0" width="21.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1135.1" y="1342.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 1.55%)</title><rect x="1132.1" y="1315.0" width="18.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.1" y="1326.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.26%)</title><rect x="1132.1" y="1299.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1135.1" y="1310.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.26%)</title><rect x="1132.1" y="1283.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1135.1" y="1294.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.26%)</title><rect x="1132.1" y="1267.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1135.1" y="1278.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.26%)</title><rect x="1132.1" y="1251.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1135.1" y="1262.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.52%)</title><rect x="1135.1" y="1299.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.1" y="1310.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.52%)</title><rect x="1141.2" y="1299.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1144.2" y="1310.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.52%)</title><rect x="1141.2" y="1283.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.2" y="1294.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.52%)</title><rect x="1141.2" y="1267.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1144.2" y="1278.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1141.2" y="1251.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.2" y="1262.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1141.2" y="1235.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1144.2" y="1246.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1141.2" y="1219.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.2" y="1230.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1141.2" y="1203.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.2" y="1214.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1141.2" y="1187.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.2" y="1198.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1141.2" y="1171.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1144.2" y="1182.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1141.2" y="1155.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.2" y="1166.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1141.2" y="1139.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.2" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1141.2" y="1123.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1144.2" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1141.2" y="1107.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1144.2" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1141.2" y="1091.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.2" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1141.2" y="1075.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.2" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.26%)</title><rect x="1141.2" y="1059.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.2" y="1070.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.26%)</title><rect x="1141.2" y="1043.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.2" y="1054.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.26%)</title><rect x="1141.2" y="1027.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.2" y="1038.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.26%)</title><rect x="1144.3" y="1251.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.3" y="1262.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.26%)</title><rect x="1144.3" y="1235.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.3" y="1246.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.26%)</title><rect x="1147.3" y="1299.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.3" y="1310.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.26%)</title><rect x="1150.4" y="1315.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.4" y="1326.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.26%)</title><rect x="1153.4" y="1331.0" width="3.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1156.4" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.29%)</title><rect x="1156.5" y="1347.0" width="15.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.5" y="1358.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.29%)</title><rect x="1156.5" y="1331.0" width="15.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.5" y="1342.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.29%)</title><rect x="1156.5" y="1315.0" width="15.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.5" y="1326.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.29%)</title><rect x="1156.5" y="1299.0" width="15.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.5" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.29%)</title><rect x="1156.5" y="1283.0" width="15.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.5" y="1294.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.29%)</title><rect x="1156.5" y="1267.0" width="15.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.5" y="1278.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.26%)</title><rect x="1156.5" y="1251.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.5" y="1262.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.26%)</title><rect x="1156.5" y="1235.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.5" y="1246.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.26%)</title><rect x="1156.5" y="1219.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.5" y="1230.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.26%)</title><rect x="1156.5" y="1203.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.5" y="1214.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.26%)</title><rect x="1156.5" y="1187.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.5" y="1198.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.26%)</title><rect x="1156.5" y="1171.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1159.5" y="1182.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.26%)</title><rect x="1156.5" y="1155.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.5" y="1166.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.26%)</title><rect x="1156.5" y="1139.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.5" y="1150.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.26%)</title><rect x="1156.5" y="1123.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.5" y="1134.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.26%)</title><rect x="1156.5" y="1107.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.5" y="1118.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.26%)</title><rect x="1156.5" y="1091.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.5" y="1102.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.26%)</title><rect x="1156.5" y="1075.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.5" y="1086.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.26%)</title><rect x="1156.5" y="1059.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.5" y="1070.0"></text>
</g>
<g>
<title>Reflection::verify_field_access(Klass*, Klass*, Klass*, AccessFlags, bool, bool) (1 samples, 0.26%)</title><rect x="1156.5" y="1043.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.5" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.78%)</title><rect x="1159.5" y="1251.0" width="9.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.5" y="1262.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.78%)</title><rect x="1159.5" y="1235.0" width="9.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.5" y="1246.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.78%)</title><rect x="1159.5" y="1219.0" width="9.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.5" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.78%)</title><rect x="1159.5" y="1203.0" width="9.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.5" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.78%)</title><rect x="1159.5" y="1187.0" width="9.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.5" y="1198.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.78%)</title><rect x="1159.5" y="1171.0" width="9.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.5" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1159.5" y="1155.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.5" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1159.5" y="1139.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.5" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1159.5" y="1123.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.5" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1159.5" y="1107.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.5" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1159.5" y="1091.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.5" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1159.5" y="1075.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.5" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1159.5" y="1059.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.5" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1159.5" y="1043.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.5" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1159.5" y="1027.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.5" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1159.5" y="1011.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1159.5" y="995.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.5" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1159.5" y="979.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.5" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1159.5" y="963.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.5" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1159.5" y="947.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1159.5" y="931.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.5" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1159.5" y="915.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.5" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1159.5" y="899.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.5" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1159.5" y="883.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.5" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1159.5" y="867.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.5" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1159.5" y="851.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1159.5" y="835.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1159.5" y="819.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1159.5" y="803.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1159.5" y="787.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.5" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1159.5" y="771.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.5" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1159.5" y="755.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1159.5" y="739.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1159.5" y="723.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1159.5" y="707.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1159.5" y="691.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.5" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1159.5" y="675.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.5" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1159.5" y="659.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1159.5" y="643.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1159.5" y="627.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1162.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1159.5" y="611.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1159.5" y="595.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1162.5" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1159.5" y="579.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.5" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1159.5" y="563.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1159.5" y="547.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1159.5" y="531.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1159.5" y="515.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1159.5" y="499.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.5" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1159.5" y="483.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.5" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1159.5" y="467.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1159.5" y="451.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1159.5" y="435.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1159.5" y="419.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.26%)</title><rect x="1159.5" y="403.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.26%)</title><rect x="1159.5" y="387.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.5" y="398.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.26%)</title><rect x="1159.5" y="371.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.5" y="382.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.26%)</title><rect x="1159.5" y="355.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.5" y="366.0"></text>
</g>
<g>
<title>IdealKit::store(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.26%)</title><rect x="1159.5" y="339.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.5" y="350.0"></text>
</g>
<g>
<title>StoreNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.26%)</title><rect x="1159.5" y="323.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.5" y="334.0"></text>
</g>
<g>
<title>TypeRawPtr::add_offset(long) const (1 samples, 0.26%)</title><rect x="1159.5" y="307.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.5" y="318.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.52%)</title><rect x="1162.6" y="1155.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.6" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.52%)</title><rect x="1162.6" y="1139.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.6" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.52%)</title><rect x="1162.6" y="1123.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.6" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.52%)</title><rect x="1162.6" y="1107.0" width="6.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1165.6" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.52%)</title><rect x="1162.6" y="1091.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.6" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.52%)</title><rect x="1162.6" y="1075.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.6" y="1086.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.52%)</title><rect x="1162.6" y="1059.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.6" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.52%)</title><rect x="1162.6" y="1043.0" width="6.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.6" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.52%)</title><rect x="1162.6" y="1027.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.6" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.52%)</title><rect x="1162.6" y="1011.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.6" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.52%)</title><rect x="1162.6" y="995.0" width="6.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.6" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.52%)</title><rect x="1162.6" y="979.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.6" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.52%)</title><rect x="1162.6" y="963.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.6" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.52%)</title><rect x="1162.6" y="947.0" width="6.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.6" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.52%)</title><rect x="1162.6" y="931.0" width="6.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.6" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.52%)</title><rect x="1162.6" y="915.0" width="6.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.6" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.52%)</title><rect x="1162.6" y="899.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.6" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.52%)</title><rect x="1162.6" y="883.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.6" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.52%)</title><rect x="1162.6" y="867.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.6" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.52%)</title><rect x="1162.6" y="851.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.6" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.52%)</title><rect x="1162.6" y="835.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.52%)</title><rect x="1162.6" y="819.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.52%)</title><rect x="1162.6" y="803.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.52%)</title><rect x="1162.6" y="787.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.52%)</title><rect x="1162.6" y="771.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.6" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.52%)</title><rect x="1162.6" y="755.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.6" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.52%)</title><rect x="1162.6" y="739.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.52%)</title><rect x="1162.6" y="723.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.52%)</title><rect x="1162.6" y="707.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.52%)</title><rect x="1162.6" y="691.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.52%)</title><rect x="1162.6" y="675.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.6" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1162.6" y="659.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.6" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1162.6" y="643.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1162.6" y="627.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1162.6" y="611.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1162.6" y="595.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1162.6" y="579.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.6" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1162.6" y="563.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.6" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1162.6" y="547.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1162.6" y="531.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1162.6" y="515.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1162.6" y="499.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1162.6" y="483.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.6" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1162.6" y="467.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.6" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1162.6" y="451.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1162.6" y="435.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1162.6" y="419.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1162.6" y="403.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1162.6" y="387.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.6" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1162.6" y="371.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.6" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1162.6" y="355.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.6" y="366.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.26%)</title><rect x="1162.6" y="339.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.6" y="350.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.26%)</title><rect x="1162.6" y="323.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.6" y="334.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.26%)</title><rect x="1162.6" y="307.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.6" y="318.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.26%)</title><rect x="1162.6" y="291.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.6" y="302.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.26%)</title><rect x="1162.6" y="275.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.6" y="286.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1165.6" y="659.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.6" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1165.6" y="643.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.6" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1165.6" y="627.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1165.6" y="611.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1165.6" y="595.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1165.6" y="579.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1165.6" y="563.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.6" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1165.6" y="547.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.6" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1165.6" y="531.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1165.6" y="515.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1165.6" y="499.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1165.6" y="483.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1165.6" y="467.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.6" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1165.6" y="451.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.6" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1165.6" y="435.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1165.6" y="419.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1165.6" y="403.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1165.6" y="387.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1165.6" y="371.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.6" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1165.6" y="355.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.6" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1165.6" y="339.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1165.6" y="323.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1165.6" y="307.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1165.6" y="291.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1165.6" y="275.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.6" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1165.6" y="259.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1168.6" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1165.6" y="243.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1165.6" y="227.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1165.6" y="211.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1165.6" y="195.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1165.6" y="179.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.6" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1165.6" y="163.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.6" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1165.6" y="147.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.6" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1165.6" y="131.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.6" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1165.6" y="115.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.6" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1165.6" y="99.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.6" y="110.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1165.6" y="83.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.6" y="94.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1165.6" y="67.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.6" y="78.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1165.6" y="51.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.6" y="62.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.26%)</title><rect x="1165.6" y="35.0" width="3.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1168.6" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1168.7" y="1251.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.7" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1168.7" y="1235.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.7" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1168.7" y="1219.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.7" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1168.7" y="1203.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.7" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1168.7" y="1187.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.7" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1168.7" y="1171.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.7" y="1182.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1168.7" y="1155.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.7" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1168.7" y="1139.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.7" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1168.7" y="1123.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.7" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1168.7" y="1107.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.7" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1168.7" y="1091.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.7" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1168.7" y="1075.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.7" y="1086.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1168.7" y="1059.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.7" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.26%)</title><rect x="1168.7" y="1043.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.7" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.26%)</title><rect x="1168.7" y="1027.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.7" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.26%)</title><rect x="1168.7" y="1011.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.7" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.26%)</title><rect x="1168.7" y="995.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.7" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.26%)</title><rect x="1168.7" y="979.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.7" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.26%)</title><rect x="1168.7" y="963.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.7" y="974.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.26%)</title><rect x="1168.7" y="947.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.7" y="958.0"></text>
</g>
<g>
<title>InlineTree::find_subtree_from_root(InlineTree*, JVMState*, ciMethod*) (1 samples, 0.26%)</title><rect x="1168.7" y="931.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.7" y="942.0"></text>
</g>
<g>
<title>JVMState::of_depth(int) const (1 samples, 0.26%)</title><rect x="1168.7" y="915.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.7" y="926.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.26%)</title><rect x="1171.7" y="1347.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.7" y="1358.0"></text>
</g>
<g>
<title>Compile::update_dead_node_list(Unique_Node_List&amp;) (1 samples, 0.26%)</title><rect x="1171.7" y="1331.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.7" y="1342.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 0.78%)</title><rect x="1174.8" y="1379.0" width="9.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.8" y="1390.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 0.78%)</title><rect x="1174.8" y="1363.0" width="9.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.8" y="1374.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.78%)</title><rect x="1174.8" y="1347.0" width="9.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.8" y="1358.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.78%)</title><rect x="1174.8" y="1331.0" width="9.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.8" y="1342.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.26%)</title><rect x="1174.8" y="1315.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.8" y="1326.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.26%)</title><rect x="1174.8" y="1299.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.8" y="1310.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.26%)</title><rect x="1174.8" y="1283.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.8" y="1294.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.26%)</title><rect x="1174.8" y="1267.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.8" y="1278.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.26%)</title><rect x="1174.8" y="1251.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.8" y="1262.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.26%)</title><rect x="1174.8" y="1235.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.8" y="1246.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.26%)</title><rect x="1174.8" y="1219.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.8" y="1230.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.26%)</title><rect x="1174.8" y="1203.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.8" y="1214.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.26%)</title><rect x="1174.8" y="1187.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.8" y="1198.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.26%)</title><rect x="1174.8" y="1171.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.8" y="1182.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.26%)</title><rect x="1174.8" y="1155.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.8" y="1166.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.52%)</title><rect x="1177.8" y="1315.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.8" y="1326.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (2 samples, 0.52%)</title><rect x="1177.8" y="1299.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.8" y="1310.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.26%)</title><rect x="1177.8" y="1283.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.8" y="1294.0"></text>
</g>
<g>
<title>LIRGenerator::do_ProfileInvoke(ProfileInvoke*) (1 samples, 0.26%)</title><rect x="1177.8" y="1267.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.8" y="1278.0"></text>
</g>
<g>
<title>LIRGenerator::increment_event_counter_impl(CodeEmitInfo*, ciMethod*, int, int, bool, bool) (1 samples, 0.26%)</title><rect x="1177.8" y="1251.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.8" y="1262.0"></text>
</g>
<g>
<title>LIRGenerator::new_register(BasicType) (1 samples, 0.26%)</title><rect x="1177.8" y="1235.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.8" y="1246.0"></text>
</g>
<g>
<title>LIRGenerator::do_StoreField(StoreField*) (1 samples, 0.26%)</title><rect x="1180.9" y="1283.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.9" y="1294.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (1 samples, 0.26%)</title><rect x="1183.9" y="1379.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.9" y="1390.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.26%)</title><rect x="1183.9" y="1363.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.9" y="1374.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.26%)</title><rect x="1183.9" y="1347.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.9" y="1358.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.26%)</title><rect x="1183.9" y="1331.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.9" y="1342.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.26%)</title><rect x="1183.9" y="1315.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.9" y="1326.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.26%)</title><rect x="1183.9" y="1299.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.9" y="1310.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.26%)</title><rect x="1187.0" y="1443.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.0" y="1454.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.26%)</title><rect x="1187.0" y="1427.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.0" y="1438.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.26%)</title><rect x="1187.0" y="1411.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.0" y="1422.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.26%)</title><rect x="1187.0" y="1395.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.0" y="1406.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.26%)</title><rect x="1187.0" y="1379.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.0" y="1390.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.26%)</title><rect x="1187.0" y="1363.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.0" y="1374.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.26%)</title><rect x="1187.0" y="1347.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.0" y="1358.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.26%)</title><rect x="1187.0" y="1331.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.0" y="1342.0"></text>
</g>
</g>
</svg>
