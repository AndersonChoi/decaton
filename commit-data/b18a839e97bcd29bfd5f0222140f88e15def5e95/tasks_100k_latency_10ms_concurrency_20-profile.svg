<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1094" onload="init(evt)" viewBox="0 0 1200 1094" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1077"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1077"> </text>
<g id="frames">
<g>
<title>all (401 samples, 100.00%)</title><rect x="10.0" y="1043.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1054.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (29 samples, 7.23%)</title><rect x="10.0" y="1027.0" width="85.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1038.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (3 samples, 0.75%)</title><rect x="10.0" y="1011.0" width="8.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (3 samples, 0.75%)</title><rect x="10.0" y="995.0" width="8.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (3 samples, 0.75%)</title><rect x="10.0" y="979.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.&lt;init&gt; (1 samples, 0.25%)</title><rect x="10.0" y="963.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (2 samples, 0.50%)</title><rect x="12.9" y="963.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.doCommitOffsetsAsync (1 samples, 0.25%)</title><rect x="12.9" y="947.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.sendOffsetCommitRequest (1 samples, 0.25%)</title><rect x="12.9" y="931.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.9" y="942.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.25%)</title><rect x="12.9" y="915.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.25%)</title><rect x="15.9" y="947.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="18.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.25%)</title><rect x="15.9" y="931.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.9" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.25%)</title><rect x="15.9" y="915.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.25%)</title><rect x="15.9" y="899.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.25%)</title><rect x="15.9" y="883.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.9" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.25%)</title><rect x="15.9" y="867.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.9" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.25%)</title><rect x="15.9" y="851.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.9" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.25%)</title><rect x="15.9" y="835.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.9" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.drain (1 samples, 0.25%)</title><rect x="15.9" y="819.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.9" y="830.0"></text>
</g>
<g>
<title>__read (1 samples, 0.25%)</title><rect x="15.9" y="803.0" width="2.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="18.9" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (26 samples, 6.48%)</title><rect x="18.8" y="1011.0" width="76.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="21.8" y="1022.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.25%)</title><rect x="18.8" y="995.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.8" y="1006.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (1 samples, 0.25%)</title><rect x="18.8" y="979.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.8" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$297/631889619.accept (1 samples, 0.25%)</title><rect x="18.8" y="963.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.8" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pausePartitions$72 (1 samples, 0.25%)</title><rect x="18.8" y="947.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.8" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.25%)</title><rect x="21.8" y="995.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="24.8" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.25%)</title><rect x="21.8" y="979.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="24.8" y="990.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (11 samples, 2.74%)</title><rect x="24.7" y="995.0" width="32.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="27.7" y="1006.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1855219380.accept (11 samples, 2.74%)</title><rect x="24.7" y="979.0" width="32.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.7" y="990.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$71 (11 samples, 2.74%)</title><rect x="24.7" y="963.0" width="32.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="27.7" y="974.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (1 samples, 0.25%)</title><rect x="24.7" y="947.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.7" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (1 samples, 0.25%)</title><rect x="24.7" y="931.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="27.7" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (1 samples, 0.25%)</title><rect x="24.7" y="915.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.7" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.25%)</title><rect x="24.7" y="899.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.7" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.25%)</title><rect x="24.7" y="883.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="27.7" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.25%)</title><rect x="24.7" y="867.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.7" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.25%)</title><rect x="24.7" y="851.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="27.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.25%)</title><rect x="24.7" y="835.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.25%)</title><rect x="24.7" y="819.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.7" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (10 samples, 2.49%)</title><rect x="27.7" y="947.0" width="29.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="30.7" y="958.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (10 samples, 2.49%)</title><rect x="27.7" y="931.0" width="29.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.7" y="942.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 1.25%)</title><rect x="42.4" y="915.0" width="14.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="45.4" y="926.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 1.00%)</title><rect x="42.4" y="899.0" width="11.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="45.4" y="910.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (4 samples, 1.00%)</title><rect x="42.4" y="883.0" width="11.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="45.4" y="894.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 1.00%)</title><rect x="42.4" y="867.0" width="11.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.4" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.25%)</title><rect x="48.3" y="851.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="51.3" y="862.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.25%)</title><rect x="51.2" y="851.0" width="2.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="54.2" y="862.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.25%)</title><rect x="54.1" y="899.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="57.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 3.24%)</title><rect x="57.1" y="995.0" width="38.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="60.1" y="1006.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 3.24%)</title><rect x="57.1" y="979.0" width="38.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="60.1" y="990.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 1.75%)</title><rect x="57.1" y="963.0" width="20.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="60.1" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 0.75%)</title><rect x="57.1" y="947.0" width="8.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="60.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 0.75%)</title><rect x="57.1" y="931.0" width="8.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="60.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.50%)</title><rect x="57.1" y="915.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="60.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.25%)</title><rect x="57.1" y="899.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="60.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.25%)</title><rect x="57.1" y="883.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="60.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.hasField (1 samples, 0.25%)</title><rect x="57.1" y="867.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="60.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.25%)</title><rect x="57.1" y="851.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="60.1" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.25%)</title><rect x="57.1" y="835.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="60.1" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.25%)</title><rect x="57.1" y="819.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="60.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.25%)</title><rect x="60.0" y="899.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="63.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.25%)</title><rect x="60.0" y="883.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="63.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.25%)</title><rect x="63.0" y="915.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="66.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.25%)</title><rect x="63.0" y="899.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="66.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.25%)</title><rect x="63.0" y="883.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="66.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.25%)</title><rect x="63.0" y="867.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="66.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.25%)</title><rect x="63.0" y="851.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="66.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.25%)</title><rect x="63.0" y="835.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="66.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.25%)</title><rect x="63.0" y="819.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="66.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/LogContext$LocationAwareKafkaLogger.isDebugEnabled (1 samples, 0.25%)</title><rect x="63.0" y="803.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="66.0" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.25%)</title><rect x="63.0" y="787.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="66.0" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.25%)</title><rect x="63.0" y="771.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="66.0" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.25%)</title><rect x="63.0" y="755.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="66.0" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.25%)</title><rect x="63.0" y="739.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="66.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 0.75%)</title><rect x="65.9" y="947.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="68.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 0.75%)</title><rect x="65.9" y="931.0" width="8.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="68.9" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 0.75%)</title><rect x="65.9" y="915.0" width="8.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="68.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 0.75%)</title><rect x="65.9" y="899.0" width="8.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="68.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.50%)</title><rect x="65.9" y="883.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="68.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.25%)</title><rect x="71.8" y="883.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="74.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.25%)</title><rect x="71.8" y="867.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="74.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.25%)</title><rect x="71.8" y="851.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="74.8" y="862.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.25%)</title><rect x="71.8" y="835.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="74.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.25%)</title><rect x="74.7" y="947.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="77.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.25%)</title><rect x="74.7" y="931.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="77.7" y="942.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.25%)</title><rect x="74.7" y="915.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="77.7" y="926.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.25%)</title><rect x="74.7" y="899.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="77.7" y="910.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.25%)</title><rect x="74.7" y="883.0" width="3.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="77.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.50%)</title><rect x="77.7" y="963.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="80.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.50%)</title><rect x="77.7" y="947.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="80.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.50%)</title><rect x="77.7" y="931.0" width="5.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="80.7" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.50%)</title><rect x="77.7" y="915.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="80.7" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.50%)</title><rect x="77.7" y="899.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="80.7" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.50%)</title><rect x="77.7" y="883.0" width="5.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="80.7" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.50%)</title><rect x="77.7" y="867.0" width="5.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="80.7" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.50%)</title><rect x="77.7" y="851.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="80.7" y="862.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.25%)</title><rect x="77.7" y="835.0" width="2.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="80.7" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.forEachRemaining (1 samples, 0.25%)</title><rect x="80.6" y="835.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="83.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.50%)</title><rect x="83.6" y="963.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="86.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.25%)</title><rect x="83.6" y="947.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="86.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.25%)</title><rect x="83.6" y="931.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="86.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.25%)</title><rect x="86.5" y="947.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="89.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.25%)</title><rect x="86.5" y="931.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="89.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.25%)</title><rect x="86.5" y="915.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="89.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.25%)</title><rect x="86.5" y="899.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="89.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.25%)</title><rect x="86.5" y="883.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="89.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.25%)</title><rect x="86.5" y="867.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="89.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.25%)</title><rect x="86.5" y="851.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="89.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.25%)</title><rect x="89.5" y="963.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="92.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.25%)</title><rect x="89.5" y="947.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="92.5" y="958.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.25%)</title><rect x="89.5" y="931.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="92.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$256/206250501.accept (1 samples, 0.25%)</title><rect x="89.5" y="915.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="92.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.25%)</title><rect x="89.5" y="899.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="92.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.25%)</title><rect x="89.5" y="883.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="92.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.25%)</title><rect x="89.5" y="867.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="92.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.25%)</title><rect x="89.5" y="851.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="92.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.25%)</title><rect x="92.4" y="963.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="95.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.25%)</title><rect x="92.4" y="947.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="95.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.25%)</title><rect x="92.4" y="931.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="95.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.25%)</title><rect x="92.4" y="915.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="95.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.25%)</title><rect x="92.4" y="899.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="95.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.25%)</title><rect x="92.4" y="883.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="95.4" y="894.0"></text>
</g>
<g>
<title>java/lang/Thread.run (229 samples, 57.11%)</title><rect x="95.3" y="1027.0" width="673.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="98.3" y="1038.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (229 samples, 57.11%)</title><rect x="95.3" y="1011.0" width="673.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="98.3" y="1022.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (229 samples, 57.11%)</title><rect x="95.3" y="995.0" width="673.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="98.3" y="1006.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/1485094654.run (218 samples, 54.36%)</title><rect x="95.3" y="979.0" width="641.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="98.3" y="990.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/1485094654.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (218 samples, 54.36%)</title><rect x="95.3" y="963.0" width="641.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="98.3" y="974.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (218 samples, 54.36%)</title><rect x="95.3" y="947.0" width="641.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="98.3" y="958.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (215 samples, 53.62%)</title><rect x="98.3" y="931.0" width="632.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="101.3" y="942.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (1 samples, 0.25%)</title><rect x="110.0" y="915.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="113.0" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.25%)</title><rect x="110.0" y="899.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="113.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$197/145383420.get (1 samples, 0.25%)</title><rect x="110.0" y="883.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="113.0" y="894.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.25%)</title><rect x="110.0" y="867.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="113.0" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.25%)</title><rect x="110.0" y="851.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="113.0" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.25%)</title><rect x="110.0" y="835.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="113.0" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.25%)</title><rect x="110.0" y="819.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="113.0" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.25%)</title><rect x="110.0" y="803.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="113.0" y="814.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.25%)</title><rect x="110.0" y="787.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="113.0" y="798.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.25%)</title><rect x="110.0" y="771.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="113.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (43 samples, 10.72%)</title><rect x="113.0" y="915.0" width="126.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="116.0" y="926.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (43 samples, 10.72%)</title><rect x="113.0" y="899.0" width="126.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="116.0" y="910.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (43 samples, 10.72%)</title><rect x="113.0" y="883.0" width="126.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="116.0" y="894.0">com/linecorp/dec..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.25%)</title><rect x="113.0" y="867.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="116.0" y="878.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.25%)</title><rect x="113.0" y="851.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="116.0" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.25%)</title><rect x="113.0" y="835.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="116.0" y="846.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.25%)</title><rect x="113.0" y="819.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="116.0" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (42 samples, 10.47%)</title><rect x="115.9" y="867.0" width="123.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="118.9" y="878.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (42 samples, 10.47%)</title><rect x="115.9" y="851.0" width="123.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="118.9" y="862.0">com/linecorp/de..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (42 samples, 10.47%)</title><rect x="115.9" y="835.0" width="123.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="118.9" y="846.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (15 samples, 3.74%)</title><rect x="115.9" y="819.0" width="44.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="118.9" y="830.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 1.00%)</title><rect x="115.9" y="803.0" width="11.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="118.9" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 1.00%)</title><rect x="115.9" y="787.0" width="11.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="118.9" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 1.00%)</title><rect x="115.9" y="771.0" width="11.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="118.9" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 1.00%)</title><rect x="115.9" y="755.0" width="11.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="118.9" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (11 samples, 2.74%)</title><rect x="127.7" y="803.0" width="32.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="130.7" y="814.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (11 samples, 2.74%)</title><rect x="127.7" y="787.0" width="32.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="130.7" y="798.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.25%)</title><rect x="127.7" y="771.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="130.7" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.25%)</title><rect x="127.7" y="755.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="130.7" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.25%)</title><rect x="127.7" y="739.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="130.7" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.25%)</title><rect x="127.7" y="723.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="130.7" y="734.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.25%)</title><rect x="127.7" y="707.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="130.7" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.25%)</title><rect x="127.7" y="691.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="130.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.50%)</title><rect x="130.6" y="771.0" width="5.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="133.6" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.50%)</title><rect x="130.6" y="755.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="133.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (1 samples, 0.25%)</title><rect x="133.6" y="739.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="136.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (6 samples, 1.50%)</title><rect x="136.5" y="771.0" width="17.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="139.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (6 samples, 1.50%)</title><rect x="136.5" y="755.0" width="17.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="139.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.25%)</title><rect x="142.4" y="739.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="145.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.25%)</title><rect x="145.4" y="739.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="148.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (2 samples, 0.50%)</title><rect x="148.3" y="739.0" width="5.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="151.3" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (2 samples, 0.50%)</title><rect x="154.2" y="771.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="157.2" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (2 samples, 0.50%)</title><rect x="154.2" y="755.0" width="5.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="157.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (1 samples, 0.25%)</title><rect x="157.1" y="739.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="160.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (24 samples, 5.99%)</title><rect x="160.1" y="819.0" width="70.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="163.1" y="830.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.50%)</title><rect x="160.1" y="803.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="163.1" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.50%)</title><rect x="160.1" y="787.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="163.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.50%)</title><rect x="160.1" y="771.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="163.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.50%)</title><rect x="160.1" y="755.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="163.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (3 samples, 0.75%)</title><rect x="166.0" y="803.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="169.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.25%)</title><rect x="166.0" y="787.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="169.0" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.50%)</title><rect x="168.9" y="787.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="171.9" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.25%)</title><rect x="171.8" y="771.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="174.8" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.25%)</title><rect x="171.8" y="755.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="174.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.25%)</title><rect x="171.8" y="739.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="174.8" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.25%)</title><rect x="171.8" y="723.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="174.8" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.25%)</title><rect x="171.8" y="707.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="174.8" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.25%)</title><rect x="171.8" y="691.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="174.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (19 samples, 4.74%)</title><rect x="174.8" y="803.0" width="55.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="177.8" y="814.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 1.25%)</title><rect x="177.7" y="787.0" width="14.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="180.7" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (5 samples, 1.25%)</title><rect x="177.7" y="771.0" width="14.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="180.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (13 samples, 3.24%)</title><rect x="192.4" y="787.0" width="38.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="195.4" y="798.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (13 samples, 3.24%)</title><rect x="192.4" y="771.0" width="38.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="195.4" y="782.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (13 samples, 3.24%)</title><rect x="192.4" y="755.0" width="38.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="195.4" y="766.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.75%)</title><rect x="192.4" y="739.0" width="8.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="195.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.75%)</title><rect x="192.4" y="723.0" width="8.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="195.4" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 0.75%)</title><rect x="201.3" y="739.0" width="8.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="204.3" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.75%)</title><rect x="201.3" y="723.0" width="8.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="204.3" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (1 samples, 0.25%)</title><rect x="201.3" y="707.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="204.3" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (1 samples, 0.25%)</title><rect x="201.3" y="691.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="204.3" y="702.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.25%)</title><rect x="201.3" y="675.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="204.3" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.25%)</title><rect x="201.3" y="659.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="204.3" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.25%)</title><rect x="201.3" y="643.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="204.3" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.25%)</title><rect x="201.3" y="627.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="204.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.50%)</title><rect x="204.2" y="707.0" width="5.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="207.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.50%)</title><rect x="204.2" y="691.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="207.2" y="702.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.50%)</title><rect x="204.2" y="675.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="207.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.25%)</title><rect x="210.1" y="739.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="213.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.25%)</title><rect x="210.1" y="723.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="213.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.25%)</title><rect x="210.1" y="707.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="213.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.25%)</title><rect x="210.1" y="691.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="213.1" y="702.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.25%)</title><rect x="210.1" y="675.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="213.1" y="686.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.25%)</title><rect x="210.1" y="659.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="213.1" y="670.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (1 samples, 0.25%)</title><rect x="210.1" y="643.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="213.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (5 samples, 1.25%)</title><rect x="213.0" y="739.0" width="14.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="216.0" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 1.25%)</title><rect x="213.0" y="723.0" width="14.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="216.0" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 1.25%)</title><rect x="213.0" y="707.0" width="14.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="216.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.25%)</title><rect x="227.8" y="739.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="230.8" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (3 samples, 0.75%)</title><rect x="230.7" y="819.0" width="8.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="233.7" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 0.75%)</title><rect x="230.7" y="803.0" width="8.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="233.7" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (3 samples, 0.75%)</title><rect x="230.7" y="787.0" width="8.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="233.7" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (3 samples, 0.75%)</title><rect x="230.7" y="771.0" width="8.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="233.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.75%)</title><rect x="230.7" y="755.0" width="8.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="233.7" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (148 samples, 36.91%)</title><rect x="239.5" y="915.0" width="435.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="242.5" y="926.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (21 samples, 5.24%)</title><rect x="239.5" y="899.0" width="61.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="242.5" y="910.0">com/li..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (20 samples, 4.99%)</title><rect x="242.5" y="883.0" width="58.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="245.5" y="894.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (11 samples, 2.74%)</title><rect x="269.0" y="867.0" width="32.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="272.0" y="878.0">ch..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (9 samples, 2.24%)</title><rect x="274.8" y="851.0" width="26.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="277.8" y="862.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (7 samples, 1.75%)</title><rect x="280.7" y="835.0" width="20.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="283.7" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 1.75%)</title><rect x="280.7" y="819.0" width="20.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="283.7" y="830.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.50%)</title><rect x="292.5" y="803.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="295.5" y="814.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.25%)</title><rect x="298.4" y="803.0" width="2.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="301.4" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.50%)</title><rect x="301.3" y="899.0" width="5.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="304.3" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.50%)</title><rect x="301.3" y="883.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="304.3" y="894.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.50%)</title><rect x="301.3" y="867.0" width="5.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="304.3" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (29 samples, 7.23%)</title><rect x="307.2" y="899.0" width="85.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="310.2" y="910.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (27 samples, 6.73%)</title><rect x="310.1" y="883.0" width="79.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="313.1" y="894.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (13 samples, 3.24%)</title><rect x="313.1" y="867.0" width="38.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="316.1" y="878.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (13 samples, 3.24%)</title><rect x="313.1" y="851.0" width="38.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="316.1" y="862.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (10 samples, 2.49%)</title><rect x="316.0" y="835.0" width="29.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="319.0" y="846.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (6 samples, 1.50%)</title><rect x="316.0" y="819.0" width="17.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="319.0" y="830.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (6 samples, 1.50%)</title><rect x="316.0" y="803.0" width="17.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="319.0" y="814.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 1.50%)</title><rect x="316.0" y="787.0" width="17.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="319.0" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.25%)</title><rect x="319.0" y="771.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="322.0" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 1.00%)</title><rect x="321.9" y="771.0" width="11.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="324.9" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.25%)</title><rect x="321.9" y="755.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="324.9" y="766.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.25%)</title><rect x="321.9" y="739.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="324.9" y="750.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.75%)</title><rect x="324.9" y="755.0" width="8.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="327.9" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.50%)</title><rect x="324.9" y="739.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="327.9" y="750.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.25%)</title><rect x="324.9" y="723.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="327.9" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.25%)</title><rect x="324.9" y="707.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="327.9" y="718.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.25%)</title><rect x="327.8" y="723.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="330.8" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.25%)</title><rect x="330.7" y="739.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="333.7" y="750.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.25%)</title><rect x="333.7" y="819.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="336.7" y="830.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.50%)</title><rect x="336.6" y="819.0" width="5.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="339.6" y="830.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.25%)</title><rect x="342.5" y="819.0" width="3.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="345.5" y="830.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.50%)</title><rect x="345.5" y="835.0" width="5.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="348.5" y="846.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.25%)</title><rect x="351.3" y="867.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="354.3" y="878.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.25%)</title><rect x="351.3" y="851.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="354.3" y="862.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.25%)</title><rect x="351.3" y="835.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="354.3" y="846.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (12 samples, 2.99%)</title><rect x="354.3" y="867.0" width="35.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="357.3" y="878.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (12 samples, 2.99%)</title><rect x="354.3" y="851.0" width="35.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="357.3" y="862.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.25%)</title><rect x="354.3" y="835.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="357.3" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.25%)</title><rect x="354.3" y="819.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="357.3" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.25%)</title><rect x="354.3" y="803.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="357.3" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.25%)</title><rect x="354.3" y="787.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="357.3" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (11 samples, 2.74%)</title><rect x="357.2" y="835.0" width="32.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="360.2" y="846.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (10 samples, 2.49%)</title><rect x="360.2" y="819.0" width="29.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="363.2" y="830.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 1.50%)</title><rect x="371.9" y="803.0" width="17.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="374.9" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.50%)</title><rect x="377.8" y="787.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="380.8" y="798.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.50%)</title><rect x="383.7" y="787.0" width="5.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="386.7" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.25%)</title><rect x="389.6" y="883.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="392.6" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (85 samples, 21.20%)</title><rect x="392.5" y="899.0" width="250.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="395.5" y="910.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (85 samples, 21.20%)</title><rect x="392.5" y="883.0" width="250.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="395.5" y="894.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1516607785.process (68 samples, 16.96%)</title><rect x="416.1" y="867.0" width="200.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="419.1" y="878.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (68 samples, 16.96%)</title><rect x="416.1" y="851.0" width="200.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="419.1" y="862.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (68 samples, 16.96%)</title><rect x="416.1" y="835.0" width="200.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="419.1" y="846.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.25%)</title><rect x="419.0" y="819.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="422.0" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.25%)</title><rect x="419.0" y="803.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="422.0" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.25%)</title><rect x="419.0" y="787.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="422.0" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.25%)</title><rect x="419.0" y="771.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="422.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.25%)</title><rect x="419.0" y="755.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="422.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (66 samples, 16.46%)</title><rect x="422.0" y="819.0" width="194.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="425.0" y="830.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>java/lang/Thread.sleep (66 samples, 16.46%)</title><rect x="422.0" y="803.0" width="194.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="425.0" y="814.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (58 samples, 14.46%)</title><rect x="439.6" y="787.0" width="170.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="442.6" y="798.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (5 samples, 1.25%)</title><rect x="451.4" y="771.0" width="14.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="454.4" y="782.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.75%)</title><rect x="466.1" y="771.0" width="8.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="469.1" y="782.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 1.25%)</title><rect x="474.9" y="771.0" width="14.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="477.9" y="782.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.75%)</title><rect x="480.8" y="755.0" width="8.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="483.8" y="766.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.25%)</title><rect x="489.7" y="771.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="492.7" y="782.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (40 samples, 9.98%)</title><rect x="492.6" y="771.0" width="117.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="495.6" y="782.0">os::sleep(Thre..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.50%)</title><rect x="513.2" y="755.0" width="5.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="516.2" y="766.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.50%)</title><rect x="513.2" y="739.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="516.2" y="750.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.50%)</title><rect x="519.1" y="755.0" width="5.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="522.1" y="766.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.25%)</title><rect x="525.0" y="755.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="528.0" y="766.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.25%)</title><rect x="525.0" y="739.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="528.0" y="750.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.25%)</title><rect x="525.0" y="723.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="528.0" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.25%)</title><rect x="525.0" y="707.0" width="2.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="528.0" y="718.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.75%)</title><rect x="527.9" y="755.0" width="8.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="530.9" y="766.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.75%)</title><rect x="527.9" y="739.0" width="8.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="530.9" y="750.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 1.00%)</title><rect x="536.7" y="755.0" width="11.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="539.7" y="766.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.25%)</title><rect x="548.5" y="755.0" width="2.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="551.5" y="766.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (13 samples, 3.24%)</title><rect x="551.4" y="755.0" width="38.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="554.4" y="766.0">__p..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 1.00%)</title><rect x="589.7" y="755.0" width="11.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="592.7" y="766.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.50%)</title><rect x="601.5" y="755.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="604.5" y="766.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (1 samples, 0.25%)</title><rect x="607.4" y="755.0" width="2.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="610.4" y="766.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.25%)</title><rect x="610.3" y="787.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="613.3" y="798.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.25%)</title><rect x="613.2" y="787.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="616.2" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (3 samples, 0.75%)</title><rect x="616.2" y="867.0" width="8.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="619.2" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.25%)</title><rect x="625.0" y="867.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="628.0" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.25%)</title><rect x="625.0" y="851.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="628.0" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.25%)</title><rect x="628.0" y="867.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="631.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (4 samples, 1.00%)</title><rect x="630.9" y="867.0" width="11.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="633.9" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 2.74%)</title><rect x="642.7" y="899.0" width="32.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="645.7" y="910.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.75%)</title><rect x="666.2" y="883.0" width="8.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="669.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.75%)</title><rect x="666.2" y="867.0" width="8.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="669.2" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$285/1646867854.accept (3 samples, 0.75%)</title><rect x="666.2" y="851.0" width="8.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="669.2" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$45 (3 samples, 0.75%)</title><rect x="666.2" y="835.0" width="8.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="669.2" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/1901196877.complete (3 samples, 0.75%)</title><rect x="666.2" y="819.0" width="8.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="669.2" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$5 (3 samples, 0.75%)</title><rect x="666.2" y="803.0" width="8.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="669.2" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1663282462.complete (3 samples, 0.75%)</title><rect x="666.2" y="787.0" width="8.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="669.2" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (3 samples, 0.75%)</title><rect x="666.2" y="771.0" width="8.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="669.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (3 samples, 0.75%)</title><rect x="666.2" y="755.0" width="8.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="669.2" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (3 samples, 0.75%)</title><rect x="666.2" y="739.0" width="8.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="669.2" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (3 samples, 0.75%)</title><rect x="666.2" y="723.0" width="8.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="669.2" y="734.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.25%)</title><rect x="672.1" y="707.0" width="2.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="675.1" y="718.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.25%)</title><rect x="672.1" y="691.0" width="2.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="675.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (18 samples, 4.49%)</title><rect x="675.0" y="915.0" width="53.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="678.0" y="926.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (18 samples, 4.49%)</title><rect x="675.0" y="899.0" width="53.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="678.0" y="910.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (18 samples, 4.49%)</title><rect x="675.0" y="883.0" width="53.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="678.0" y="894.0">java/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$285/1646867854.accept (18 samples, 4.49%)</title><rect x="675.0" y="867.0" width="53.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="678.0" y="878.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$45 (18 samples, 4.49%)</title><rect x="675.0" y="851.0" width="53.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="678.0" y="862.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/1901196877.complete (18 samples, 4.49%)</title><rect x="675.0" y="835.0" width="53.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="678.0" y="846.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$5 (18 samples, 4.49%)</title><rect x="675.0" y="819.0" width="53.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="678.0" y="830.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1663282462.complete (15 samples, 3.74%)</title><rect x="675.0" y="803.0" width="44.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="678.0" y="814.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (15 samples, 3.74%)</title><rect x="675.0" y="787.0" width="44.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="678.0" y="798.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (15 samples, 3.74%)</title><rect x="675.0" y="771.0" width="44.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="678.0" y="782.0">com/..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (15 samples, 3.74%)</title><rect x="675.0" y="755.0" width="44.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="678.0" y="766.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (15 samples, 3.74%)</title><rect x="675.0" y="739.0" width="44.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="678.0" y="750.0">ch/q..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$276/669202969.complete (3 samples, 0.75%)</title><rect x="719.2" y="803.0" width="8.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="722.2" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$null$70 (3 samples, 0.75%)</title><rect x="719.2" y="787.0" width="8.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="722.2" y="798.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.25%)</title><rect x="728.0" y="915.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="731.0" y="926.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.25%)</title><rect x="728.0" y="899.0" width="2.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="731.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (2 samples, 0.50%)</title><rect x="730.9" y="931.0" width="5.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="733.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (6 samples, 1.50%)</title><rect x="736.8" y="979.0" width="17.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="739.8" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 1.50%)</title><rect x="736.8" y="963.0" width="17.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="739.8" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 1.50%)</title><rect x="736.8" y="947.0" width="17.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="739.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 1.50%)</title><rect x="736.8" y="931.0" width="17.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="739.8" y="942.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.25%)</title><rect x="751.5" y="915.0" width="3.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="754.5" y="926.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.25%)</title><rect x="751.5" y="899.0" width="3.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="754.5" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (5 samples, 1.25%)</title><rect x="754.5" y="979.0" width="14.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="757.5" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (5 samples, 1.25%)</title><rect x="754.5" y="963.0" width="14.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="757.5" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.25%)</title><rect x="760.4" y="947.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="763.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.25%)</title><rect x="760.4" y="931.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="763.4" y="942.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.25%)</title><rect x="760.4" y="915.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="763.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.50%)</title><rect x="763.3" y="947.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="766.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.50%)</title><rect x="763.3" y="931.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="766.3" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.50%)</title><rect x="763.3" y="915.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="766.3" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.50%)</title><rect x="763.3" y="899.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="766.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.50%)</title><rect x="769.2" y="1027.0" width="5.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="772.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 0.50%)</title><rect x="769.2" y="1011.0" width="5.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="772.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.25%)</title><rect x="769.2" y="995.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="772.2" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.25%)</title><rect x="769.2" y="979.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="772.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.25%)</title><rect x="769.2" y="963.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="772.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.25%)</title><rect x="769.2" y="947.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="772.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.25%)</title><rect x="769.2" y="931.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="772.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.25%)</title><rect x="769.2" y="915.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="772.2" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.25%)</title><rect x="769.2" y="899.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="772.2" y="910.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.25%)</title><rect x="769.2" y="883.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="772.2" y="894.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.25%)</title><rect x="769.2" y="867.0" width="2.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="772.2" y="878.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.25%)</title><rect x="769.2" y="851.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="772.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.25%)</title><rect x="772.1" y="995.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="775.1" y="1006.0"></text>
</g>
<g>
<title>start_thread (141 samples, 35.16%)</title><rect x="775.1" y="1027.0" width="414.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="778.1" y="1038.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (141 samples, 35.16%)</title><rect x="775.1" y="1011.0" width="414.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="778.1" y="1022.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (21 samples, 5.24%)</title><rect x="775.1" y="995.0" width="61.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="778.1" y="1006.0">GangWo..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (21 samples, 5.24%)</title><rect x="775.1" y="979.0" width="61.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="778.1" y="990.0">G1ParT..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (16 samples, 3.99%)</title><rect x="775.1" y="963.0" width="47.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="778.1" y="974.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (15 samples, 3.74%)</title><rect x="775.1" y="947.0" width="44.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="778.1" y="958.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (10 samples, 2.49%)</title><rect x="781.0" y="931.0" width="29.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="784.0" y="942.0">G1..</text>
</g>
<g>
<title>G1ParGCAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, unsigned char) (1 samples, 0.25%)</title><rect x="786.9" y="915.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="789.9" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::par_allocate_during_gc(InCSetState, unsigned long, unsigned char) (1 samples, 0.25%)</title><rect x="786.9" y="899.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="789.9" y="910.0"></text>
</g>
<g>
<title>G1AllocRegion::attempt_allocation_locked(unsigned long, bool) (1 samples, 0.25%)</title><rect x="786.9" y="883.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="789.9" y="894.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.25%)</title><rect x="786.9" y="867.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="789.9" y="878.0"></text>
</g>
<g>
<title>G1AllocRegion::fill_up_remaining_space(HeapRegion*, bool) (1 samples, 0.25%)</title><rect x="786.9" y="851.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="789.9" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.25%)</title><rect x="786.9" y="835.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="789.9" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (7 samples, 1.75%)</title><rect x="789.8" y="915.0" width="20.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="792.8" y="926.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.25%)</title><rect x="807.5" y="899.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="810.5" y="910.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (3 samples, 0.75%)</title><rect x="810.4" y="931.0" width="8.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="813.4" y="942.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.25%)</title><rect x="819.2" y="947.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="822.2" y="958.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (4 samples, 1.00%)</title><rect x="822.2" y="963.0" width="11.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="825.2" y="974.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.25%)</title><rect x="822.2" y="947.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="825.2" y="958.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.25%)</title><rect x="822.2" y="931.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="825.2" y="942.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.25%)</title><rect x="822.2" y="915.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="825.2" y="926.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.25%)</title><rect x="822.2" y="899.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="825.2" y="910.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.75%)</title><rect x="825.1" y="947.0" width="8.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="828.1" y="958.0"></text>
</g>
<g>
<title>ObjectSynchronizer::oops_do(OopClosure*) (1 samples, 0.25%)</title><rect x="825.1" y="931.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="828.1" y="942.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.50%)</title><rect x="828.1" y="931.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="831.1" y="942.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.25%)</title><rect x="833.9" y="963.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="836.9" y="974.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.25%)</title><rect x="833.9" y="947.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="836.9" y="958.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.25%)</title><rect x="833.9" y="931.0" width="3.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="836.9" y="942.0"></text>
</g>
<g>
<title>JavaThread::run() (118 samples, 29.43%)</title><rect x="836.9" y="995.0" width="347.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="839.9" y="1006.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (118 samples, 29.43%)</title><rect x="836.9" y="979.0" width="347.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="839.9" y="990.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (118 samples, 29.43%)</title><rect x="836.9" y="963.0" width="347.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="839.9" y="974.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (117 samples, 29.18%)</title><rect x="836.9" y="947.0" width="344.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="839.9" y="958.0">CompileBroker::invoke_compiler_on_method(Compil..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (113 samples, 28.18%)</title><rect x="836.9" y="931.0" width="332.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="839.9" y="942.0">C2Compiler::compile_method(ciEnv*, ciMethod*,..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (113 samples, 28.18%)</title><rect x="836.9" y="915.0" width="332.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="839.9" y="926.0">Compile::Compile(ciEnv*, C2Compiler*, ciMetho..</text>
</g>
<g>
<title>Compile::Code_Gen() (40 samples, 9.98%)</title><rect x="836.9" y="899.0" width="117.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="839.9" y="910.0">Compile::Code_..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.75%)</title><rect x="836.9" y="883.0" width="8.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="839.9" y="894.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.50%)</title><rect x="836.9" y="867.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="839.9" y="878.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (2 samples, 0.50%)</title><rect x="836.9" y="851.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="839.9" y="862.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (2 samples, 0.50%)</title><rect x="836.9" y="835.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="839.9" y="846.0"></text>
</g>
<g>
<title>MachHaltNode::jvms() const (1 samples, 0.25%)</title><rect x="842.8" y="867.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="845.8" y="878.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.25%)</title><rect x="845.7" y="883.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="848.7" y="894.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.25%)</title><rect x="845.7" y="867.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="848.7" y="878.0"></text>
</g>
<g>
<title>LocationValue::write_on(DebugInfoWriteStream*) (1 samples, 0.25%)</title><rect x="845.7" y="851.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="848.7" y="862.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.00%)</title><rect x="848.7" y="883.0" width="11.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="851.7" y="894.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.00%)</title><rect x="848.7" y="867.0" width="11.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="851.7" y="878.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.50%)</title><rect x="851.6" y="851.0" width="5.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="854.6" y="862.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.25%)</title><rect x="857.5" y="851.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="860.5" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.25%)</title><rect x="860.4" y="883.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="863.4" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.25%)</title><rect x="860.4" y="867.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="863.4" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.25%)</title><rect x="860.4" y="851.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="863.4" y="862.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.25%)</title><rect x="860.4" y="835.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="863.4" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.25%)</title><rect x="863.4" y="883.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="866.4" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (30 samples, 7.48%)</title><rect x="866.3" y="883.0" width="88.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="869.3" y="894.0">PhaseChait..</text>
</g>
<g>
<title>MachNode::bottom_type() const (1 samples, 0.25%)</title><rect x="866.3" y="867.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="869.3" y="878.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.25%)</title><rect x="869.3" y="867.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="872.3" y="878.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.25%)</title><rect x="872.2" y="867.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="875.2" y="878.0"></text>
</g>
<g>
<title>JVMState::is_monitor_use(unsigned int) const (1 samples, 0.25%)</title><rect x="872.2" y="851.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="875.2" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (5 samples, 1.25%)</title><rect x="875.1" y="867.0" width="14.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="878.1" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.25%)</title><rect x="878.1" y="851.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="881.1" y="862.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (3 samples, 0.75%)</title><rect x="881.0" y="851.0" width="8.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="884.0" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.25%)</title><rect x="886.9" y="835.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="889.9" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.50%)</title><rect x="889.9" y="867.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="892.9" y="878.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.50%)</title><rect x="889.9" y="851.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="892.9" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.25%)</title><rect x="892.8" y="835.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="895.8" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.75%)</title><rect x="895.7" y="867.0" width="8.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="898.7" y="878.0"></text>
</g>
<g>
<title>MachSafePointNode::jvms() const (1 samples, 0.25%)</title><rect x="901.6" y="851.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="904.6" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 1.25%)</title><rect x="904.6" y="867.0" width="14.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="907.6" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.50%)</title><rect x="910.4" y="851.0" width="5.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="913.4" y="862.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.25%)</title><rect x="916.3" y="851.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="919.3" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.75%)</title><rect x="919.3" y="867.0" width="8.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="922.3" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.50%)</title><rect x="928.1" y="867.0" width="5.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="931.1" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.25%)</title><rect x="931.0" y="851.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="934.0" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.25%)</title><rect x="934.0" y="867.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="937.0" y="878.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.25%)</title><rect x="934.0" y="851.0" width="2.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="937.0" y="862.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.25%)</title><rect x="936.9" y="867.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="939.9" y="878.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.25%)</title><rect x="936.9" y="851.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="939.9" y="862.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.25%)</title><rect x="936.9" y="835.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="939.9" y="846.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.25%)</title><rect x="936.9" y="819.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="939.9" y="830.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.25%)</title><rect x="936.9" y="803.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="939.9" y="814.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.50%)</title><rect x="939.9" y="867.0" width="5.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="942.9" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.50%)</title><rect x="939.9" y="851.0" width="5.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="942.9" y="862.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.25%)</title><rect x="945.8" y="867.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="948.8" y="878.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.25%)</title><rect x="945.8" y="851.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="948.8" y="862.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.25%)</title><rect x="948.7" y="867.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="951.7" y="878.0"></text>
</g>
<g>
<title>jmpDirNode::oper_input_base() const (1 samples, 0.25%)</title><rect x="951.6" y="867.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="954.6" y="878.0"></text>
</g>
<g>
<title>Compile::Optimize() (65 samples, 16.21%)</title><rect x="954.6" y="899.0" width="191.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="957.6" y="910.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.25%)</title><rect x="954.6" y="883.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="957.6" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.25%)</title><rect x="954.6" y="867.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="957.6" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.25%)</title><rect x="954.6" y="851.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="957.6" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_non_escaped_objects(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;) (1 samples, 0.25%)</title><rect x="954.6" y="835.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="957.6" y="846.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.25%)</title><rect x="957.5" y="883.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="960.5" y="894.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.25%)</title><rect x="960.5" y="883.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="963.5" y="894.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.25%)</title><rect x="960.5" y="867.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="963.5" y="878.0"></text>
</g>
<g>
<title>SubINode::Opcode() const (1 samples, 0.25%)</title><rect x="960.5" y="851.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="963.5" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (54 samples, 13.47%)</title><rect x="963.4" y="883.0" width="158.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="966.4" y="894.0">PhaseIdealLoop::buil..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.50%)</title><rect x="963.4" y="867.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="966.4" y="878.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.50%)</title><rect x="963.4" y="851.0" width="5.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="966.4" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.25%)</title><rect x="969.3" y="867.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="972.3" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (47 samples, 11.72%)</title><rect x="972.2" y="867.0" width="138.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="975.2" y="878.0">PhaseIdealLoop::b..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (47 samples, 11.72%)</title><rect x="972.2" y="851.0" width="138.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="975.2" y="862.0">PhaseIdealLoop::b..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (4 samples, 1.00%)</title><rect x="972.2" y="835.0" width="11.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="975.2" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (43 samples, 10.72%)</title><rect x="984.0" y="835.0" width="126.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="987.0" y="846.0">PhaseIdealLoop::..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (6 samples, 1.50%)</title><rect x="1092.9" y="819.0" width="17.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1095.9" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.25%)</title><rect x="1110.5" y="867.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1113.5" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.75%)</title><rect x="1113.5" y="867.0" width="8.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1116.5" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.25%)</title><rect x="1119.4" y="851.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1122.4" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.25%)</title><rect x="1119.4" y="835.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1122.4" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.25%)</title><rect x="1119.4" y="819.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1122.4" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (7 samples, 1.75%)</title><rect x="1122.3" y="883.0" width="20.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1125.3" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 1.50%)</title><rect x="1125.3" y="867.0" width="17.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1128.3" y="878.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.25%)</title><rect x="1125.3" y="851.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1128.3" y="862.0"></text>
</g>
<g>
<title>MergeMemNode::Identity(PhaseTransform*) (1 samples, 0.25%)</title><rect x="1128.2" y="851.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.2" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.50%)</title><rect x="1131.1" y="851.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.1" y="862.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.50%)</title><rect x="1137.0" y="851.0" width="5.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.0" y="862.0"></text>
</g>
<g>
<title>Node::set_req_X(unsigned int, Node*, PhaseIterGVN*) (1 samples, 0.25%)</title><rect x="1137.0" y="835.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.0" y="846.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.25%)</title><rect x="1140.0" y="835.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1143.0" y="846.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.25%)</title><rect x="1142.9" y="883.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.9" y="894.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.25%)</title><rect x="1142.9" y="867.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.9" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.25%)</title><rect x="1142.9" y="851.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1145.9" y="862.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.25%)</title><rect x="1142.9" y="835.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.9" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 1.75%)</title><rect x="1145.9" y="899.0" width="20.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.9" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 1.75%)</title><rect x="1145.9" y="883.0" width="20.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 1.75%)</title><rect x="1145.9" y="867.0" width="20.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 1.75%)</title><rect x="1145.9" y="851.0" width="20.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 1.75%)</title><rect x="1145.9" y="835.0" width="20.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.25%)</title><rect x="1145.9" y="819.0" width="14.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.9" y="830.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.25%)</title><rect x="1145.9" y="803.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.9" y="814.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.25%)</title><rect x="1145.9" y="787.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.9" y="798.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.25%)</title><rect x="1145.9" y="771.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.9" y="782.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_call_or_null(KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.25%)</title><rect x="1145.9" y="755.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.9" y="766.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_call(CallInfo&amp;, Handle, KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.25%)</title><rect x="1145.9" y="739.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.9" y="750.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_interface_method(CallInfo&amp;, methodHandle, KlassHandle, Handle, KlassHandle, bool, Thread*) (1 samples, 0.25%)</title><rect x="1145.9" y="723.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.9" y="734.0"></text>
</g>
<g>
<title>LinkResolver::lookup_instance_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, Thread*) (1 samples, 0.25%)</title><rect x="1145.9" y="707.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.9" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.25%)</title><rect x="1145.9" y="691.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.9" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.25%)</title><rect x="1145.9" y="675.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1148.9" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.00%)</title><rect x="1148.8" y="803.0" width="11.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.8" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.00%)</title><rect x="1148.8" y="787.0" width="11.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1151.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.00%)</title><rect x="1148.8" y="771.0" width="11.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1151.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.00%)</title><rect x="1148.8" y="755.0" width="11.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.00%)</title><rect x="1148.8" y="739.0" width="11.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.00%)</title><rect x="1148.8" y="723.0" width="11.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.8" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.50%)</title><rect x="1148.8" y="707.0" width="5.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1151.8" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.50%)</title><rect x="1148.8" y="691.0" width="5.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1151.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.50%)</title><rect x="1148.8" y="675.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.50%)</title><rect x="1148.8" y="659.0" width="5.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1151.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.50%)</title><rect x="1148.8" y="643.0" width="5.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1151.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.50%)</title><rect x="1148.8" y="627.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.8" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1148.8" y="611.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.8" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1148.8" y="595.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1148.8" y="579.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1148.8" y="563.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1151.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1148.8" y="547.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1151.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.25%)</title><rect x="1148.8" y="531.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.8" y="542.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.25%)</title><rect x="1148.8" y="515.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.8" y="526.0"></text>
</g>
<g>
<title>Type::singleton() const (1 samples, 0.25%)</title><rect x="1148.8" y="499.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.8" y="510.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1151.7" y="611.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.7" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1151.7" y="595.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1154.7" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1151.7" y="579.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1151.7" y="563.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1151.7" y="547.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1151.7" y="531.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.25%)</title><rect x="1151.7" y="515.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.7" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1151.7" y="499.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.7" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1151.7" y="483.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1151.7" y="467.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1151.7" y="451.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1151.7" y="435.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.25%)</title><rect x="1151.7" y="419.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.7" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1151.7" y="403.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.7" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1151.7" y="387.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1151.7" y="371.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1151.7" y="355.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1151.7" y="339.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.25%)</title><rect x="1151.7" y="323.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.7" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1151.7" y="307.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.7" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1151.7" y="291.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1151.7" y="275.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1151.7" y="259.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1151.7" y="243.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.7" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.25%)</title><rect x="1151.7" y="227.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1154.7" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1151.7" y="211.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.7" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1151.7" y="195.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1151.7" y="179.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.7" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1151.7" y="163.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1151.7" y="147.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.7" y="158.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.25%)</title><rect x="1151.7" y="131.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.7" y="142.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.25%)</title><rect x="1151.7" y="115.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.7" y="126.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.25%)</title><rect x="1151.7" y="99.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.7" y="110.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.25%)</title><rect x="1151.7" y="83.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.7" y="94.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.25%)</title><rect x="1151.7" y="67.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.7" y="78.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.25%)</title><rect x="1151.7" y="51.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.7" y="62.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.25%)</title><rect x="1151.7" y="35.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.7" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.50%)</title><rect x="1154.7" y="707.0" width="5.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1157.7" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.50%)</title><rect x="1154.7" y="691.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.7" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.50%)</title><rect x="1154.7" y="675.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.50%)</title><rect x="1154.7" y="659.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.50%)</title><rect x="1154.7" y="643.0" width="5.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.50%)</title><rect x="1154.7" y="627.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.50%)</title><rect x="1154.7" y="611.0" width="5.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1157.7" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1154.7" y="595.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1157.7" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1154.7" y="579.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1157.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1154.7" y="563.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1154.7" y="547.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1154.7" y="531.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.25%)</title><rect x="1154.7" y="515.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.7" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1154.7" y="499.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.7" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1154.7" y="483.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1154.7" y="467.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1154.7" y="451.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.7" y="462.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.25%)</title><rect x="1154.7" y="435.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.7" y="446.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1157.6" y="595.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.6" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1157.6" y="579.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.6" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1157.6" y="563.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1157.6" y="547.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1157.6" y="531.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1157.6" y="515.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.25%)</title><rect x="1157.6" y="499.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.6" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1157.6" y="483.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.6" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1157.6" y="467.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1157.6" y="451.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1157.6" y="435.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1157.6" y="419.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.25%)</title><rect x="1157.6" y="403.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.6" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.25%)</title><rect x="1157.6" y="387.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.6" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.25%)</title><rect x="1157.6" y="371.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.25%)</title><rect x="1157.6" y="355.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.25%)</title><rect x="1157.6" y="339.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.25%)</title><rect x="1157.6" y="323.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.25%)</title><rect x="1157.6" y="307.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.6" y="318.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.25%)</title><rect x="1157.6" y="291.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.6" y="302.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.25%)</title><rect x="1157.6" y="275.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.6" y="286.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.25%)</title><rect x="1157.6" y="259.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.6" y="270.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.25%)</title><rect x="1157.6" y="243.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.6" y="254.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.25%)</title><rect x="1157.6" y="227.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.6" y="238.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.25%)</title><rect x="1157.6" y="211.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.50%)</title><rect x="1160.6" y="819.0" width="5.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (2 samples, 0.50%)</title><rect x="1160.6" y="803.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.6" y="814.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.25%)</title><rect x="1160.6" y="787.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.6" y="798.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.25%)</title><rect x="1160.6" y="771.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.6" y="782.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.25%)</title><rect x="1160.6" y="755.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.6" y="766.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.25%)</title><rect x="1160.6" y="739.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.6" y="750.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.25%)</title><rect x="1160.6" y="723.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.6" y="734.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.25%)</title><rect x="1160.6" y="707.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.6" y="718.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.25%)</title><rect x="1160.6" y="691.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.6" y="702.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.25%)</title><rect x="1163.5" y="787.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.5" y="798.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.25%)</title><rect x="1163.5" y="771.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.5" y="782.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.25%)</title><rect x="1163.5" y="755.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.5" y="766.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.25%)</title><rect x="1163.5" y="739.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.5" y="750.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.25%)</title><rect x="1163.5" y="723.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.5" y="734.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.25%)</title><rect x="1163.5" y="707.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.5" y="718.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.25%)</title><rect x="1163.5" y="691.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.5" y="702.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.25%)</title><rect x="1166.5" y="899.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.5" y="910.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.25%)</title><rect x="1166.5" y="883.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.5" y="894.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (4 samples, 1.00%)</title><rect x="1169.4" y="931.0" width="11.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.4" y="942.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (4 samples, 1.00%)</title><rect x="1169.4" y="915.0" width="11.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.4" y="926.0"></text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 1.00%)</title><rect x="1169.4" y="899.0" width="11.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.4" y="910.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.75%)</title><rect x="1169.4" y="883.0" width="8.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.4" y="894.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.25%)</title><rect x="1169.4" y="867.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.4" y="878.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.25%)</title><rect x="1169.4" y="851.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.4" y="862.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.25%)</title><rect x="1169.4" y="835.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.4" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.25%)</title><rect x="1169.4" y="819.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.4" y="830.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.25%)</title><rect x="1169.4" y="803.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.4" y="814.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.25%)</title><rect x="1169.4" y="787.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.4" y="798.0"></text>
</g>
<g>
<title>BlockListBuilder::make_block_at(int, BlockBegin*) (1 samples, 0.25%)</title><rect x="1169.4" y="771.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.4" y="782.0"></text>
</g>
<g>
<title>BlockBegin::operator new(unsigned long) (1 samples, 0.25%)</title><rect x="1169.4" y="755.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.4" y="766.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.50%)</title><rect x="1172.3" y="867.0" width="5.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.3" y="878.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.25%)</title><rect x="1172.3" y="851.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.3" y="862.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.25%)</title><rect x="1172.3" y="835.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.3" y="846.0"></text>
</g>
<g>
<title>LIRGenerator::do_Goto(Goto*) (1 samples, 0.25%)</title><rect x="1172.3" y="819.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.3" y="830.0"></text>
</g>
<g>
<title>LIRGenerator::move_to_phi(ValueStack*) (1 samples, 0.25%)</title><rect x="1172.3" y="803.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.3" y="814.0"></text>
</g>
<g>
<title>PhiResolverState::reset(int) (1 samples, 0.25%)</title><rect x="1172.3" y="787.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.3" y="798.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.25%)</title><rect x="1175.3" y="851.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.3" y="862.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.25%)</title><rect x="1175.3" y="835.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.3" y="846.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.25%)</title><rect x="1175.3" y="819.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.3" y="830.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.25%)</title><rect x="1175.3" y="803.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.3" y="814.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_locked_reg(Interval*) (1 samples, 0.25%)</title><rect x="1175.3" y="787.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.3" y="798.0"></text>
</g>
<g>
<title>LinearScanWalker::split_and_spill_interval(Interval*) (1 samples, 0.25%)</title><rect x="1175.3" y="771.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.3" y="782.0"></text>
</g>
<g>
<title>LinearScanWalker::split_before_usage(Interval*, int, int) (1 samples, 0.25%)</title><rect x="1175.3" y="755.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.3" y="766.0"></text>
</g>
<g>
<title>Interval::split(int) (1 samples, 0.25%)</title><rect x="1175.3" y="739.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.3" y="750.0"></text>
</g>
<g>
<title>Interval::new_split_child() (1 samples, 0.25%)</title><rect x="1175.3" y="723.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.3" y="734.0"></text>
</g>
<g>
<title>Interval::Interval(int) (1 samples, 0.25%)</title><rect x="1175.3" y="707.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.3" y="718.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.25%)</title><rect x="1178.2" y="883.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.2" y="894.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.25%)</title><rect x="1178.2" y="867.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.2" y="878.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.25%)</title><rect x="1178.2" y="851.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.2" y="862.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.25%)</title><rect x="1178.2" y="835.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.2" y="846.0"></text>
</g>
<g>
<title>CodeBlob::CodeBlob(char const*, CodeBuffer*, int, int, int, int, OopMapSet*) (1 samples, 0.25%)</title><rect x="1178.2" y="819.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.2" y="830.0"></text>
</g>
<g>
<title>CodeBuffer::copy_code_to(CodeBlob*) (1 samples, 0.25%)</title><rect x="1178.2" y="803.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.2" y="814.0"></text>
</g>
<g>
<title>CodeBuffer::relocate_code_to(CodeBuffer*) const (1 samples, 0.25%)</title><rect x="1178.2" y="787.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.2" y="798.0"></text>
</g>
<g>
<title>RelocIterator::reloc() (1 samples, 0.25%)</title><rect x="1178.2" y="771.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.2" y="782.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.25%)</title><rect x="1181.2" y="947.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.2" y="958.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.25%)</title><rect x="1181.2" y="931.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.2" y="942.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.25%)</title><rect x="1181.2" y="915.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.2" y="926.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.25%)</title><rect x="1181.2" y="899.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.2" y="910.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.25%)</title><rect x="1181.2" y="883.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.2" y="894.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.25%)</title><rect x="1184.1" y="995.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.1" y="1006.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.25%)</title><rect x="1187.1" y="995.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.1" y="1006.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.25%)</title><rect x="1187.1" y="979.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.1" y="990.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.25%)</title><rect x="1187.1" y="963.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.1" y="974.0"></text>
</g>
</g>
</svg>
