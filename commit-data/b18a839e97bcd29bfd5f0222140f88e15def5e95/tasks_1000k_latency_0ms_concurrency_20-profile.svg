<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1014" onload="init(evt)" viewBox="0 0 1200 1014" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="997"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="997"> </text>
<g id="frames">
<g>
<title>all (1,246 samples, 100.00%)</title><rect x="10.0" y="963.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="974.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (305 samples, 24.48%)</title><rect x="10.0" y="947.0" width="288.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="958.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.08%)</title><rect x="10.0" y="931.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.08%)</title><rect x="10.0" y="915.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.08%)</title><rect x="10.0" y="899.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (304 samples, 24.40%)</title><rect x="10.9" y="931.0" width="287.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.9" y="942.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (5 samples, 0.40%)</title><rect x="10.9" y="915.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.9" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (5 samples, 0.40%)</title><rect x="10.9" y="899.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.9" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/2058928375.accept (4 samples, 0.32%)</title><rect x="11.9" y="883.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.9" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (4 samples, 0.32%)</title><rect x="11.9" y="867.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.9" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.32%)</title><rect x="11.9" y="851.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.9" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.24%)</title><rect x="12.8" y="835.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.8" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (2 samples, 0.16%)</title><rect x="15.7" y="915.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.7" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (2 samples, 0.16%)</title><rect x="15.7" y="899.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.7" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.16%)</title><rect x="15.7" y="883.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.7" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.16%)</title><rect x="15.7" y="867.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.7" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="16.6" y="851.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.6" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="16.6" y="835.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.6" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.08%)</title><rect x="16.6" y="819.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.6" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.08%)</title><rect x="17.6" y="915.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.6" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.08%)</title><rect x="17.6" y="899.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="20.6" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="17.6" y="883.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.6" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="17.6" y="867.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.6" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="17.6" y="851.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.6" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="17.6" y="835.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.6" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="17.6" y="819.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.6" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="17.6" y="803.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.6" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="17.6" y="787.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.6" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="17.6" y="771.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.6" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$268/406357792.test (1 samples, 0.08%)</title><rect x="17.6" y="755.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="20.6" y="766.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (231 samples, 18.54%)</title><rect x="18.5" y="915.0" width="218.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.5" y="926.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/426458046.accept (223 samples, 17.90%)</title><rect x="20.4" y="899.0" width="211.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="23.4" y="910.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$71 (223 samples, 17.90%)</title><rect x="20.4" y="883.0" width="211.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.4" y="894.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.combine (1 samples, 0.08%)</title><rect x="20.4" y="867.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.4" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1172131546.linkToTargetMethod (1 samples, 0.08%)</title><rect x="20.4" y="851.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.4" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (1 samples, 0.08%)</title><rect x="20.4" y="835.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.4" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/1413666678.get$Lambda (1 samples, 0.08%)</title><rect x="20.4" y="819.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.4" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="20.4" y="803.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="23.4" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.08%)</title><rect x="20.4" y="787.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="23.4" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="20.4" y="771.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="23.4" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="20.4" y="755.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="23.4" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (182 samples, 14.61%)</title><rect x="21.4" y="867.0" width="172.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="24.4" y="878.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (182 samples, 14.61%)</title><rect x="21.4" y="851.0" width="172.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="24.4" y="862.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (182 samples, 14.61%)</title><rect x="21.4" y="835.0" width="172.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="24.4" y="846.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (182 samples, 14.61%)</title><rect x="21.4" y="819.0" width="172.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.4" y="830.0">java/util/concurrent/E..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (182 samples, 14.61%)</title><rect x="21.4" y="803.0" width="172.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.4" y="814.0">java/util/concurrent/T..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (154 samples, 12.36%)</title><rect x="46.9" y="787.0" width="145.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="49.9" y="798.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (123 samples, 9.87%)</title><rect x="46.9" y="771.0" width="116.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="49.9" y="782.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (123 samples, 9.87%)</title><rect x="46.9" y="755.0" width="116.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="49.9" y="766.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (123 samples, 9.87%)</title><rect x="46.9" y="739.0" width="116.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="49.9" y="750.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (123 samples, 9.87%)</title><rect x="46.9" y="723.0" width="116.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="49.9" y="734.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (123 samples, 9.87%)</title><rect x="46.9" y="707.0" width="116.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="49.9" y="718.0">java/util/conc..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (86 samples, 6.90%)</title><rect x="82.0" y="691.0" width="81.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="85.0" y="702.0">sun/misc/..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.16%)</title><rect x="82.0" y="675.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="85.0" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="83.9" y="675.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="86.9" y="686.0"></text>
</g>
<g>
<title>Unsafe_Unpark (77 samples, 6.18%)</title><rect x="84.8" y="675.0" width="72.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="87.8" y="686.0">Unsafe_U..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.24%)</title><rect x="85.8" y="659.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="88.8" y="670.0"></text>
</g>
<g>
<title>__pthread_cond_signal (49 samples, 3.93%)</title><rect x="88.6" y="659.0" width="46.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="91.6" y="670.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (7 samples, 0.56%)</title><rect x="135.0" y="659.0" width="6.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="138.0" y="670.0"></text>
</g>
<g>
<title>pthread_mutex_lock (17 samples, 1.36%)</title><rect x="141.6" y="659.0" width="16.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="144.6" y="670.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.24%)</title><rect x="157.7" y="675.0" width="2.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="160.7" y="686.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.24%)</title><rect x="160.6" y="675.0" width="2.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="163.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (31 samples, 2.49%)</title><rect x="163.4" y="771.0" width="29.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="166.4" y="782.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (31 samples, 2.49%)</title><rect x="163.4" y="755.0" width="29.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="166.4" y="766.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (31 samples, 2.49%)</title><rect x="163.4" y="739.0" width="29.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="166.4" y="750.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (31 samples, 2.49%)</title><rect x="163.4" y="723.0" width="29.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="166.4" y="734.0">ja..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="192.8" y="787.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="195.8" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (17 samples, 1.36%)</title><rect x="193.7" y="867.0" width="16.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="196.7" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (14 samples, 1.12%)</title><rect x="196.6" y="851.0" width="13.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="199.6" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.isRegressing (1 samples, 0.08%)</title><rect x="208.9" y="835.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="211.9" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (2 samples, 0.16%)</title><rect x="209.8" y="867.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="212.8" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.16%)</title><rect x="209.8" y="851.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="212.8" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.16%)</title><rect x="209.8" y="835.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="212.8" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (21 samples, 1.69%)</title><rect x="211.7" y="867.0" width="19.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="214.7" y="878.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (18 samples, 1.44%)</title><rect x="211.7" y="851.0" width="17.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="214.7" y="862.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (10 samples, 0.80%)</title><rect x="218.3" y="835.0" width="9.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="221.3" y="846.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (9 samples, 0.72%)</title><rect x="218.3" y="819.0" width="8.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="221.3" y="830.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (9 samples, 0.72%)</title><rect x="218.3" y="803.0" width="8.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="221.3" y="814.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (9 samples, 0.72%)</title><rect x="218.3" y="787.0" width="8.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="221.3" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="223.1" y="771.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="226.1" y="782.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="223.1" y="755.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="226.1" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="223.1" y="739.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="226.1" y="750.0"></text>
</g>
<g>
<title>_init (1 samples, 0.08%)</title><rect x="223.1" y="723.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="226.1" y="734.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.24%)</title><rect x="224.0" y="771.0" width="2.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="227.0" y="782.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.08%)</title><rect x="226.9" y="819.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="229.9" y="830.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="227.8" y="835.0" width="1.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="230.8" y="846.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.24%)</title><rect x="228.8" y="851.0" width="2.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="231.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (2 samples, 0.16%)</title><rect x="231.6" y="899.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="234.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (2 samples, 0.16%)</title><rect x="231.6" y="883.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="234.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (2 samples, 0.16%)</title><rect x="231.6" y="867.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="234.6" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (2 samples, 0.16%)</title><rect x="231.6" y="851.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="234.6" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (2 samples, 0.16%)</title><rect x="231.6" y="835.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="234.6" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 0.16%)</title><rect x="231.6" y="819.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="234.6" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="232.6" y="803.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="235.6" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="232.6" y="787.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="235.6" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="232.6" y="771.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="235.6" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="232.6" y="755.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="235.6" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="232.6" y="739.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="235.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (3 samples, 0.24%)</title><rect x="233.5" y="899.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="236.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (3 samples, 0.24%)</title><rect x="233.5" y="883.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.24%)</title><rect x="233.5" y="867.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="236.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.24%)</title><rect x="233.5" y="851.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="236.5" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (3 samples, 0.24%)</title><rect x="233.5" y="835.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="236.5" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (3 samples, 0.24%)</title><rect x="233.5" y="819.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.08%)</title><rect x="236.3" y="899.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="239.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.08%)</title><rect x="236.3" y="883.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="239.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (65 samples, 5.22%)</title><rect x="237.3" y="915.0" width="61.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="240.3" y="926.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (65 samples, 5.22%)</title><rect x="237.3" y="899.0" width="61.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="240.3" y="910.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (45 samples, 3.61%)</title><rect x="237.3" y="883.0" width="42.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="240.3" y="894.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (45 samples, 3.61%)</title><rect x="237.3" y="867.0" width="42.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="240.3" y="878.0">org/..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="237.3" y="851.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="240.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (43 samples, 3.45%)</title><rect x="238.2" y="851.0" width="40.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="241.2" y="862.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (33 samples, 2.65%)</title><rect x="238.2" y="835.0" width="31.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="241.2" y="846.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (33 samples, 2.65%)</title><rect x="238.2" y="819.0" width="31.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="241.2" y="830.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (17 samples, 1.36%)</title><rect x="240.1" y="803.0" width="16.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="243.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (8 samples, 0.64%)</title><rect x="246.8" y="787.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="249.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (8 samples, 0.64%)</title><rect x="246.8" y="771.0" width="7.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="249.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (8 samples, 0.64%)</title><rect x="246.8" y="755.0" width="7.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="249.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (8 samples, 0.64%)</title><rect x="246.8" y="739.0" width="7.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="249.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (8 samples, 0.64%)</title><rect x="246.8" y="723.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="249.8" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (8 samples, 0.64%)</title><rect x="246.8" y="707.0" width="7.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="249.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (8 samples, 0.64%)</title><rect x="246.8" y="691.0" width="7.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="249.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.08%)</title><rect x="254.3" y="787.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="257.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.08%)</title><rect x="254.3" y="771.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (1 samples, 0.08%)</title><rect x="254.3" y="755.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="257.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.08%)</title><rect x="255.3" y="787.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="258.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (14 samples, 1.12%)</title><rect x="256.2" y="803.0" width="13.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="259.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (14 samples, 1.12%)</title><rect x="256.2" y="787.0" width="13.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="259.2" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="256.2" y="771.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="259.2" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="256.2" y="755.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="259.2" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.08%)</title><rect x="256.2" y="739.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="259.2" y="750.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_region_work(MemRegion) (1 samples, 0.08%)</title><rect x="256.2" y="723.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="259.2" y="734.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.08%)</title><rect x="256.2" y="707.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="259.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (9 samples, 0.72%)</title><rect x="257.2" y="771.0" width="8.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="260.2" y="782.0"></text>
</g>
<g>
<title>java/util/Optional.of (9 samples, 0.72%)</title><rect x="257.2" y="755.0" width="8.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="260.2" y="766.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.08%)</title><rect x="261.9" y="739.0" width="1.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="264.9" y="750.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.24%)</title><rect x="262.9" y="739.0" width="2.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="265.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (4 samples, 0.32%)</title><rect x="265.7" y="771.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="268.7" y="782.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (4 samples, 0.32%)</title><rect x="265.7" y="755.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (5 samples, 0.40%)</title><rect x="269.5" y="835.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="272.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (5 samples, 0.40%)</title><rect x="269.5" y="819.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="272.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.08%)</title><rect x="269.5" y="803.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="272.5" y="814.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.08%)</title><rect x="269.5" y="787.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="272.5" y="798.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.08%)</title><rect x="269.5" y="771.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="272.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.08%)</title><rect x="269.5" y="755.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="272.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (4 samples, 0.32%)</title><rect x="270.4" y="803.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="273.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.32%)</title><rect x="270.4" y="787.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="273.4" y="798.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="273.3" y="771.0" width="0.9" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="276.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (3 samples, 0.24%)</title><rect x="274.2" y="835.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="277.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (3 samples, 0.24%)</title><rect x="274.2" y="819.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="277.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.08%)</title><rect x="274.2" y="803.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="277.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="274.2" y="787.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="277.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="275.2" y="803.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="278.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="275.2" y="787.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="278.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="275.2" y="771.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="278.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="276.1" y="755.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="279.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (2 samples, 0.16%)</title><rect x="277.1" y="835.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="280.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.08%)</title><rect x="279.0" y="851.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="282.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.08%)</title><rect x="279.0" y="835.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="282.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.08%)</title><rect x="279.0" y="819.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="282.0" y="830.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.08%)</title><rect x="279.0" y="803.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.0" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="279.0" y="787.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="282.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (6 samples, 0.48%)</title><rect x="279.9" y="883.0" width="5.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="282.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (5 samples, 0.40%)</title><rect x="279.9" y="867.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="282.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 0.24%)</title><rect x="279.9" y="851.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="282.9" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="279.9" y="835.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="282.9" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="279.9" y="819.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="282.9" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="279.9" y="803.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="282.9" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="279.9" y="787.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="282.9" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="279.9" y="771.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="282.9" y="782.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="279.9" y="755.0" width="1.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="282.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.08%)</title><rect x="280.9" y="835.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="283.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.08%)</title><rect x="280.9" y="819.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="283.9" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="280.9" y="803.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="283.9" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="280.9" y="787.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="283.9" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="280.9" y="771.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="283.9" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="280.9" y="755.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="283.9" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="280.9" y="739.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="283.9" y="750.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.08%)</title><rect x="280.9" y="723.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="283.9" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySpliterator.characteristics (1 samples, 0.08%)</title><rect x="280.9" y="707.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="283.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.08%)</title><rect x="281.8" y="835.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="284.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.08%)</title><rect x="281.8" y="819.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="284.8" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="281.8" y="803.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="284.8" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="281.8" y="787.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="284.8" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="281.8" y="771.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="284.8" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="281.8" y="755.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="284.8" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="281.8" y="739.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="284.8" y="750.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="281.8" y="723.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="284.8" y="734.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.08%)</title><rect x="281.8" y="707.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="284.8" y="718.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.08%)</title><rect x="281.8" y="691.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="284.8" y="702.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntryIterator.next (1 samples, 0.08%)</title><rect x="281.8" y="675.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="284.8" y="686.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.08%)</title><rect x="281.8" y="659.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="284.8" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="281.8" y="643.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="284.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.16%)</title><rect x="282.7" y="851.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="285.7" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.16%)</title><rect x="282.7" y="835.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="285.7" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.16%)</title><rect x="282.7" y="819.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.7" y="830.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.16%)</title><rect x="282.7" y="803.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="285.7" y="814.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="283.7" y="787.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="286.7" y="798.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$$Lambda$47/317071334.get (1 samples, 0.08%)</title><rect x="283.7" y="771.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="286.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.08%)</title><rect x="284.6" y="867.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="287.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.08%)</title><rect x="284.6" y="851.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="287.6" y="862.0"></text>
</g>
<g>
<title>java/util/AbstractSet.equals (1 samples, 0.08%)</title><rect x="284.6" y="835.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="287.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.08%)</title><rect x="285.6" y="883.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="288.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.08%)</title><rect x="285.6" y="867.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="288.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValueIterator.next (1 samples, 0.08%)</title><rect x="285.6" y="851.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="288.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$Traverser.advance (1 samples, 0.08%)</title><rect x="285.6" y="835.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="288.6" y="846.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.08%)</title><rect x="285.6" y="819.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="288.6" y="830.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="285.6" y="803.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="288.6" y="814.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="285.6" y="787.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="288.6" y="798.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.08%)</title><rect x="285.6" y="771.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="288.6" y="782.0"></text>
</g>
<g>
<title>frame::retrieve_receiver(RegisterMap*) (1 samples, 0.08%)</title><rect x="285.6" y="755.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="288.6" y="766.0"></text>
</g>
<g>
<title>SharedRuntime::java_calling_convention(BasicType const*, VMRegPair*, int, int) (1 samples, 0.08%)</title><rect x="285.6" y="739.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="288.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 0.24%)</title><rect x="286.5" y="883.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="289.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.24%)</title><rect x="286.5" y="867.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="289.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.24%)</title><rect x="286.5" y="851.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="289.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.24%)</title><rect x="286.5" y="835.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="289.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (3 samples, 0.24%)</title><rect x="286.5" y="819.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="289.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (3 samples, 0.24%)</title><rect x="286.5" y="803.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="289.5" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.24%)</title><rect x="286.5" y="787.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="289.5" y="798.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.24%)</title><rect x="286.5" y="771.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="289.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (8 samples, 0.64%)</title><rect x="289.4" y="883.0" width="7.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="292.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (7 samples, 0.56%)</title><rect x="290.3" y="867.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="293.3" y="878.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.16%)</title><rect x="290.3" y="851.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="293.3" y="862.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.16%)</title><rect x="290.3" y="835.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="293.3" y="846.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="290.3" y="819.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="293.3" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.08%)</title><rect x="291.3" y="819.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="294.3" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="291.3" y="803.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="294.3" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="291.3" y="787.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="294.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.08%)</title><rect x="292.2" y="851.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="295.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.24%)</title><rect x="293.2" y="851.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="296.2" y="862.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.16%)</title><rect x="293.2" y="835.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="296.2" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.16%)</title><rect x="293.2" y="819.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="296.2" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.16%)</title><rect x="293.2" y="803.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="296.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (2 samples, 0.16%)</title><rect x="293.2" y="787.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="296.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.08%)</title><rect x="295.1" y="835.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="298.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.08%)</title><rect x="295.1" y="819.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="298.1" y="830.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.entrySet (1 samples, 0.08%)</title><rect x="295.1" y="803.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="298.1" y="814.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.&lt;init&gt; (1 samples, 0.08%)</title><rect x="295.1" y="787.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="298.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.08%)</title><rect x="296.0" y="851.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="299.0" y="862.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.08%)</title><rect x="296.0" y="835.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="299.0" y="846.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.08%)</title><rect x="296.0" y="819.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="299.0" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.08%)</title><rect x="296.0" y="803.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="299.0" y="814.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.hasNext (1 samples, 0.08%)</title><rect x="296.0" y="787.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="299.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 0.16%)</title><rect x="297.0" y="883.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="300.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="297.0" y="867.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="300.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="297.0" y="851.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="300.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="297.0" y="835.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="300.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.shouldRecord (1 samples, 0.08%)</title><rect x="297.9" y="851.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="300.9" y="862.0"></text>
</g>
<g>
<title>java/lang/Thread.run (821 samples, 65.89%)</title><rect x="298.8" y="947.0" width="777.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="301.8" y="958.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (821 samples, 65.89%)</title><rect x="298.8" y="931.0" width="777.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="301.8" y="942.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (821 samples, 65.89%)</title><rect x="298.8" y="915.0" width="777.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="301.8" y="926.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/885525374.run (596 samples, 47.83%)</title><rect x="304.5" y="899.0" width="564.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="307.5" y="910.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/885525374.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (596 samples, 47.83%)</title><rect x="304.5" y="883.0" width="564.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="307.5" y="894.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (596 samples, 47.83%)</title><rect x="304.5" y="867.0" width="564.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="307.5" y="878.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (590 samples, 47.35%)</title><rect x="304.5" y="851.0" width="558.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="307.5" y="862.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.08%)</title><rect x="318.7" y="835.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="321.7" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (1 samples, 0.08%)</title><rect x="319.7" y="835.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="322.7" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.08%)</title><rect x="319.7" y="819.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="322.7" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$197/1057051535.get (1 samples, 0.08%)</title><rect x="319.7" y="803.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="322.7" y="814.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.08%)</title><rect x="319.7" y="787.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="322.7" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (192 samples, 15.41%)</title><rect x="320.6" y="835.0" width="181.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="323.6" y="846.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (192 samples, 15.41%)</title><rect x="320.6" y="819.0" width="181.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="323.6" y="830.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (192 samples, 15.41%)</title><rect x="320.6" y="803.0" width="181.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="323.6" y="814.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (192 samples, 15.41%)</title><rect x="320.6" y="787.0" width="181.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="323.6" y="798.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (192 samples, 15.41%)</title><rect x="320.6" y="771.0" width="181.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="323.6" y="782.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (192 samples, 15.41%)</title><rect x="320.6" y="755.0" width="181.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="323.6" y="766.0">com/fasterxml/jackson/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (67 samples, 5.38%)</title><rect x="320.6" y="739.0" width="63.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="323.6" y="750.0">com/fas..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="342.4" y="723.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="345.4" y="734.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.32%)</title><rect x="343.4" y="723.0" width="3.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="346.4" y="734.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="346.2" y="707.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="349.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (6 samples, 0.48%)</title><rect x="347.1" y="723.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="350.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (5 samples, 0.40%)</title><rect x="348.1" y="707.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="351.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.16%)</title><rect x="350.9" y="691.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="353.9" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.16%)</title><rect x="350.9" y="675.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="353.9" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.16%)</title><rect x="350.9" y="659.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="353.9" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.16%)</title><rect x="350.9" y="643.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="353.9" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.16%)</title><rect x="350.9" y="627.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="353.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (33 samples, 2.65%)</title><rect x="352.8" y="723.0" width="31.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="355.8" y="734.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (33 samples, 2.65%)</title><rect x="352.8" y="707.0" width="31.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="355.8" y="718.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (10 samples, 0.80%)</title><rect x="362.3" y="691.0" width="9.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="365.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (10 samples, 0.80%)</title><rect x="362.3" y="675.0" width="9.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="365.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (12 samples, 0.96%)</title><rect x="371.8" y="691.0" width="11.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="374.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (12 samples, 0.96%)</title><rect x="371.8" y="675.0" width="11.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="374.8" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (12 samples, 0.96%)</title><rect x="371.8" y="659.0" width="11.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="374.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.08%)</title><rect x="383.1" y="691.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="386.1" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="383.1" y="675.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="386.1" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="383.1" y="659.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="386.1" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="383.1" y="643.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="386.1" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="383.1" y="627.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="386.1" y="638.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="383.1" y="611.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="386.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (114 samples, 9.15%)</title><rect x="384.1" y="739.0" width="107.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="387.1" y="750.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.08%)</title><rect x="386.9" y="723.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="389.9" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (4 samples, 0.32%)</title><rect x="387.9" y="723.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="390.9" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (8 samples, 0.64%)</title><rect x="391.7" y="723.0" width="7.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="394.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.48%)</title><rect x="393.5" y="707.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="396.5" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (6 samples, 0.48%)</title><rect x="399.2" y="723.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="402.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 0.48%)</title><rect x="399.2" y="707.0" width="5.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="402.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (4 samples, 0.32%)</title><rect x="400.2" y="691.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="403.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.32%)</title><rect x="400.2" y="675.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="403.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.16%)</title><rect x="402.1" y="659.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="405.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.08%)</title><rect x="404.0" y="691.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="407.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.08%)</title><rect x="404.0" y="675.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="407.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (5 samples, 0.40%)</title><rect x="404.9" y="723.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="407.9" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="405.9" y="707.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="408.9" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="405.9" y="691.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="408.9" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="405.9" y="675.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="408.9" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="405.9" y="659.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="408.9" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="405.9" y="643.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="408.9" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="405.9" y="627.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="408.9" y="638.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="405.9" y="611.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="408.9" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="405.9" y="595.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="408.9" y="606.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="405.9" y="579.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="408.9" y="590.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (1 samples, 0.08%)</title><rect x="405.9" y="563.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="408.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.24%)</title><rect x="406.8" y="707.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="409.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (83 samples, 6.66%)</title><rect x="409.6" y="723.0" width="78.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="412.6" y="734.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (19 samples, 1.52%)</title><rect x="411.5" y="707.0" width="18.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="414.5" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.40%)</title><rect x="415.3" y="691.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="418.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.40%)</title><rect x="415.3" y="675.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="418.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.40%)</title><rect x="415.3" y="659.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="418.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (10 samples, 0.80%)</title><rect x="420.1" y="691.0" width="9.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="423.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.16%)</title><rect x="429.5" y="707.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="432.5" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (60 samples, 4.82%)</title><rect x="431.4" y="707.0" width="56.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="434.4" y="718.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (60 samples, 4.82%)</title><rect x="431.4" y="691.0" width="56.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="434.4" y="702.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="434.3" y="675.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="437.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (56 samples, 4.49%)</title><rect x="435.2" y="675.0" width="53.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="438.2" y="686.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (15 samples, 1.20%)</title><rect x="444.7" y="659.0" width="14.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="447.7" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.24%)</title><rect x="452.3" y="643.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="455.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.24%)</title><rect x="452.3" y="627.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="455.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.24%)</title><rect x="452.3" y="611.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="455.3" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.16%)</title><rect x="453.2" y="595.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="456.2" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.16%)</title><rect x="455.1" y="643.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="458.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.08%)</title><rect x="457.0" y="643.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="460.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.08%)</title><rect x="457.0" y="627.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="460.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.08%)</title><rect x="457.9" y="643.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="460.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (11 samples, 0.88%)</title><rect x="458.9" y="659.0" width="10.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="461.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (9 samples, 0.72%)</title><rect x="460.8" y="643.0" width="8.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="463.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (9 samples, 0.72%)</title><rect x="460.8" y="627.0" width="8.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="463.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (9 samples, 0.72%)</title><rect x="460.8" y="611.0" width="8.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="463.8" y="622.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (9 samples, 0.72%)</title><rect x="460.8" y="595.0" width="8.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="463.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.08%)</title><rect x="469.3" y="659.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="472.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (7 samples, 0.56%)</title><rect x="470.3" y="659.0" width="6.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="473.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (7 samples, 0.56%)</title><rect x="470.3" y="643.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="473.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (7 samples, 0.56%)</title><rect x="470.3" y="627.0" width="6.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="473.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (7 samples, 0.56%)</title><rect x="470.3" y="611.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="473.3" y="622.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (3 samples, 0.24%)</title><rect x="474.0" y="595.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="477.0" y="606.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (3 samples, 0.24%)</title><rect x="474.0" y="579.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="477.0" y="590.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (3 samples, 0.24%)</title><rect x="474.0" y="563.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="477.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (7 samples, 0.56%)</title><rect x="476.9" y="659.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="479.9" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.56%)</title><rect x="476.9" y="643.0" width="6.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="479.9" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.56%)</title><rect x="476.9" y="627.0" width="6.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="479.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (5 samples, 0.40%)</title><rect x="483.5" y="659.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="486.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (5 samples, 0.40%)</title><rect x="483.5" y="643.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="486.5" y="654.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (3 samples, 0.24%)</title><rect x="485.4" y="627.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="488.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (4 samples, 0.32%)</title><rect x="488.3" y="723.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="491.3" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (11 samples, 0.88%)</title><rect x="492.0" y="739.0" width="10.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="495.0" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.08%)</title><rect x="493.0" y="723.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="496.0" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (9 samples, 0.72%)</title><rect x="493.9" y="723.0" width="8.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="496.9" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (9 samples, 0.72%)</title><rect x="493.9" y="707.0" width="8.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="496.9" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (9 samples, 0.72%)</title><rect x="493.9" y="691.0" width="8.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="496.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (9 samples, 0.72%)</title><rect x="493.9" y="675.0" width="8.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="496.9" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (353 samples, 28.33%)</title><rect x="502.5" y="835.0" width="334.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="505.5" y="846.0">com/linecorp/decaton/processor/runtime/Proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (65 samples, 5.22%)</title><rect x="505.3" y="819.0" width="61.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="508.3" y="830.0">com/li..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (65 samples, 5.22%)</title><rect x="505.3" y="803.0" width="61.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="508.3" y="814.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (62 samples, 4.98%)</title><rect x="508.1" y="787.0" width="58.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="511.1" y="798.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.32%)</title><rect x="509.1" y="771.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="512.1" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.32%)</title><rect x="509.1" y="755.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="512.1" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.32%)</title><rect x="509.1" y="739.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="512.1" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.32%)</title><rect x="509.1" y="723.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="512.1" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.32%)</title><rect x="512.9" y="771.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="515.9" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.32%)</title><rect x="512.9" y="755.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="515.9" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.32%)</title><rect x="512.9" y="739.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="515.9" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (4 samples, 0.32%)</title><rect x="512.9" y="723.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="515.9" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.08%)</title><rect x="515.7" y="707.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="518.7" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (53 samples, 4.25%)</title><rect x="516.7" y="771.0" width="50.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="519.7" y="782.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.remove (13 samples, 1.04%)</title><rect x="554.5" y="755.0" width="12.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="557.5" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.08%)</title><rect x="554.5" y="739.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="557.5" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (12 samples, 0.96%)</title><rect x="555.5" y="739.0" width="11.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="558.5" y="750.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.32%)</title><rect x="563.1" y="723.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="566.1" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.48%)</title><rect x="566.9" y="819.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="569.9" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.40%)</title><rect x="567.8" y="803.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="570.8" y="814.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.40%)</title><rect x="567.8" y="787.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="570.8" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (188 samples, 15.09%)</title><rect x="572.5" y="819.0" width="178.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="575.5" y="830.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (188 samples, 15.09%)</title><rect x="572.5" y="803.0" width="178.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="575.5" y="814.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.56%)</title><rect x="578.2" y="787.0" width="6.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="581.2" y="798.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.32%)</title><rect x="581.1" y="771.0" width="3.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="584.1" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (70 samples, 5.62%)</title><rect x="584.8" y="787.0" width="66.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="587.8" y="798.0">com/lin..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (53 samples, 4.25%)</title><rect x="594.3" y="771.0" width="50.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="597.3" y="782.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (50 samples, 4.01%)</title><rect x="597.2" y="755.0" width="47.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="600.2" y="766.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (29 samples, 2.33%)</title><rect x="605.7" y="739.0" width="27.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="608.7" y="750.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (29 samples, 2.33%)</title><rect x="605.7" y="723.0" width="27.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="608.7" y="734.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (29 samples, 2.33%)</title><rect x="605.7" y="707.0" width="27.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="608.7" y="718.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (11 samples, 0.88%)</title><rect x="617.0" y="691.0" width="10.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="620.0" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="617.0" y="675.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="620.0" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.08%)</title><rect x="617.0" y="659.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="620.0" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.08%)</title><rect x="618.0" y="675.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="621.0" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.24%)</title><rect x="618.9" y="675.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="621.9" y="686.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.08%)</title><rect x="618.9" y="659.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="621.9" y="670.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="619.9" y="659.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="622.9" y="670.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="620.8" y="659.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="623.8" y="670.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.08%)</title><rect x="621.8" y="675.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="624.8" y="686.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.40%)</title><rect x="622.7" y="675.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="625.7" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (4 samples, 0.32%)</title><rect x="623.7" y="659.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="626.7" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="623.7" y="643.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="626.7" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="623.7" y="627.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="626.7" y="638.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.08%)</title><rect x="623.7" y="611.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="626.7" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (2 samples, 0.16%)</title><rect x="624.6" y="643.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="627.6" y="654.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.08%)</title><rect x="626.5" y="643.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="629.5" y="654.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="627.5" y="691.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="630.5" y="702.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.40%)</title><rect x="628.4" y="691.0" width="4.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="631.4" y="702.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.40%)</title><rect x="633.1" y="739.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="636.1" y="750.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.32%)</title><rect x="637.9" y="739.0" width="3.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="640.9" y="750.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="641.7" y="739.0" width="0.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="644.7" y="750.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="642.6" y="739.0" width="1.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="645.6" y="750.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.08%)</title><rect x="644.5" y="771.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="647.5" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="644.5" y="755.0" width="1.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="647.5" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="644.5" y="739.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="647.5" y="750.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.16%)</title><rect x="645.5" y="771.0" width="1.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="648.5" y="782.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.32%)</title><rect x="647.4" y="771.0" width="3.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="650.4" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.16%)</title><rect x="651.1" y="787.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="654.1" y="798.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (11 samples, 0.88%)</title><rect x="653.0" y="787.0" width="10.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="656.0" y="798.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (2 samples, 0.16%)</title><rect x="653.0" y="771.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="656.0" y="782.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.16%)</title><rect x="653.0" y="755.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="656.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.08%)</title><rect x="654.0" y="739.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="657.0" y="750.0"></text>
</g>
<g>
<title>java/lang/Long.toString (9 samples, 0.72%)</title><rect x="654.9" y="771.0" width="8.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="657.9" y="782.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (9 samples, 0.72%)</title><rect x="654.9" y="755.0" width="8.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="657.9" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="662.5" y="739.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="665.5" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.08%)</title><rect x="662.5" y="723.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="665.5" y="734.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (92 samples, 7.38%)</title><rect x="663.5" y="787.0" width="87.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="666.5" y="798.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (89 samples, 7.14%)</title><rect x="666.3" y="771.0" width="84.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="669.3" y="782.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.40%)</title><rect x="666.3" y="755.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="669.3" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.40%)</title><rect x="666.3" y="739.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="669.3" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.40%)</title><rect x="666.3" y="723.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="669.3" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.40%)</title><rect x="666.3" y="707.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="669.3" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="671.0" y="755.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="674.0" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="671.0" y="739.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="674.0" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="671.0" y="723.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="674.0" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.08%)</title><rect x="671.0" y="707.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="674.0" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="671.0" y="691.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="674.0" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (83 samples, 6.66%)</title><rect x="672.0" y="755.0" width="78.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="675.0" y="766.0">java/util..</text>
</g>
<g>
<title>java/util/HashMap.put (78 samples, 6.26%)</title><rect x="676.7" y="739.0" width="73.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="679.7" y="750.0">java/uti..</text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.08%)</title><rect x="716.5" y="723.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="719.5" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (35 samples, 2.81%)</title><rect x="717.4" y="723.0" width="33.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="720.4" y="734.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (5 samples, 0.40%)</title><rect x="729.7" y="707.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="732.7" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (11 samples, 0.88%)</title><rect x="734.5" y="707.0" width="10.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="737.5" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="743.9" y="691.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="746.9" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="743.9" y="675.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="746.9" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="743.9" y="659.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="746.9" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="743.9" y="643.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="746.9" y="654.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="743.9" y="627.0" width="1.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="746.9" y="638.0"></text>
</g>
<g>
<title>vtable stub (6 samples, 0.48%)</title><rect x="744.9" y="707.0" width="5.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="747.9" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (66 samples, 5.30%)</title><rect x="750.6" y="819.0" width="62.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="753.6" y="830.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (65 samples, 5.22%)</title><rect x="751.5" y="803.0" width="61.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="754.5" y="814.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1166800801.process (37 samples, 2.97%)</title><rect x="753.4" y="787.0" width="35.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="756.4" y="798.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (37 samples, 2.97%)</title><rect x="753.4" y="771.0" width="35.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="756.4" y="782.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (31 samples, 2.49%)</title><rect x="754.4" y="755.0" width="29.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="757.4" y="766.0">co..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (11 samples, 0.88%)</title><rect x="768.6" y="739.0" width="10.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="771.6" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.24%)</title><rect x="769.5" y="723.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="772.5" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.16%)</title><rect x="770.5" y="707.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="773.5" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.16%)</title><rect x="770.5" y="691.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="773.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.16%)</title><rect x="770.5" y="675.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="773.5" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (7 samples, 0.56%)</title><rect x="772.4" y="723.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="775.4" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (3 samples, 0.24%)</title><rect x="779.0" y="739.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="782.0" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="780.9" y="723.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="783.9" y="734.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="780.9" y="707.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="783.9" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.08%)</title><rect x="781.8" y="739.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="784.8" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="782.8" y="739.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="785.8" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="782.8" y="723.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="785.8" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="782.8" y="707.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="785.8" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.08%)</title><rect x="782.8" y="691.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="785.8" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (5 samples, 0.40%)</title><rect x="783.7" y="755.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="786.7" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.40%)</title><rect x="783.7" y="739.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="786.7" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 0.40%)</title><rect x="783.7" y="723.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="786.7" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.40%)</title><rect x="783.7" y="707.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="786.7" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (5 samples, 0.40%)</title><rect x="783.7" y="691.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="786.7" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (5 samples, 0.40%)</title><rect x="788.5" y="787.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="791.5" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.24%)</title><rect x="793.2" y="787.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="796.2" y="798.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.24%)</title><rect x="793.2" y="771.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="796.2" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1016925085.linkToTargetMethod (3 samples, 0.24%)</title><rect x="796.0" y="787.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="799.0" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (3 samples, 0.24%)</title><rect x="796.0" y="771.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="799.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$284/1305070062.get$Lambda (3 samples, 0.24%)</title><rect x="796.0" y="755.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="799.0" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.16%)</title><rect x="798.9" y="787.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="801.9" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.16%)</title><rect x="798.9" y="771.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="801.9" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.48%)</title><rect x="800.8" y="787.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="803.8" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.48%)</title><rect x="800.8" y="771.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="803.8" y="782.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.16%)</title><rect x="800.8" y="755.0" width="1.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="803.8" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (4 samples, 0.32%)</title><rect x="802.7" y="755.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="805.7" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.16%)</title><rect x="806.5" y="787.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="809.5" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.08%)</title><rect x="807.4" y="771.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="810.4" y="782.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.08%)</title><rect x="807.4" y="755.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="810.4" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList.rangeCheck (1 samples, 0.08%)</title><rect x="807.4" y="739.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="810.4" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.32%)</title><rect x="808.3" y="787.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="811.3" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.08%)</title><rect x="811.2" y="771.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="814.2" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="811.2" y="755.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="814.2" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="811.2" y="739.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="814.2" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.08%)</title><rect x="811.2" y="723.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="814.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (1 samples, 0.08%)</title><rect x="812.1" y="787.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="815.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (25 samples, 2.01%)</title><rect x="813.1" y="819.0" width="23.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="816.1" y="830.0">j..</text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.56%)</title><rect x="818.8" y="803.0" width="6.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="821.8" y="814.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.48%)</title><rect x="819.7" y="787.0" width="5.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="822.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 0.88%)</title><rect x="825.4" y="803.0" width="10.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="828.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 0.88%)</title><rect x="825.4" y="787.0" width="10.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="828.4" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$288/174189501.accept (11 samples, 0.88%)</title><rect x="825.4" y="771.0" width="10.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="828.4" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$45 (11 samples, 0.88%)</title><rect x="825.4" y="755.0" width="10.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="828.4" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/1413666678.complete (11 samples, 0.88%)</title><rect x="825.4" y="739.0" width="10.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="828.4" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$5 (11 samples, 0.88%)</title><rect x="825.4" y="723.0" width="10.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="828.4" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/992532614.complete (11 samples, 0.88%)</title><rect x="825.4" y="707.0" width="10.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="828.4" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (11 samples, 0.88%)</title><rect x="825.4" y="691.0" width="10.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="828.4" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (11 samples, 0.88%)</title><rect x="825.4" y="675.0" width="10.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="828.4" y="686.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (11 samples, 0.88%)</title><rect x="825.4" y="659.0" width="10.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="828.4" y="670.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (11 samples, 0.88%)</title><rect x="825.4" y="643.0" width="10.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="828.4" y="654.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.40%)</title><rect x="829.2" y="627.0" width="4.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="832.2" y="638.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.40%)</title><rect x="829.2" y="611.0" width="4.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="832.2" y="622.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.16%)</title><rect x="833.9" y="627.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="836.9" y="638.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="835.8" y="803.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="838.8" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1016925085.linkToTargetMethod (1 samples, 0.08%)</title><rect x="836.8" y="835.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="839.8" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.08%)</title><rect x="836.8" y="819.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="839.8" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$288/174189501.get$Lambda (1 samples, 0.08%)</title><rect x="836.8" y="803.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="839.8" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="836.8" y="787.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="839.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (24 samples, 1.93%)</title><rect x="837.7" y="835.0" width="22.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="840.7" y="846.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.08%)</title><rect x="838.7" y="819.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="841.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (22 samples, 1.77%)</title><rect x="839.6" y="819.0" width="20.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="842.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (22 samples, 1.77%)</title><rect x="839.6" y="803.0" width="20.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="842.6" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$288/174189501.accept (22 samples, 1.77%)</title><rect x="839.6" y="787.0" width="20.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="842.6" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$45 (22 samples, 1.77%)</title><rect x="839.6" y="771.0" width="20.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="842.6" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/1413666678.complete (22 samples, 1.77%)</title><rect x="839.6" y="755.0" width="20.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="842.6" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$5 (22 samples, 1.77%)</title><rect x="839.6" y="739.0" width="20.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="842.6" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/992532614.complete (16 samples, 1.28%)</title><rect x="839.6" y="723.0" width="15.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="842.6" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (16 samples, 1.28%)</title><rect x="839.6" y="707.0" width="15.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="842.6" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (16 samples, 1.28%)</title><rect x="839.6" y="691.0" width="15.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="842.6" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (16 samples, 1.28%)</title><rect x="839.6" y="675.0" width="15.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="842.6" y="686.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (16 samples, 1.28%)</title><rect x="839.6" y="659.0" width="15.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="842.6" y="670.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.08%)</title><rect x="853.8" y="643.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="856.8" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.08%)</title><rect x="853.8" y="627.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="856.8" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$276/568514115.complete (6 samples, 0.48%)</title><rect x="854.8" y="723.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="857.8" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$null$70 (6 samples, 0.48%)</title><rect x="854.8" y="707.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="857.8" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.16%)</title><rect x="858.5" y="691.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="861.5" y="702.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.24%)</title><rect x="860.4" y="835.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="863.4" y="846.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="861.4" y="819.0" width="1.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="864.4" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (6 samples, 0.48%)</title><rect x="863.3" y="851.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="866.3" y="862.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.24%)</title><rect x="864.2" y="835.0" width="2.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="867.2" y="846.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.24%)</title><rect x="864.2" y="819.0" width="2.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="867.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.16%)</title><rect x="867.1" y="835.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="870.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 0.40%)</title><rect x="869.0" y="899.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="872.0" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.40%)</title><rect x="869.0" y="883.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="872.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.40%)</title><rect x="869.0" y="867.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="872.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.40%)</title><rect x="869.0" y="851.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="872.0" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/885525374.run (1 samples, 0.08%)</title><rect x="872.7" y="835.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="875.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (214 samples, 17.17%)</title><rect x="873.7" y="899.0" width="202.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="876.7" y="910.0">java/util/concurrent/Threa..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (214 samples, 17.17%)</title><rect x="873.7" y="883.0" width="202.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="876.7" y="894.0">java/util/concurrent/Linke..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (180 samples, 14.45%)</title><rect x="886.0" y="867.0" width="170.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="889.0" y="878.0">java/util/concurrent/l..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (10 samples, 0.80%)</title><rect x="896.4" y="851.0" width="9.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="899.4" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.80%)</title><rect x="896.4" y="835.0" width="9.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="899.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 0.80%)</title><rect x="896.4" y="819.0" width="9.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="899.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 0.80%)</title><rect x="896.4" y="803.0" width="9.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="899.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (2 samples, 0.16%)</title><rect x="905.9" y="851.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="908.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (2 samples, 0.16%)</title><rect x="905.9" y="835.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="908.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (157 samples, 12.60%)</title><rect x="907.8" y="851.0" width="148.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="910.8" y="862.0">java/util/concurren..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (156 samples, 12.52%)</title><rect x="908.7" y="835.0" width="147.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="911.7" y="846.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="914.4" y="819.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="917.4" y="830.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (4 samples, 0.32%)</title><rect x="915.4" y="819.0" width="3.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="918.4" y="830.0"></text>
</g>
<g>
<title>Unsafe_Park (138 samples, 11.08%)</title><rect x="919.1" y="819.0" width="130.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="922.1" y="830.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="922.0" y="803.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="925.0" y="814.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (23 samples, 1.85%)</title><rect x="922.9" y="803.0" width="21.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="925.9" y="814.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (9 samples, 0.72%)</title><rect x="928.6" y="787.0" width="8.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="931.6" y="798.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.24%)</title><rect x="930.5" y="771.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="933.5" y="782.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.16%)</title><rect x="931.5" y="755.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="934.5" y="766.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.16%)</title><rect x="933.4" y="771.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="936.4" y="782.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.16%)</title><rect x="935.2" y="771.0" width="1.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="938.2" y="782.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.16%)</title><rect x="937.1" y="787.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="940.1" y="798.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (6 samples, 0.48%)</title><rect x="939.0" y="787.0" width="5.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="942.0" y="798.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.16%)</title><rect x="944.7" y="803.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="947.7" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.08%)</title><rect x="946.6" y="803.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="949.6" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.24%)</title><rect x="947.6" y="803.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="950.6" y="814.0"></text>
</g>
<g>
<title>__lll_lock_wait (8 samples, 0.64%)</title><rect x="950.4" y="803.0" width="7.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="953.4" y="814.0"></text>
</g>
<g>
<title>__lll_unlock_wake (24 samples, 1.93%)</title><rect x="958.0" y="803.0" width="22.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="961.0" y="814.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (53 samples, 4.25%)</title><rect x="980.7" y="803.0" width="50.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="983.7" y="814.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.32%)</title><rect x="1030.9" y="803.0" width="3.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1033.9" y="814.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.24%)</title><rect x="1034.7" y="803.0" width="2.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1037.7" y="814.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (8 samples, 0.64%)</title><rect x="1037.5" y="803.0" width="7.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1040.5" y="814.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.08%)</title><rect x="1045.1" y="803.0" width="1.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1048.1" y="814.0"></text>
</g>
<g>
<title>_init (1 samples, 0.08%)</title><rect x="1046.1" y="803.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1049.1" y="814.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.24%)</title><rect x="1047.0" y="803.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1050.0" y="814.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.32%)</title><rect x="1049.8" y="819.0" width="3.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1052.8" y="830.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.24%)</title><rect x="1053.6" y="819.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1056.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (21 samples, 1.69%)</title><rect x="1056.5" y="867.0" width="19.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1059.5" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (21 samples, 1.69%)</title><rect x="1056.5" y="851.0" width="19.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1059.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (21 samples, 1.69%)</title><rect x="1056.5" y="835.0" width="19.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1059.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (21 samples, 1.69%)</title><rect x="1056.5" y="819.0" width="19.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1059.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.08%)</title><rect x="1076.4" y="947.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1079.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.08%)</title><rect x="1076.4" y="931.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1079.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="1076.4" y="915.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1079.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.08%)</title><rect x="1076.4" y="899.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1079.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.08%)</title><rect x="1076.4" y="883.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1079.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.08%)</title><rect x="1076.4" y="867.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1079.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.08%)</title><rect x="1076.4" y="851.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1079.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.08%)</title><rect x="1076.4" y="835.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1079.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.08%)</title><rect x="1076.4" y="819.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1079.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.08%)</title><rect x="1076.4" y="803.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1079.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.verifyIncrementalFetchResponsePartitions (1 samples, 0.08%)</title><rect x="1076.4" y="787.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1079.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.findMissing (1 samples, 0.08%)</title><rect x="1076.4" y="771.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1079.4" y="782.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeySet.contains (1 samples, 0.08%)</title><rect x="1076.4" y="755.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1079.4" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.08%)</title><rect x="1076.4" y="739.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1079.4" y="750.0"></text>
</g>
<g>
<title>start_thread (119 samples, 9.55%)</title><rect x="1077.3" y="947.0" width="112.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1080.3" y="958.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (119 samples, 9.55%)</title><rect x="1077.3" y="931.0" width="112.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1080.3" y="942.0">java_start(Thr..</text>
</g>
<g>
<title>GangWorker::loop() (30 samples, 2.41%)</title><rect x="1077.3" y="915.0" width="28.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1080.3" y="926.0">Ga..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (10 samples, 0.80%)</title><rect x="1077.3" y="899.0" width="9.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1080.3" y="910.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (10 samples, 0.80%)</title><rect x="1077.3" y="883.0" width="9.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1080.3" y="894.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.16%)</title><rect x="1077.3" y="867.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1080.3" y="878.0"></text>
</g>
<g>
<title>SpinPause (8 samples, 0.64%)</title><rect x="1079.2" y="867.0" width="7.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1082.2" y="878.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (20 samples, 1.61%)</title><rect x="1086.8" y="899.0" width="18.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1089.8" y="910.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.56%)</title><rect x="1086.8" y="883.0" width="6.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1089.8" y="894.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.16%)</title><rect x="1087.7" y="867.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1090.7" y="878.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.32%)</title><rect x="1089.6" y="867.0" width="3.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1092.6" y="878.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (6 samples, 0.48%)</title><rect x="1093.4" y="883.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1096.4" y="894.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.08%)</title><rect x="1093.4" y="867.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1096.4" y="878.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.08%)</title><rect x="1093.4" y="851.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1096.4" y="862.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.08%)</title><rect x="1093.4" y="835.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1096.4" y="846.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.08%)</title><rect x="1093.4" y="819.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1096.4" y="830.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.40%)</title><rect x="1094.3" y="867.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1097.3" y="878.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (5 samples, 0.40%)</title><rect x="1094.3" y="851.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1097.3" y="862.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (7 samples, 0.56%)</title><rect x="1099.1" y="883.0" width="6.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1102.1" y="894.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (7 samples, 0.56%)</title><rect x="1099.1" y="867.0" width="6.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1102.1" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (6 samples, 0.48%)</title><rect x="1099.1" y="851.0" width="5.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1102.1" y="862.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (6 samples, 0.48%)</title><rect x="1099.1" y="835.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1102.1" y="846.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (6 samples, 0.48%)</title><rect x="1099.1" y="819.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1102.1" y="830.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (6 samples, 0.48%)</title><rect x="1099.1" y="803.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1102.1" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::heap() (1 samples, 0.08%)</title><rect x="1101.9" y="787.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1104.9" y="798.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.08%)</title><rect x="1102.9" y="787.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1105.9" y="798.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.08%)</title><rect x="1103.8" y="787.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1106.8" y="798.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.08%)</title><rect x="1103.8" y="771.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1106.8" y="782.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.08%)</title><rect x="1104.8" y="851.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1107.8" y="862.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.08%)</title><rect x="1104.8" y="835.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1107.8" y="846.0"></text>
</g>
<g>
<title>JavaThread::run() (86 samples, 6.90%)</title><rect x="1105.7" y="915.0" width="81.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1108.7" y="926.0">JavaThrea..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (86 samples, 6.90%)</title><rect x="1105.7" y="899.0" width="81.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1108.7" y="910.0">JavaThrea..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (86 samples, 6.90%)</title><rect x="1105.7" y="883.0" width="81.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1108.7" y="894.0">CompileBr..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (84 samples, 6.74%)</title><rect x="1105.7" y="867.0" width="79.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1108.7" y="878.0">CompileBr..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (82 samples, 6.58%)</title><rect x="1105.7" y="851.0" width="77.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1108.7" y="862.0">C2Compile..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (82 samples, 6.58%)</title><rect x="1105.7" y="835.0" width="77.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1108.7" y="846.0">Compile::..</text>
</g>
<g>
<title>Compile::Code_Gen() (32 samples, 2.57%)</title><rect x="1105.7" y="819.0" width="30.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1108.7" y="830.0">Co..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.08%)</title><rect x="1105.7" y="803.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1108.7" y="814.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.08%)</title><rect x="1105.7" y="787.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1108.7" y="798.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.08%)</title><rect x="1105.7" y="771.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1108.7" y="782.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.08%)</title><rect x="1106.7" y="803.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1109.7" y="814.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.24%)</title><rect x="1107.6" y="803.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1110.6" y="814.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.24%)</title><rect x="1107.6" y="787.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1110.6" y="798.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.24%)</title><rect x="1107.6" y="771.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1110.6" y="782.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="1107.6" y="755.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1110.6" y="766.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="1107.6" y="739.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1110.6" y="750.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.08%)</title><rect x="1107.6" y="723.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1110.6" y="734.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.08%)</title><rect x="1107.6" y="707.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1110.6" y="718.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.16%)</title><rect x="1108.6" y="755.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1111.6" y="766.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (2 samples, 0.16%)</title><rect x="1108.6" y="739.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1111.6" y="750.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.08%)</title><rect x="1109.5" y="723.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1112.5" y="734.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.08%)</title><rect x="1109.5" y="707.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1112.5" y="718.0"></text>
</g>
<g>
<title>State::MachOperGenerator(int, Compile*) (1 samples, 0.08%)</title><rect x="1109.5" y="691.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1112.5" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.08%)</title><rect x="1110.4" y="803.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1113.4" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.08%)</title><rect x="1110.4" y="787.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1113.4" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.32%)</title><rect x="1111.4" y="803.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1114.4" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.32%)</title><rect x="1111.4" y="787.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1114.4" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (4 samples, 0.32%)</title><rect x="1111.4" y="771.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1114.4" y="782.0"></text>
</g>
<g>
<title>Node::needs_anti_dependence_check() const (1 samples, 0.08%)</title><rect x="1111.4" y="755.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1114.4" y="766.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.08%)</title><rect x="1112.3" y="755.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1115.3" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.08%)</title><rect x="1113.3" y="755.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1116.3" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.08%)</title><rect x="1114.2" y="755.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1117.2" y="766.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.08%)</title><rect x="1114.2" y="739.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1117.2" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (22 samples, 1.77%)</title><rect x="1115.2" y="803.0" width="20.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1118.2" y="814.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.08%)</title><rect x="1115.2" y="787.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1118.2" y="798.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.08%)</title><rect x="1115.2" y="771.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1118.2" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.16%)</title><rect x="1116.1" y="787.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1119.1" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.08%)</title><rect x="1117.1" y="771.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1120.1" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1117.1" y="755.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1120.1" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 0.32%)</title><rect x="1118.0" y="787.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1121.0" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.08%)</title><rect x="1120.9" y="771.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1123.9" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 0.16%)</title><rect x="1121.8" y="787.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1124.8" y="798.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.08%)</title><rect x="1122.8" y="771.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1125.8" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.08%)</title><rect x="1123.7" y="787.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1126.7" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.08%)</title><rect x="1123.7" y="771.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1126.7" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.24%)</title><rect x="1124.7" y="787.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1127.7" y="798.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.08%)</title><rect x="1126.5" y="771.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1129.5" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.08%)</title><rect x="1127.5" y="787.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.5" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.24%)</title><rect x="1128.4" y="787.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1131.4" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.08%)</title><rect x="1130.3" y="771.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1133.3" y="782.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.08%)</title><rect x="1130.3" y="755.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1133.3" y="766.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.08%)</title><rect x="1131.3" y="787.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1134.3" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.08%)</title><rect x="1132.2" y="787.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1135.2" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1132.2" y="771.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1135.2" y="782.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.16%)</title><rect x="1133.2" y="787.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.2" y="798.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.16%)</title><rect x="1133.2" y="771.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1136.2" y="782.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1135.1" y="787.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1138.1" y="798.0"></text>
</g>
<g>
<title>Compile::Init(int) (1 samples, 0.08%)</title><rect x="1136.0" y="819.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1139.0" y="830.0"></text>
</g>
<g>
<title>Compile::Optimize() (40 samples, 3.21%)</title><rect x="1137.0" y="819.0" width="37.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1140.0" y="830.0">Com..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.08%)</title><rect x="1137.0" y="803.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.0" y="814.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.08%)</title><rect x="1137.0" y="787.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (4 samples, 0.32%)</title><rect x="1137.9" y="803.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.9" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (4 samples, 0.32%)</title><rect x="1137.9" y="787.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1140.9" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1138.9" y="771.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1141.9" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.08%)</title><rect x="1138.9" y="755.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1141.9" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1139.8" y="771.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.8" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1139.8" y="755.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.8" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1139.8" y="739.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.8" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1139.8" y="723.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.8" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1139.8" y="707.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.8" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1139.8" y="691.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1142.8" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1139.8" y="675.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1142.8" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="1139.8" y="659.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.8" y="670.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.08%)</title><rect x="1140.8" y="771.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.8" y="782.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.08%)</title><rect x="1141.7" y="803.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.7" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (29 samples, 2.33%)</title><rect x="1142.6" y="803.0" width="27.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1145.6" y="814.0">P..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1143.6" y="787.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1146.6" y="798.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1143.6" y="771.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.6" y="782.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1143.6" y="755.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.6" y="766.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1143.6" y="739.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.6" y="750.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1143.6" y="723.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.6" y="734.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1143.6" y="707.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1146.6" y="718.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1143.6" y="691.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.6" y="702.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1143.6" y="675.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1146.6" y="686.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1143.6" y="659.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1146.6" y="670.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1143.6" y="643.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1146.6" y="654.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1143.6" y="627.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.6" y="638.0"></text>
</g>
<g>
<title>IdealLoopTree::compute_exact_trip_count(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="1143.6" y="611.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.6" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.08%)</title><rect x="1144.5" y="787.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.5" y="798.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.08%)</title><rect x="1144.5" y="771.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1147.5" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (24 samples, 1.93%)</title><rect x="1145.5" y="787.0" width="22.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.5" y="798.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (24 samples, 1.93%)</title><rect x="1145.5" y="771.0" width="22.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.5" y="782.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.16%)</title><rect x="1148.3" y="755.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.3" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (19 samples, 1.52%)</title><rect x="1150.2" y="755.0" width="18.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.2" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1166.3" y="739.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.3" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1167.3" y="739.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.3" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.08%)</title><rect x="1168.2" y="787.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.2" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.08%)</title><rect x="1168.2" y="771.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.2" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.08%)</title><rect x="1169.2" y="787.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.2" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.08%)</title><rect x="1169.2" y="771.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.2" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.08%)</title><rect x="1169.2" y="755.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.2" y="766.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.08%)</title><rect x="1169.2" y="739.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.2" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.40%)</title><rect x="1170.1" y="803.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.1" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 0.40%)</title><rect x="1170.1" y="787.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.1" y="798.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1170.1" y="771.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.1" y="782.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (2 samples, 0.16%)</title><rect x="1171.1" y="771.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.1" y="782.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1171.1" y="755.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.1" y="766.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1171.1" y="739.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.1" y="750.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1171.1" y="723.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.1" y="734.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1171.1" y="707.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.1" y="718.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1172.0" y="755.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.0" y="766.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.08%)</title><rect x="1172.0" y="739.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.0" y="750.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.08%)</title><rect x="1172.0" y="723.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.0" y="734.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1173.0" y="771.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.0" y="782.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1173.9" y="771.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.9" y="782.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1173.9" y="755.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.9" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.56%)</title><rect x="1174.8" y="819.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.8" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.56%)</title><rect x="1174.8" y="803.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.56%)</title><rect x="1174.8" y="787.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.56%)</title><rect x="1174.8" y="771.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.56%)</title><rect x="1174.8" y="755.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.48%)</title><rect x="1174.8" y="739.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.8" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.32%)</title><rect x="1174.8" y="723.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.8" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.32%)</title><rect x="1174.8" y="707.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.32%)</title><rect x="1174.8" y="691.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.32%)</title><rect x="1174.8" y="675.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.32%)</title><rect x="1174.8" y="659.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.32%)</title><rect x="1174.8" y="643.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.8" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.24%)</title><rect x="1174.8" y="627.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.8" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.24%)</title><rect x="1174.8" y="611.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.8" y="622.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.08%)</title><rect x="1174.8" y="595.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.8" y="606.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.08%)</title><rect x="1174.8" y="579.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.8" y="590.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.08%)</title><rect x="1174.8" y="563.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.8" y="574.0"></text>
</g>
<g>
<title>ReplacedNodes::clone() (1 samples, 0.08%)</title><rect x="1174.8" y="547.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.8" y="558.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="1174.8" y="531.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1175.8" y="595.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1175.8" y="579.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1175.8" y="563.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1175.8" y="547.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.8" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1175.8" y="531.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.8" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1175.8" y="515.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1175.8" y="499.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1175.8" y="483.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1175.8" y="467.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1175.8" y="451.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.8" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1175.8" y="435.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.8" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1175.8" y="419.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1175.8" y="403.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1175.8" y="387.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1175.8" y="371.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1175.8" y="355.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.8" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1175.8" y="339.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.8" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1175.8" y="323.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.8" y="334.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.08%)</title><rect x="1175.8" y="307.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1176.7" y="547.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1176.7" y="531.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.7" y="542.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.08%)</title><rect x="1176.7" y="515.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.7" y="526.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1176.7" y="499.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.7" y="510.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.7" y="627.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.7" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.7" y="611.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.7" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.7" y="595.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.7" y="579.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.7" y="563.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.7" y="547.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.7" y="531.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.7" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.7" y="515.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.7" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.7" y="499.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.7" y="483.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.7" y="467.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.7" y="451.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.7" y="435.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.7" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.7" y="419.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.7" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.7" y="403.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.7" y="387.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.7" y="371.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.7" y="355.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.7" y="339.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.7" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.7" y="323.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.7" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.7" y="307.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.7" y="291.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.7" y="275.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.7" y="259.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1177.7" y="243.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.7" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.7" y="227.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.7" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1177.7" y="211.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1177.7" y="195.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1177.7" y="179.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.7" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1177.7" y="163.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1177.7" y="147.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.7" y="158.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1177.7" y="131.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.7" y="142.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1177.7" y="115.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.7" y="126.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.08%)</title><rect x="1177.7" y="99.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.7" y="110.0"></text>
</g>
<g>
<title>StoreNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1177.7" y="83.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.7" y="94.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1177.7" y="67.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.7" y="78.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1177.7" y="51.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.7" y="62.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.08%)</title><rect x="1177.7" y="35.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.7" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.6" y="723.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.6" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.6" y="707.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.6" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1178.6" y="691.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1178.6" y="675.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1178.6" y="659.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1178.6" y="643.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1178.6" y="627.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.6" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.6" y="611.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.6" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1178.6" y="595.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1178.6" y="579.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1178.6" y="563.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1178.6" y="547.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1178.6" y="531.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.6" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.6" y="515.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.6" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1178.6" y="499.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1178.6" y="483.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1178.6" y="467.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1178.6" y="451.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1178.6" y="435.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.6" y="446.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1178.6" y="419.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.6" y="430.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_call(JVMState*, ciMethod*, ciMethod*, bool) (1 samples, 0.08%)</title><rect x="1178.6" y="403.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.6" y="414.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_inline(JVMState*, ciMethod*, ciMethod*, bool&amp;) (1 samples, 0.08%)</title><rect x="1178.6" y="387.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.6" y="398.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1178.6" y="371.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.6" y="382.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1178.6" y="355.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.6" y="366.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1178.6" y="339.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.6" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1178.6" y="323.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.6" y="334.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1178.6" y="307.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1181.6" y="318.0"></text>
</g>
<g>
<title>ciBytecodeStream::has_appendix() (1 samples, 0.08%)</title><rect x="1179.6" y="723.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.08%)</title><rect x="1180.5" y="739.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.5" y="750.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.08%)</title><rect x="1180.5" y="723.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.5" y="734.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.08%)</title><rect x="1180.5" y="707.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.5" y="718.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.08%)</title><rect x="1180.5" y="691.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.5" y="702.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.08%)</title><rect x="1181.5" y="819.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.5" y="830.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1181.5" y="803.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.5" y="814.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.08%)</title><rect x="1182.4" y="819.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.4" y="830.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.08%)</title><rect x="1182.4" y="803.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.4" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::add_dependent_nmethod(nmethod*) (1 samples, 0.08%)</title><rect x="1182.4" y="787.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.4" y="798.0"></text>
</g>
<g>
<title>CompileTask::print_compilation_impl(outputStream*, Method*, int, int, bool, int, bool, char const*, bool) (1 samples, 0.08%)</title><rect x="1183.4" y="851.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.4" y="862.0"></text>
</g>
<g>
<title>Method::print_short_name(outputStream*) (1 samples, 0.08%)</title><rect x="1183.4" y="835.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.4" y="846.0"></text>
</g>
<g>
<title>Symbol::print_symbol_on(outputStream*) const (1 samples, 0.08%)</title><rect x="1183.4" y="819.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.4" y="830.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1184.3" y="851.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.3" y="862.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.08%)</title><rect x="1184.3" y="835.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.3" y="846.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.08%)</title><rect x="1184.3" y="819.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.3" y="830.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.08%)</title><rect x="1184.3" y="803.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.3" y="814.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.08%)</title><rect x="1184.3" y="787.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.3" y="798.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1184.3" y="771.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.3" y="782.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.08%)</title><rect x="1184.3" y="755.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.3" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.08%)</title><rect x="1184.3" y="739.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.3" y="750.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.08%)</title><rect x="1184.3" y="723.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.3" y="734.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.08%)</title><rect x="1184.3" y="707.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.3" y="718.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.08%)</title><rect x="1184.3" y="691.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.3" y="702.0"></text>
</g>
<g>
<title>CompileQueue::get() (2 samples, 0.16%)</title><rect x="1185.3" y="867.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.3" y="878.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (2 samples, 0.16%)</title><rect x="1185.3" y="851.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.3" y="862.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (2 samples, 0.16%)</title><rect x="1185.3" y="835.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.3" y="846.0"></text>
</g>
<g>
<title>CodeCache::next_nmethod(CodeBlob*) (1 samples, 0.08%)</title><rect x="1185.3" y="819.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.3" y="830.0"></text>
</g>
<g>
<title>CodeHeap::next_free(HeapBlock*) const (1 samples, 0.08%)</title><rect x="1185.3" y="803.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.3" y="814.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.08%)</title><rect x="1186.2" y="819.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.2" y="830.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.24%)</title><rect x="1187.2" y="915.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.2" y="926.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.24%)</title><rect x="1187.2" y="899.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.2" y="910.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (3 samples, 0.24%)</title><rect x="1187.2" y="883.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.2" y="894.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (3 samples, 0.24%)</title><rect x="1187.2" y="867.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.2" y="878.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (3 samples, 0.24%)</title><rect x="1187.2" y="851.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.2" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (3 samples, 0.24%)</title><rect x="1187.2" y="835.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.2" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.08%)</title><rect x="1187.2" y="819.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.2" y="830.0"></text>
</g>
<g>
<title>G1RemSet::prepare_for_oops_into_collection_set_do() (1 samples, 0.08%)</title><rect x="1187.2" y="803.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.2" y="814.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::concatenate_logs() (1 samples, 0.08%)</title><rect x="1187.2" y="787.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.2" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (2 samples, 0.16%)</title><rect x="1188.1" y="819.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.1" y="830.0"></text>
</g>
<g>
<title>HeapRegion::hr_clear(bool, bool, bool) (1 samples, 0.08%)</title><rect x="1188.1" y="803.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.1" y="814.0"></text>
</g>
<g>
<title>G1BlockOffsetArray::resize(unsigned long) (1 samples, 0.08%)</title><rect x="1188.1" y="787.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.1" y="798.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (1 samples, 0.08%)</title><rect x="1189.1" y="803.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1192.1" y="814.0"></text>
</g>
</g>
</svg>
