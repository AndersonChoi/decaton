<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1222" onload="init(evt)" viewBox="0 0 1200 1222" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1205"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1205"> </text>
<g id="frames">
<g>
<title>all (365 samples, 100.00%)</title><rect x="10.0" y="1171.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1182.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.27%)</title><rect x="10.0" y="1155.0" width="3.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (25 samples, 6.85%)</title><rect x="13.2" y="1155.0" width="80.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.2" y="1166.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (25 samples, 6.85%)</title><rect x="13.2" y="1139.0" width="80.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.2" y="1150.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.27%)</title><rect x="13.2" y="1123.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.2" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.27%)</title><rect x="13.2" y="1107.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="16.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (9 samples, 2.47%)</title><rect x="16.5" y="1123.0" width="29.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.5" y="1134.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1988987165.accept (7 samples, 1.92%)</title><rect x="16.5" y="1107.0" width="22.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.5" y="1118.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$71 (7 samples, 1.92%)</title><rect x="16.5" y="1091.0" width="22.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.5" y="1102.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (2 samples, 0.55%)</title><rect x="22.9" y="1075.0" width="6.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="25.9" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (2 samples, 0.55%)</title><rect x="22.9" y="1059.0" width="6.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="25.9" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (2 samples, 0.55%)</title><rect x="22.9" y="1043.0" width="6.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.9" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 0.55%)</title><rect x="22.9" y="1027.0" width="6.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="25.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.55%)</title><rect x="22.9" y="1011.0" width="6.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.9" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 0.82%)</title><rect x="29.4" y="1075.0" width="9.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="32.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.82%)</title><rect x="29.4" y="1059.0" width="9.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="32.4" y="1070.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.27%)</title><rect x="35.9" y="1043.0" width="3.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="38.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.55%)</title><rect x="39.1" y="1107.0" width="6.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="42.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 0.55%)</title><rect x="39.1" y="1091.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="42.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.55%)</title><rect x="39.1" y="1075.0" width="6.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="42.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.55%)</title><rect x="39.1" y="1059.0" width="6.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="42.1" y="1070.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.27%)</title><rect x="42.3" y="1043.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="45.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (15 samples, 4.11%)</title><rect x="45.6" y="1123.0" width="48.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="48.6" y="1134.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (15 samples, 4.11%)</title><rect x="45.6" y="1107.0" width="48.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="48.6" y="1118.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (12 samples, 3.29%)</title><rect x="45.6" y="1091.0" width="38.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="48.6" y="1102.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (7 samples, 1.92%)</title><rect x="45.6" y="1075.0" width="22.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="48.6" y="1086.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (7 samples, 1.92%)</title><rect x="45.6" y="1059.0" width="22.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="48.6" y="1070.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 1.10%)</title><rect x="45.6" y="1043.0" width="12.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="48.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (2 samples, 0.55%)</title><rect x="45.6" y="1027.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="48.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.27%)</title><rect x="45.6" y="1011.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="48.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/ResponseHeader.parse (1 samples, 0.27%)</title><rect x="45.6" y="995.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="48.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/ResponseHeaderData.&lt;init&gt; (1 samples, 0.27%)</title><rect x="45.6" y="979.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="48.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/ResponseHeaderData.read (1 samples, 0.27%)</title><rect x="45.6" y="963.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="48.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ByteBufferAccessor.readUnsignedVarint (1 samples, 0.27%)</title><rect x="45.6" y="947.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="48.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/ByteUtils.readUnsignedVarint (1 samples, 0.27%)</title><rect x="45.6" y="931.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="48.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.27%)</title><rect x="48.8" y="1011.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.27%)</title><rect x="48.8" y="995.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="51.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getOrElse (1 samples, 0.27%)</title><rect x="48.8" y="979.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="51.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.hasField (1 samples, 0.27%)</title><rect x="48.8" y="963.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="51.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.27%)</title><rect x="48.8" y="947.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="51.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.55%)</title><rect x="52.0" y="1027.0" width="6.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="55.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.27%)</title><rect x="52.0" y="1011.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="55.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.27%)</title><rect x="52.0" y="995.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="55.0" y="1006.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.27%)</title><rect x="52.0" y="979.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="55.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.27%)</title><rect x="55.3" y="1011.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="58.3" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.27%)</title><rect x="55.3" y="995.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="58.3" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.27%)</title><rect x="55.3" y="979.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="58.3" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.27%)</title><rect x="55.3" y="963.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="58.3" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.27%)</title><rect x="55.3" y="947.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="58.3" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.27%)</title><rect x="55.3" y="931.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="58.3" y="942.0"></text>
</g>
<g>
<title>__GI_epoll_wait (1 samples, 0.27%)</title><rect x="55.3" y="915.0" width="3.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="58.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.27%)</title><rect x="58.5" y="1043.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="61.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.27%)</title><rect x="58.5" y="1027.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="61.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.27%)</title><rect x="58.5" y="1011.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="61.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.27%)</title><rect x="58.5" y="995.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="61.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture$1.onSuccess (1 samples, 0.27%)</title><rect x="58.5" y="979.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="61.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$CoordinatorResponseHandler.onSuccess (1 samples, 0.27%)</title><rect x="58.5" y="963.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="61.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$CoordinatorResponseHandler.onSuccess (1 samples, 0.27%)</title><rect x="58.5" y="947.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="61.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator$OffsetCommitResponseHandler.handle (1 samples, 0.27%)</title><rect x="58.5" y="931.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="61.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator$OffsetCommitResponseHandler.handle (1 samples, 0.27%)</title><rect x="58.5" y="915.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="61.5" y="926.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.27%)</title><rect x="58.5" y="899.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="61.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.55%)</title><rect x="61.7" y="1043.0" width="6.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="64.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.55%)</title><rect x="61.7" y="1027.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="64.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.55%)</title><rect x="61.7" y="1011.0" width="6.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="64.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.55%)</title><rect x="61.7" y="995.0" width="6.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="64.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (2 samples, 0.55%)</title><rect x="61.7" y="979.0" width="6.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="64.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (2 samples, 0.55%)</title><rect x="61.7" y="963.0" width="6.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="64.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.27%)</title><rect x="61.7" y="947.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="64.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.27%)</title><rect x="65.0" y="947.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="68.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.sizeOf (1 samples, 0.27%)</title><rect x="65.0" y="931.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="68.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.sizeOf (1 samples, 0.27%)</title><rect x="65.0" y="915.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="68.0" y="926.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.27%)</title><rect x="65.0" y="899.0" width="3.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="68.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 1.10%)</title><rect x="68.2" y="1075.0" width="12.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="71.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.10%)</title><rect x="68.2" y="1059.0" width="12.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="71.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 0.82%)</title><rect x="71.4" y="1043.0" width="9.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="74.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 0.82%)</title><rect x="71.4" y="1027.0" width="9.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="74.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (3 samples, 0.82%)</title><rect x="71.4" y="1011.0" width="9.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="74.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (3 samples, 0.82%)</title><rect x="71.4" y="995.0" width="9.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="74.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (3 samples, 0.82%)</title><rect x="71.4" y="979.0" width="9.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="74.4" y="990.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 0.82%)</title><rect x="71.4" y="963.0" width="9.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="74.4" y="974.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (3 samples, 0.82%)</title><rect x="71.4" y="947.0" width="9.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="74.4" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (3 samples, 0.82%)</title><rect x="71.4" y="931.0" width="9.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="74.4" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (3 samples, 0.82%)</title><rect x="71.4" y="915.0" width="9.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="74.4" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (3 samples, 0.82%)</title><rect x="71.4" y="899.0" width="9.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="74.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.27%)</title><rect x="81.1" y="1075.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="84.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.27%)</title><rect x="81.1" y="1059.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="84.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.27%)</title><rect x="81.1" y="1043.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="84.1" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.27%)</title><rect x="81.1" y="1027.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="84.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.27%)</title><rect x="81.1" y="1011.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="84.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.55%)</title><rect x="84.4" y="1091.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="87.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.55%)</title><rect x="84.4" y="1075.0" width="6.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="87.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.55%)</title><rect x="84.4" y="1059.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="87.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.27%)</title><rect x="84.4" y="1043.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="87.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.27%)</title><rect x="84.4" y="1027.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="87.4" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.27%)</title><rect x="84.4" y="1011.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="87.4" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.27%)</title><rect x="84.4" y="995.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="87.4" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.27%)</title><rect x="84.4" y="979.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="87.4" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.27%)</title><rect x="84.4" y="963.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="87.4" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.27%)</title><rect x="84.4" y="947.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="87.4" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.27%)</title><rect x="84.4" y="931.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="87.4" y="942.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$236/96251524.get (1 samples, 0.27%)</title><rect x="84.4" y="915.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="87.4" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.27%)</title><rect x="84.4" y="899.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="87.4" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.27%)</title><rect x="84.4" y="883.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="87.4" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.27%)</title><rect x="84.4" y="867.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="87.4" y="878.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_region_work(MemRegion) (1 samples, 0.27%)</title><rect x="84.4" y="851.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="87.4" y="862.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::invalidate(MemRegion, bool) (1 samples, 0.27%)</title><rect x="84.4" y="835.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="87.4" y="846.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.27%)</title><rect x="84.4" y="819.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="87.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.27%)</title><rect x="87.6" y="1043.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="90.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.27%)</title><rect x="90.8" y="1091.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="93.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.27%)</title><rect x="90.8" y="1075.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="93.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.27%)</title><rect x="90.8" y="1059.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="93.8" y="1070.0"></text>
</g>
<g>
<title>java/lang/Thread.run (218 samples, 59.73%)</title><rect x="94.1" y="1155.0" width="704.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="97.1" y="1166.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (218 samples, 59.73%)</title><rect x="94.1" y="1139.0" width="704.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="97.1" y="1150.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (218 samples, 59.73%)</title><rect x="94.1" y="1123.0" width="704.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="97.1" y="1134.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/63811513.run (200 samples, 54.79%)</title><rect x="97.3" y="1107.0" width="646.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="100.3" y="1118.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/63811513.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (200 samples, 54.79%)</title><rect x="97.3" y="1091.0" width="646.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="100.3" y="1102.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (200 samples, 54.79%)</title><rect x="97.3" y="1075.0" width="646.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="100.3" y="1086.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (197 samples, 53.97%)</title><rect x="97.3" y="1059.0" width="636.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="100.3" y="1070.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (1 samples, 0.27%)</title><rect x="107.0" y="1043.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="110.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.27%)</title><rect x="107.0" y="1027.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="110.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$197/1458235214.get (1 samples, 0.27%)</title><rect x="107.0" y="1011.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="110.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.27%)</title><rect x="107.0" y="995.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="110.0" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.27%)</title><rect x="107.0" y="979.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="110.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (32 samples, 8.77%)</title><rect x="110.2" y="1043.0" width="103.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="113.2" y="1054.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (32 samples, 8.77%)</title><rect x="110.2" y="1027.0" width="103.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="113.2" y="1038.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (32 samples, 8.77%)</title><rect x="110.2" y="1011.0" width="103.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="113.2" y="1022.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (32 samples, 8.77%)</title><rect x="110.2" y="995.0" width="103.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="113.2" y="1006.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (32 samples, 8.77%)</title><rect x="110.2" y="979.0" width="103.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="113.2" y="990.0">com/linecorp..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (32 samples, 8.77%)</title><rect x="110.2" y="963.0" width="103.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="113.2" y="974.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (11 samples, 3.01%)</title><rect x="110.2" y="947.0" width="35.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="113.2" y="958.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 0.55%)</title><rect x="123.2" y="931.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="126.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 0.55%)</title><rect x="123.2" y="915.0" width="6.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="126.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.55%)</title><rect x="123.2" y="899.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="126.2" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.55%)</title><rect x="123.2" y="883.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="126.2" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.55%)</title><rect x="123.2" y="867.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="126.2" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.55%)</title><rect x="123.2" y="851.0" width="6.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="126.2" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.55%)</title><rect x="123.2" y="835.0" width="6.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="126.2" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (5 samples, 1.37%)</title><rect x="129.6" y="931.0" width="16.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="132.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 0.55%)</title><rect x="139.3" y="915.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="142.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.55%)</title><rect x="139.3" y="899.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="142.3" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.27%)</title><rect x="139.3" y="883.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="142.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.27%)</title><rect x="142.5" y="883.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="145.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (18 samples, 4.93%)</title><rect x="145.8" y="947.0" width="58.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="148.8" y="958.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.27%)</title><rect x="149.0" y="931.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="152.0" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.27%)</title><rect x="152.2" y="931.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="155.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.27%)</title><rect x="152.2" y="915.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="155.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.27%)</title><rect x="155.5" y="931.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="158.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.55%)</title><rect x="158.7" y="931.0" width="6.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="161.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.27%)</title><rect x="161.9" y="915.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="164.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (12 samples, 3.29%)</title><rect x="165.2" y="931.0" width="38.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="168.2" y="942.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.10%)</title><rect x="165.2" y="915.0" width="12.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="168.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 1.10%)</title><rect x="165.2" y="899.0" width="12.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="168.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.27%)</title><rect x="165.2" y="883.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="168.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.27%)</title><rect x="165.2" y="867.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="168.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (3 samples, 0.82%)</title><rect x="168.4" y="883.0" width="9.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="171.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (3 samples, 0.82%)</title><rect x="168.4" y="867.0" width="9.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="171.4" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (3 samples, 0.82%)</title><rect x="168.4" y="851.0" width="9.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="171.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (3 samples, 0.82%)</title><rect x="168.4" y="835.0" width="9.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="171.4" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (8 samples, 2.19%)</title><rect x="178.1" y="915.0" width="25.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="181.1" y="926.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (8 samples, 2.19%)</title><rect x="178.1" y="899.0" width="25.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="181.1" y="910.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (7 samples, 1.92%)</title><rect x="181.3" y="883.0" width="22.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="184.3" y="894.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.27%)</title><rect x="181.3" y="867.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="184.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.27%)</title><rect x="181.3" y="851.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="184.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.27%)</title><rect x="181.3" y="835.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="184.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.27%)</title><rect x="181.3" y="819.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="184.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.27%)</title><rect x="181.3" y="803.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="184.3" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (4 samples, 1.10%)</title><rect x="184.6" y="867.0" width="12.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="187.6" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 1.10%)</title><rect x="184.6" y="851.0" width="12.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="187.6" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 1.10%)</title><rect x="184.6" y="835.0" width="12.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="187.6" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 1.10%)</title><rect x="184.6" y="819.0" width="12.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="187.6" y="830.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (4 samples, 1.10%)</title><rect x="184.6" y="803.0" width="12.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="187.6" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.27%)</title><rect x="197.5" y="867.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="200.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.27%)</title><rect x="197.5" y="851.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="200.5" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.27%)</title><rect x="197.5" y="835.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="200.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.27%)</title><rect x="197.5" y="819.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="200.5" y="830.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.27%)</title><rect x="197.5" y="803.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="200.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.27%)</title><rect x="200.7" y="867.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="203.7" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.27%)</title><rect x="200.7" y="851.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="203.7" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.27%)</title><rect x="200.7" y="835.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="203.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (3 samples, 0.82%)</title><rect x="204.0" y="947.0" width="9.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="207.0" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 0.82%)</title><rect x="204.0" y="931.0" width="9.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="207.0" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (3 samples, 0.82%)</title><rect x="204.0" y="915.0" width="9.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="207.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (3 samples, 0.82%)</title><rect x="204.0" y="899.0" width="9.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="207.0" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.82%)</title><rect x="204.0" y="883.0" width="9.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="207.0" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (142 samples, 38.90%)</title><rect x="213.7" y="1043.0" width="459.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="216.7" y="1054.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (28 samples, 7.67%)</title><rect x="213.7" y="1027.0" width="90.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="216.7" y="1038.0">com/lineco..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (24 samples, 6.58%)</title><rect x="226.6" y="1011.0" width="77.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="229.6" y="1022.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (18 samples, 4.93%)</title><rect x="246.0" y="995.0" width="58.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="249.0" y="1006.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 2.19%)</title><rect x="246.0" y="979.0" width="25.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="249.0" y="990.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 2.19%)</title><rect x="246.0" y="963.0" width="25.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="249.0" y="974.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.27%)</title><rect x="268.6" y="947.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="271.6" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.27%)</title><rect x="268.6" y="931.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="271.6" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.27%)</title><rect x="268.6" y="915.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.6" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (10 samples, 2.74%)</title><rect x="271.9" y="979.0" width="32.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="274.9" y="990.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (8 samples, 2.19%)</title><rect x="278.3" y="963.0" width="25.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="281.3" y="974.0">j..</text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.27%)</title><rect x="281.6" y="947.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="284.6" y="958.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.27%)</title><rect x="281.6" y="931.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="284.6" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 1.64%)</title><rect x="284.8" y="947.0" width="19.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="287.8" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.27%)</title><rect x="304.2" y="1027.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="307.2" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.27%)</title><rect x="304.2" y="1011.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="307.2" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.27%)</title><rect x="304.2" y="995.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="307.2" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (23 samples, 6.30%)</title><rect x="307.4" y="1027.0" width="74.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="310.4" y="1038.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (23 samples, 6.30%)</title><rect x="307.4" y="1011.0" width="74.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="310.4" y="1022.0">com/line..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.55%)</title><rect x="310.7" y="995.0" width="6.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="313.7" y="1006.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.55%)</title><rect x="310.7" y="979.0" width="6.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="313.7" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (8 samples, 2.19%)</title><rect x="317.1" y="995.0" width="25.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="320.1" y="1006.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 1.64%)</title><rect x="320.4" y="979.0" width="19.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="323.4" y="990.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 1.64%)</title><rect x="320.4" y="963.0" width="19.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="323.4" y="974.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.82%)</title><rect x="320.4" y="947.0" width="9.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="323.4" y="958.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 0.82%)</title><rect x="320.4" y="931.0" width="9.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="323.4" y="942.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.82%)</title><rect x="320.4" y="915.0" width="9.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="323.4" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.82%)</title><rect x="320.4" y="899.0" width="9.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="323.4" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.27%)</title><rect x="320.4" y="883.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="323.4" y="894.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.27%)</title><rect x="320.4" y="867.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="323.4" y="878.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.27%)</title><rect x="320.4" y="851.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="323.4" y="862.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.27%)</title><rect x="320.4" y="835.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="323.4" y="846.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.27%)</title><rect x="320.4" y="819.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="323.4" y="830.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.55%)</title><rect x="323.6" y="883.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="326.6" y="894.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.27%)</title><rect x="330.1" y="947.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="333.1" y="958.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.55%)</title><rect x="333.3" y="947.0" width="6.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="336.3" y="958.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.27%)</title><rect x="339.8" y="979.0" width="3.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="342.8" y="990.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.27%)</title><rect x="343.0" y="995.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="346.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.27%)</title><rect x="343.0" y="979.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="346.0" y="990.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.27%)</title><rect x="343.0" y="963.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="346.0" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.27%)</title><rect x="343.0" y="947.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="346.0" y="958.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (11 samples, 3.01%)</title><rect x="346.2" y="995.0" width="35.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="349.2" y="1006.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (11 samples, 3.01%)</title><rect x="346.2" y="979.0" width="35.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="349.2" y="990.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.27%)</title><rect x="349.5" y="963.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="352.5" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.27%)</title><rect x="349.5" y="947.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="352.5" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.27%)</title><rect x="349.5" y="931.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="352.5" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.27%)</title><rect x="349.5" y="915.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="352.5" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.27%)</title><rect x="349.5" y="899.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="352.5" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (9 samples, 2.47%)</title><rect x="352.7" y="963.0" width="29.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="355.7" y="974.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (9 samples, 2.47%)</title><rect x="352.7" y="947.0" width="29.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="355.7" y="958.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.putVal (8 samples, 2.19%)</title><rect x="355.9" y="931.0" width="25.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="358.9" y="942.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (4 samples, 1.10%)</title><rect x="362.4" y="915.0" width="12.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="365.4" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.27%)</title><rect x="368.8" y="899.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="371.8" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.27%)</title><rect x="372.1" y="899.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="375.1" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.27%)</title><rect x="372.1" y="883.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="375.1" y="894.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.55%)</title><rect x="375.3" y="915.0" width="6.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="378.3" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (76 samples, 20.82%)</title><rect x="381.8" y="1027.0" width="245.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="384.8" y="1038.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (76 samples, 20.82%)</title><rect x="381.8" y="1011.0" width="245.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="384.8" y="1022.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.27%)</title><rect x="388.2" y="995.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="391.2" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.27%)</title><rect x="388.2" y="979.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="391.2" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.27%)</title><rect x="388.2" y="963.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="391.2" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/696532246.process (66 samples, 18.08%)</title><rect x="391.5" y="995.0" width="213.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="394.5" y="1006.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (66 samples, 18.08%)</title><rect x="391.5" y="979.0" width="213.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="394.5" y="990.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (66 samples, 18.08%)</title><rect x="391.5" y="963.0" width="213.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="394.5" y="974.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (64 samples, 17.53%)</title><rect x="391.5" y="947.0" width="206.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="394.5" y="958.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>java/lang/Thread.sleep (63 samples, 17.26%)</title><rect x="394.7" y="931.0" width="203.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="397.7" y="942.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (46 samples, 12.60%)</title><rect x="407.6" y="915.0" width="148.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="410.6" y="926.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.82%)</title><rect x="420.6" y="899.0" width="9.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="423.6" y="910.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.27%)</title><rect x="430.3" y="899.0" width="3.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="433.3" y="910.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.27%)</title><rect x="430.3" y="883.0" width="3.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="433.3" y="894.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.55%)</title><rect x="433.5" y="899.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="436.5" y="910.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (36 samples, 9.86%)</title><rect x="440.0" y="899.0" width="116.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="443.0" y="910.0">os::sleep(Thre..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.55%)</title><rect x="446.4" y="883.0" width="6.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="449.4" y="894.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.55%)</title><rect x="446.4" y="867.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="449.4" y="878.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.55%)</title><rect x="452.9" y="883.0" width="6.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="455.9" y="894.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.55%)</title><rect x="459.4" y="883.0" width="6.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="462.4" y="894.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.55%)</title><rect x="459.4" y="867.0" width="6.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="462.4" y="878.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 1.10%)</title><rect x="465.8" y="883.0" width="13.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="468.8" y="894.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (17 samples, 4.66%)</title><rect x="478.8" y="883.0" width="54.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="481.8" y="894.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.27%)</title><rect x="533.7" y="883.0" width="3.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="536.7" y="894.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 1.10%)</title><rect x="537.0" y="883.0" width="12.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="540.0" y="894.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.55%)</title><rect x="549.9" y="883.0" width="6.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="552.9" y="894.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (3 samples, 0.82%)</title><rect x="556.4" y="915.0" width="9.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="559.4" y="926.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (6 samples, 1.64%)</title><rect x="566.1" y="915.0" width="19.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="569.1" y="926.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.55%)</title><rect x="585.5" y="915.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="588.5" y="926.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (2 samples, 0.55%)</title><rect x="591.9" y="915.0" width="6.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="594.9" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.55%)</title><rect x="598.4" y="947.0" width="6.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="601.4" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.27%)</title><rect x="604.8" y="995.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="607.8" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.27%)</title><rect x="604.8" y="979.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="607.8" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.27%)</title><rect x="608.1" y="995.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="611.1" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.27%)</title><rect x="608.1" y="979.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="611.1" y="990.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.27%)</title><rect x="608.1" y="963.0" width="3.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="611.1" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.27%)</title><rect x="611.3" y="995.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="614.3" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.27%)</title><rect x="611.3" y="979.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="614.3" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.55%)</title><rect x="614.5" y="995.0" width="6.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="617.5" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.27%)</title><rect x="617.8" y="979.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="620.8" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (2 samples, 0.55%)</title><rect x="621.0" y="995.0" width="6.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="624.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.27%)</title><rect x="627.5" y="1027.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="630.5" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.27%)</title><rect x="627.5" y="1011.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="630.5" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.27%)</title><rect x="627.5" y="995.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="630.5" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.27%)</title><rect x="627.5" y="979.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="630.5" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.27%)</title><rect x="627.5" y="963.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="630.5" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.27%)</title><rect x="627.5" y="947.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="630.5" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 3.56%)</title><rect x="630.7" y="1027.0" width="42.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="633.7" y="1038.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (13 samples, 3.56%)</title><rect x="630.7" y="1011.0" width="42.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="633.7" y="1022.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.82%)</title><rect x="663.0" y="995.0" width="9.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="666.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$286/654370770.accept (3 samples, 0.82%)</title><rect x="663.0" y="979.0" width="9.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="666.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$45 (3 samples, 0.82%)</title><rect x="663.0" y="963.0" width="9.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="666.0" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/1421532683.complete (3 samples, 0.82%)</title><rect x="663.0" y="947.0" width="9.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="666.0" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$5 (3 samples, 0.82%)</title><rect x="663.0" y="931.0" width="9.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="666.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1414945980.complete (3 samples, 0.82%)</title><rect x="663.0" y="915.0" width="9.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="666.0" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (3 samples, 0.82%)</title><rect x="663.0" y="899.0" width="9.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="666.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (3 samples, 0.82%)</title><rect x="663.0" y="883.0" width="9.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="666.0" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (3 samples, 0.82%)</title><rect x="663.0" y="867.0" width="9.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="666.0" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (3 samples, 0.82%)</title><rect x="663.0" y="851.0" width="9.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="666.0" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.82%)</title><rect x="663.0" y="835.0" width="9.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="666.0" y="846.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.27%)</title><rect x="669.5" y="819.0" width="3.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="672.5" y="830.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.27%)</title><rect x="669.5" y="803.0" width="3.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="672.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (16 samples, 4.38%)</title><rect x="672.7" y="1043.0" width="51.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="675.7" y="1054.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (16 samples, 4.38%)</title><rect x="672.7" y="1027.0" width="51.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="675.7" y="1038.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (16 samples, 4.38%)</title><rect x="672.7" y="1011.0" width="51.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="675.7" y="1022.0">java/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$286/654370770.accept (16 samples, 4.38%)</title><rect x="672.7" y="995.0" width="51.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="675.7" y="1006.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$45 (16 samples, 4.38%)</title><rect x="672.7" y="979.0" width="51.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="675.7" y="990.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/1421532683.complete (16 samples, 4.38%)</title><rect x="672.7" y="963.0" width="51.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="675.7" y="974.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$5 (16 samples, 4.38%)</title><rect x="672.7" y="947.0" width="51.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="675.7" y="958.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1414945980.complete (13 samples, 3.56%)</title><rect x="672.7" y="931.0" width="42.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="675.7" y="942.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (13 samples, 3.56%)</title><rect x="672.7" y="915.0" width="42.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="675.7" y="926.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (13 samples, 3.56%)</title><rect x="672.7" y="899.0" width="42.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="675.7" y="910.0">com/..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (13 samples, 3.56%)</title><rect x="672.7" y="883.0" width="42.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="675.7" y="894.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (13 samples, 3.56%)</title><rect x="672.7" y="867.0" width="42.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="675.7" y="878.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (13 samples, 3.56%)</title><rect x="672.7" y="851.0" width="42.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="675.7" y="862.0">ch/q..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$276/441337993.complete (3 samples, 0.82%)</title><rect x="714.8" y="931.0" width="9.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="717.8" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$null$70 (3 samples, 0.82%)</title><rect x="714.8" y="915.0" width="9.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="717.8" y="926.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.82%)</title><rect x="724.5" y="1043.0" width="9.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="727.5" y="1054.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.82%)</title><rect x="724.5" y="1027.0" width="9.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="727.5" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (3 samples, 0.82%)</title><rect x="734.2" y="1059.0" width="9.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="737.2" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 0.82%)</title><rect x="743.9" y="1107.0" width="9.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="746.9" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.82%)</title><rect x="743.9" y="1091.0" width="9.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="746.9" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.82%)</title><rect x="743.9" y="1075.0" width="9.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="746.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.82%)</title><rect x="743.9" y="1059.0" width="9.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="746.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (14 samples, 3.84%)</title><rect x="753.6" y="1107.0" width="45.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="756.6" y="1118.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (12 samples, 3.29%)</title><rect x="760.0" y="1091.0" width="38.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="763.0" y="1102.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (4 samples, 1.10%)</title><rect x="760.0" y="1075.0" width="13.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="763.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (4 samples, 1.10%)</title><rect x="760.0" y="1059.0" width="13.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="763.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.10%)</title><rect x="760.0" y="1043.0" width="13.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="763.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.10%)</title><rect x="760.0" y="1027.0" width="13.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="763.0" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.10%)</title><rect x="760.0" y="1011.0" width="13.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="763.0" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (8 samples, 2.19%)</title><rect x="773.0" y="1075.0" width="25.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="776.0" y="1086.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 2.19%)</title><rect x="773.0" y="1059.0" width="25.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="776.0" y="1070.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 2.19%)</title><rect x="773.0" y="1043.0" width="25.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="776.0" y="1054.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 2.19%)</title><rect x="773.0" y="1027.0" width="25.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="776.0" y="1038.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.55%)</title><rect x="798.8" y="1155.0" width="6.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="801.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 0.55%)</title><rect x="798.8" y="1139.0" width="6.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="801.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.55%)</title><rect x="798.8" y="1123.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="801.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.55%)</title><rect x="798.8" y="1107.0" width="6.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="801.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.27%)</title><rect x="802.1" y="1091.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="805.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.27%)</title><rect x="802.1" y="1075.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="805.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.27%)</title><rect x="802.1" y="1059.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="805.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.27%)</title><rect x="802.1" y="1043.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="805.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.27%)</title><rect x="802.1" y="1027.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="805.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.27%)</title><rect x="802.1" y="1011.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="805.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.27%)</title><rect x="802.1" y="995.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="805.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.27%)</title><rect x="802.1" y="979.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="805.1" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$9.write (1 samples, 0.27%)</title><rect x="802.1" y="963.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="805.1" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.27%)</title><rect x="802.1" y="947.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="805.1" y="958.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.27%)</title><rect x="802.1" y="931.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="805.1" y="942.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.27%)</title><rect x="802.1" y="915.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="805.1" y="926.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (1 samples, 0.27%)</title><rect x="802.1" y="899.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="805.1" y="910.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (1 samples, 0.27%)</title><rect x="802.1" y="883.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="805.1" y="894.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (1 samples, 0.27%)</title><rect x="802.1" y="867.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="805.1" y="878.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (1 samples, 0.27%)</title><rect x="802.1" y="851.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="805.1" y="862.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (1 samples, 0.27%)</title><rect x="802.1" y="835.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="805.1" y="846.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.replaceWith (1 samples, 0.27%)</title><rect x="802.1" y="819.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="805.1" y="830.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.27%)</title><rect x="802.1" y="803.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="805.1" y="814.0"></text>
</g>
<g>
<title>java/lang/Math.min (1 samples, 0.27%)</title><rect x="802.1" y="787.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="805.1" y="798.0"></text>
</g>
<g>
<title>Runtime1::new_type_array(JavaThread*, Klass*, int) (1 samples, 0.27%)</title><rect x="802.1" y="771.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="805.1" y="782.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.27%)</title><rect x="802.1" y="755.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="805.1" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.27%)</title><rect x="802.1" y="739.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="805.1" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.27%)</title><rect x="802.1" y="723.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="805.1" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.27%)</title><rect x="802.1" y="707.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="805.1" y="718.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.27%)</title><rect x="802.1" y="691.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="805.1" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.27%)</title><rect x="802.1" y="675.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="805.1" y="686.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.27%)</title><rect x="802.1" y="659.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="805.1" y="670.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.27%)</title><rect x="802.1" y="643.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="805.1" y="654.0"></text>
</g>
<g>
<title>start_thread (119 samples, 32.60%)</title><rect x="805.3" y="1155.0" width="384.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="808.3" y="1166.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (119 samples, 32.60%)</title><rect x="805.3" y="1139.0" width="384.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="808.3" y="1150.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (13 samples, 3.56%)</title><rect x="805.3" y="1123.0" width="42.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="808.3" y="1134.0">Gang..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (13 samples, 3.56%)</title><rect x="805.3" y="1107.0" width="42.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="808.3" y="1118.0">G1Pa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (13 samples, 3.56%)</title><rect x="805.3" y="1091.0" width="42.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="808.3" y="1102.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (13 samples, 3.56%)</title><rect x="805.3" y="1075.0" width="42.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="808.3" y="1086.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (6 samples, 1.64%)</title><rect x="824.7" y="1059.0" width="19.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="827.7" y="1070.0"></text>
</g>
<g>
<title>G1ParGCAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, unsigned char) (1 samples, 0.27%)</title><rect x="827.9" y="1043.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="830.9" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::par_allocate_during_gc(InCSetState, unsigned long, unsigned char) (1 samples, 0.27%)</title><rect x="827.9" y="1027.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="830.9" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (4 samples, 1.10%)</title><rect x="831.2" y="1043.0" width="12.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="834.2" y="1054.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.27%)</title><rect x="844.1" y="1059.0" width="3.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="847.1" y="1070.0"></text>
</g>
<g>
<title>JavaThread::run() (106 samples, 29.04%)</title><rect x="847.3" y="1123.0" width="342.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="850.3" y="1134.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (106 samples, 29.04%)</title><rect x="847.3" y="1107.0" width="342.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="850.3" y="1118.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (106 samples, 29.04%)</title><rect x="847.3" y="1091.0" width="342.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="850.3" y="1102.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (106 samples, 29.04%)</title><rect x="847.3" y="1075.0" width="342.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="850.3" y="1086.0">CompileBroker::invoke_compiler_on_method(Compi..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (104 samples, 28.49%)</title><rect x="847.3" y="1059.0" width="336.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="850.3" y="1070.0">C2Compiler::compile_method(ciEnv*, ciMethod*, ..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (104 samples, 28.49%)</title><rect x="847.3" y="1043.0" width="336.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="850.3" y="1054.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod..</text>
</g>
<g>
<title>Compile::Code_Gen() (37 samples, 10.14%)</title><rect x="847.3" y="1027.0" width="119.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="850.3" y="1038.0">Compile::Code_G..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.27%)</title><rect x="847.3" y="1011.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="850.3" y="1022.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.27%)</title><rect x="847.3" y="995.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="850.3" y="1006.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.82%)</title><rect x="850.5" y="1011.0" width="9.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="853.5" y="1022.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (3 samples, 0.82%)</title><rect x="850.5" y="995.0" width="9.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="853.5" y="1006.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.27%)</title><rect x="853.8" y="979.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="856.8" y="990.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.27%)</title><rect x="853.8" y="963.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="856.8" y="974.0"></text>
</g>
<g>
<title>JVMState::of_depth(int) const (1 samples, 0.27%)</title><rect x="857.0" y="979.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="860.0" y="990.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.55%)</title><rect x="860.2" y="1011.0" width="6.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="863.2" y="1022.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.55%)</title><rect x="860.2" y="995.0" width="6.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="863.2" y="1006.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.27%)</title><rect x="863.5" y="979.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="866.5" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.82%)</title><rect x="866.7" y="1011.0" width="9.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="869.7" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.82%)</title><rect x="866.7" y="995.0" width="9.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="869.7" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.55%)</title><rect x="866.7" y="979.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="869.7" y="990.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.27%)</title><rect x="866.7" y="963.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="869.7" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.27%)</title><rect x="869.9" y="963.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="872.9" y="974.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.27%)</title><rect x="869.9" y="947.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="872.9" y="958.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.27%)</title><rect x="869.9" y="931.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="872.9" y="942.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.27%)</title><rect x="869.9" y="915.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="872.9" y="926.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.27%)</title><rect x="869.9" y="899.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="872.9" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.27%)</title><rect x="873.2" y="979.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="876.2" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (28 samples, 7.67%)</title><rect x="876.4" y="1011.0" width="90.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="879.4" y="1022.0">PhaseChait..</text>
</g>
<g>
<title>MachSpillCopyNode::ideal_reg() const (1 samples, 0.27%)</title><rect x="879.6" y="995.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="882.6" y="1006.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.27%)</title><rect x="882.9" y="995.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="885.9" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.27%)</title><rect x="886.1" y="995.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="889.1" y="1006.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.27%)</title><rect x="886.1" y="979.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="889.1" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.27%)</title><rect x="886.1" y="963.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="889.1" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.27%)</title><rect x="889.3" y="995.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="892.3" y="1006.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.27%)</title><rect x="889.3" y="979.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="892.3" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.27%)</title><rect x="889.3" y="963.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="892.3" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (7 samples, 1.92%)</title><rect x="892.6" y="995.0" width="22.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="895.6" y="1006.0">P..</text>
</g>
<g>
<title>MachOper::num_edges() const (1 samples, 0.27%)</title><rect x="905.5" y="979.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="908.5" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.27%)</title><rect x="908.7" y="979.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="911.7" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.27%)</title><rect x="908.7" y="963.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="911.7" y="974.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.27%)</title><rect x="912.0" y="979.0" width="3.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="915.0" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 1.64%)</title><rect x="915.2" y="995.0" width="19.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="918.2" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.82%)</title><rect x="921.7" y="979.0" width="9.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="924.7" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.27%)</title><rect x="928.1" y="963.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="931.1" y="974.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.27%)</title><rect x="931.4" y="979.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="934.4" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.55%)</title><rect x="934.6" y="995.0" width="6.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="937.6" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.55%)</title><rect x="934.6" y="979.0" width="6.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="937.6" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 0.82%)</title><rect x="941.1" y="995.0" width="9.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="944.1" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.82%)</title><rect x="941.1" y="979.0" width="9.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="944.1" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.27%)</title><rect x="950.8" y="995.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="953.8" y="1006.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.27%)</title><rect x="950.8" y="979.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="953.8" y="990.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 1.10%)</title><rect x="954.0" y="995.0" width="12.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="957.0" y="1006.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.55%)</title><rect x="960.5" y="979.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="963.5" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.27%)</title><rect x="963.7" y="963.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="966.7" y="974.0"></text>
</g>
<g>
<title>Compile::Optimize() (60 samples, 16.44%)</title><rect x="966.9" y="1027.0" width="194.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="969.9" y="1038.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.27%)</title><rect x="966.9" y="1011.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="969.9" y="1022.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.27%)</title><rect x="966.9" y="995.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="969.9" y="1006.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.27%)</title><rect x="970.2" y="1011.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="973.2" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_speculative_types() (1 samples, 0.27%)</title><rect x="970.2" y="995.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="973.2" y="1006.0"></text>
</g>
<g>
<title>TypeNarrowOop::remove_speculative() const (1 samples, 0.27%)</title><rect x="970.2" y="979.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="973.2" y="990.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.27%)</title><rect x="970.2" y="963.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="973.2" y="974.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.27%)</title><rect x="970.2" y="947.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="973.2" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.27%)</title><rect x="973.4" y="1011.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="976.4" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.27%)</title><rect x="973.4" y="995.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="976.4" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.27%)</title><rect x="973.4" y="979.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="976.4" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.27%)</title><rect x="973.4" y="963.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="976.4" y="974.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.27%)</title><rect x="976.6" y="1011.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="979.6" y="1022.0"></text>
</g>
<g>
<title>LShiftLNode::Value(PhaseTransform*) const (1 samples, 0.27%)</title><rect x="976.6" y="995.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="979.6" y="1006.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.27%)</title><rect x="976.6" y="979.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="979.6" y="990.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.27%)</title><rect x="976.6" y="963.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="979.6" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (52 samples, 14.25%)</title><rect x="979.9" y="1011.0" width="168.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="982.9" y="1022.0">PhaseIdealLoop::build_..</text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.27%)</title><rect x="979.9" y="995.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="982.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.27%)</title><rect x="983.1" y="995.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="986.1" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.27%)</title><rect x="986.3" y="995.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="989.3" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.27%)</title><rect x="986.3" y="979.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="989.3" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.27%)</title><rect x="986.3" y="963.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="989.3" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (47 samples, 12.88%)</title><rect x="989.6" y="995.0" width="151.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="992.6" y="1006.0">PhaseIdealLoop::bui..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (46 samples, 12.60%)</title><rect x="992.8" y="979.0" width="148.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="995.8" y="990.0">PhaseIdealLoop::bui..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.27%)</title><rect x="992.8" y="963.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="995.8" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (45 samples, 12.33%)</title><rect x="996.0" y="963.0" width="145.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="999.0" y="974.0">PhaseIdealLoop::ge..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (4 samples, 1.10%)</title><rect x="1128.6" y="947.0" width="12.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1131.6" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.27%)</title><rect x="1141.5" y="995.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.5" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.27%)</title><rect x="1144.7" y="995.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.7" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.27%)</title><rect x="1144.7" y="979.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.7" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.27%)</title><rect x="1144.7" y="963.0" width="3.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.7" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.27%)</title><rect x="1148.0" y="1011.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.0" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.27%)</title><rect x="1148.0" y="995.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.0" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.82%)</title><rect x="1151.2" y="1011.0" width="9.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.2" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.82%)</title><rect x="1151.2" y="995.0" width="9.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.2" y="1006.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.55%)</title><rect x="1151.2" y="979.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.2" y="990.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.27%)</title><rect x="1151.2" y="963.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.2" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1151.2" y="947.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.2" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1151.2" y="931.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.2" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1151.2" y="915.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.2" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1151.2" y="899.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.2" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1151.2" y="883.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.2" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1151.2" y="867.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.2" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1151.2" y="851.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.2" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1151.2" y="835.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.2" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1151.2" y="819.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.2" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1151.2" y="803.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.2" y="814.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.27%)</title><rect x="1151.2" y="787.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.2" y="798.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.27%)</title><rect x="1151.2" y="771.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.2" y="782.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.27%)</title><rect x="1154.4" y="963.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1157.4" y="974.0"></text>
</g>
<g>
<title>StoreNode::Identity(PhaseTransform*) (1 samples, 0.27%)</title><rect x="1157.7" y="979.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.7" y="990.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.27%)</title><rect x="1157.7" y="963.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.7" y="974.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.27%)</title><rect x="1157.7" y="947.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.7" y="958.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.27%)</title><rect x="1157.7" y="931.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.7" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 1.92%)</title><rect x="1160.9" y="1027.0" width="22.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.9" y="1038.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 1.92%)</title><rect x="1160.9" y="1011.0" width="22.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.9" y="1022.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 1.92%)</title><rect x="1160.9" y="995.0" width="22.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.9" y="1006.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 1.92%)</title><rect x="1160.9" y="979.0" width="22.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.9" y="990.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 1.92%)</title><rect x="1160.9" y="963.0" width="22.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.9" y="974.0">P..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 1.64%)</title><rect x="1160.9" y="947.0" width="19.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.9" y="958.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.27%)</title><rect x="1160.9" y="931.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.9" y="942.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.27%)</title><rect x="1160.9" y="915.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.9" y="926.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.27%)</title><rect x="1160.9" y="899.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.9" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.27%)</title><rect x="1160.9" y="883.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.9" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.27%)</title><rect x="1160.9" y="867.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.9" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.27%)</title><rect x="1160.9" y="851.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.9" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.27%)</title><rect x="1160.9" y="835.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.9" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.27%)</title><rect x="1160.9" y="819.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.9" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.27%)</title><rect x="1160.9" y="803.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.9" y="814.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.27%)</title><rect x="1160.9" y="787.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.9" y="798.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.27%)</title><rect x="1160.9" y="771.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.9" y="782.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.27%)</title><rect x="1160.9" y="755.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.9" y="766.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.27%)</title><rect x="1160.9" y="739.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.9" y="750.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.27%)</title><rect x="1160.9" y="723.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.9" y="734.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.27%)</title><rect x="1160.9" y="707.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.9" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.82%)</title><rect x="1164.1" y="931.0" width="9.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.1" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.82%)</title><rect x="1164.1" y="915.0" width="9.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.1" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.82%)</title><rect x="1164.1" y="899.0" width="9.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.1" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.82%)</title><rect x="1164.1" y="883.0" width="9.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.1" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.82%)</title><rect x="1164.1" y="867.0" width="9.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.1" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.82%)</title><rect x="1164.1" y="851.0" width="9.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.1" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.55%)</title><rect x="1164.1" y="835.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.1" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.55%)</title><rect x="1164.1" y="819.0" width="6.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.1" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.55%)</title><rect x="1164.1" y="803.0" width="6.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.55%)</title><rect x="1164.1" y="787.0" width="6.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.55%)</title><rect x="1164.1" y="771.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.1" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.55%)</title><rect x="1164.1" y="755.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.1" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.55%)</title><rect x="1164.1" y="739.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.1" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.55%)</title><rect x="1164.1" y="723.0" width="6.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1167.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.55%)</title><rect x="1164.1" y="707.0" width="6.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.55%)</title><rect x="1164.1" y="691.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.55%)</title><rect x="1164.1" y="675.0" width="6.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.55%)</title><rect x="1164.1" y="659.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.1" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1164.1" y="643.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.1" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1164.1" y="627.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1164.1" y="611.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1164.1" y="595.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1164.1" y="579.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1164.1" y="563.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.1" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1164.1" y="547.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.1" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1164.1" y="531.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1164.1" y="515.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1164.1" y="499.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1164.1" y="483.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.27%)</title><rect x="1164.1" y="467.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.27%)</title><rect x="1164.1" y="451.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.1" y="462.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.27%)</title><rect x="1164.1" y="435.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.1" y="446.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.27%)</title><rect x="1164.1" y="419.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.1" y="430.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.27%)</title><rect x="1164.1" y="403.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.1" y="414.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.27%)</title><rect x="1164.1" y="387.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.1" y="398.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1164.1" y="371.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.1" y="382.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1164.1" y="355.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.1" y="366.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1164.1" y="339.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.1" y="350.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1164.1" y="323.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.1" y="334.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1164.1" y="307.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.1" y="318.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1164.1" y="291.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.1" y="302.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1164.1" y="275.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.1" y="286.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1164.1" y="259.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.1" y="270.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1164.1" y="243.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.1" y="254.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.27%)</title><rect x="1164.1" y="227.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.1" y="238.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.27%)</title><rect x="1164.1" y="211.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.1" y="222.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.27%)</title><rect x="1164.1" y="195.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.1" y="206.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1167.4" y="643.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.4" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1167.4" y="627.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.4" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1167.4" y="611.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1167.4" y="595.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1167.4" y="579.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1167.4" y="563.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1167.4" y="547.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.4" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1167.4" y="531.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.4" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1167.4" y="515.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1167.4" y="499.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1167.4" y="483.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1167.4" y="467.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1167.4" y="451.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.4" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1167.4" y="435.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.4" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1167.4" y="419.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1167.4" y="403.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1167.4" y="387.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1167.4" y="371.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1167.4" y="355.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.4" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1167.4" y="339.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.4" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1167.4" y="323.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1167.4" y="307.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1167.4" y="291.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1167.4" y="275.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1167.4" y="259.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.4" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1167.4" y="243.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.4" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1167.4" y="227.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.4" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1167.4" y="211.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1167.4" y="195.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1167.4" y="179.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.4" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1167.4" y="163.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.4" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1167.4" y="147.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.4" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1167.4" y="131.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.4" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1167.4" y="115.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.4" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1167.4" y="99.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.4" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1167.4" y="83.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.4" y="94.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.27%)</title><rect x="1167.4" y="67.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.4" y="78.0"></text>
</g>
<g>
<title>PhiNode::slice_memory(TypePtr const*) const (1 samples, 0.27%)</title><rect x="1167.4" y="51.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.4" y="62.0"></text>
</g>
<g>
<title>PhiNode::size_of() const (1 samples, 0.27%)</title><rect x="1167.4" y="35.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.4" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1170.6" y="835.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.6" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1170.6" y="819.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.6" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1170.6" y="803.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1170.6" y="787.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1170.6" y="771.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1170.6" y="755.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1170.6" y="739.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.6" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1170.6" y="723.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.6" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1170.6" y="707.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1170.6" y="691.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1170.6" y="675.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1170.6" y="659.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1170.6" y="643.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.6" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1170.6" y="627.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.6" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1170.6" y="611.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1170.6" y="595.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1170.6" y="579.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1170.6" y="563.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.27%)</title><rect x="1170.6" y="547.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.6" y="558.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.27%)</title><rect x="1170.6" y="531.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.6" y="542.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.27%)</title><rect x="1170.6" y="515.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.6" y="526.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.27%)</title><rect x="1170.6" y="499.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.6" y="510.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1173.8" y="931.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.8" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1173.8" y="915.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.8" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1173.8" y="899.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.8" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1173.8" y="883.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1173.8" y="867.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.8" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1173.8" y="851.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1173.8" y="835.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.8" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1173.8" y="819.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.8" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1173.8" y="803.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1173.8" y="787.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1173.8" y="771.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1173.8" y="755.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1173.8" y="739.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.8" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1173.8" y="723.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.8" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1173.8" y="707.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1173.8" y="691.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1173.8" y="675.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1173.8" y="659.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1173.8" y="643.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.8" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1173.8" y="627.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.8" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1173.8" y="611.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1173.8" y="595.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1173.8" y="579.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1173.8" y="563.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1173.8" y="547.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.8" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1173.8" y="531.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.8" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1173.8" y="515.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1173.8" y="499.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1173.8" y="483.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1173.8" y="467.0" width="3.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1173.8" y="451.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.8" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1173.8" y="435.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.8" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1173.8" y="419.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.8" y="430.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.27%)</title><rect x="1173.8" y="403.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.8" y="414.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_declared_method_holder() (1 samples, 0.27%)</title><rect x="1177.1" y="931.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.1" y="942.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name(ciKlass*, ciSymbol*, bool) (1 samples, 0.27%)</title><rect x="1177.1" y="915.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.1" y="926.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.27%)</title><rect x="1177.1" y="899.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.1" y="910.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.27%)</title><rect x="1177.1" y="883.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.1" y="894.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.27%)</title><rect x="1180.3" y="947.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.3" y="958.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.27%)</title><rect x="1180.3" y="931.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.3" y="942.0"></text>
</g>
<g>
<title>GraphKit::static_subtype_check(ciKlass*, ciKlass*) (1 samples, 0.27%)</title><rect x="1180.3" y="915.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.3" y="926.0"></text>
</g>
<g>
<title>Dependencies::assert_leaf_type(ciKlass*) (1 samples, 0.27%)</title><rect x="1180.3" y="899.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.3" y="910.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.55%)</title><rect x="1183.5" y="1059.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.5" y="1070.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.55%)</title><rect x="1183.5" y="1043.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.5" y="1054.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.55%)</title><rect x="1183.5" y="1027.0" width="6.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.5" y="1038.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.27%)</title><rect x="1183.5" y="1011.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.5" y="1022.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.27%)</title><rect x="1183.5" y="995.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.5" y="1006.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.27%)</title><rect x="1183.5" y="979.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.5" y="990.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.27%)</title><rect x="1183.5" y="963.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.5" y="974.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.27%)</title><rect x="1183.5" y="947.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.5" y="958.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(IntervalState, int) (1 samples, 0.27%)</title><rect x="1183.5" y="931.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.5" y="942.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.27%)</title><rect x="1186.8" y="1011.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.8" y="1022.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.27%)</title><rect x="1186.8" y="995.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.8" y="1006.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.27%)</title><rect x="1186.8" y="979.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.8" y="990.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.27%)</title><rect x="1186.8" y="963.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.8" y="974.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.27%)</title><rect x="1186.8" y="947.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.8" y="958.0"></text>
</g>
</g>
</svg>
