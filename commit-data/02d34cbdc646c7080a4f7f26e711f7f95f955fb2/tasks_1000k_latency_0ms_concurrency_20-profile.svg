<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1190" onload="init(evt)" viewBox="0 0 1200 1190" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1173"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1173"> </text>
<g id="frames">
<g>
<title>all (1,288 samples, 100.00%)</title><rect x="10.0" y="1139.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1150.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (301 samples, 23.37%)</title><rect x="10.0" y="1123.0" width="275.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1134.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (301 samples, 23.37%)</title><rect x="10.0" y="1107.0" width="275.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1118.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.08%)</title><rect x="10.0" y="1091.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (9 samples, 0.70%)</title><rect x="10.9" y="1091.0" width="8.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.9" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (9 samples, 0.70%)</title><rect x="10.9" y="1075.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.9" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/185864489.accept (8 samples, 0.62%)</title><rect x="11.8" y="1059.0" width="7.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.8" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (8 samples, 0.62%)</title><rect x="11.8" y="1043.0" width="7.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.8" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (8 samples, 0.62%)</title><rect x="11.8" y="1027.0" width="7.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.8" y="1038.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (7 samples, 0.54%)</title><rect x="12.7" y="1011.0" width="6.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.7" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (3 samples, 0.23%)</title><rect x="19.2" y="1091.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.2" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (3 samples, 0.23%)</title><rect x="19.2" y="1075.0" width="2.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.2" y="1086.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.08%)</title><rect x="20.1" y="1059.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="23.1" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.08%)</title><rect x="20.1" y="1043.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.1" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.08%)</title><rect x="20.1" y="1027.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="23.1" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="21.0" y="1059.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="24.0" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="21.0" y="1043.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="24.0" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="21.0" y="1027.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="24.0" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="21.0" y="1011.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.0" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="21.0" y="995.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.0" y="1006.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="21.0" y="979.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="24.0" y="990.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (233 samples, 18.09%)</title><rect x="21.9" y="1091.0" width="213.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="24.9" y="1102.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1070535263.accept (222 samples, 17.24%)</title><rect x="22.8" y="1075.0" width="203.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.8" y="1086.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$71 (221 samples, 17.16%)</title><rect x="23.7" y="1059.0" width="202.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="26.7" y="1070.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (187 samples, 14.52%)</title><rect x="27.4" y="1043.0" width="171.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.4" y="1054.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (187 samples, 14.52%)</title><rect x="27.4" y="1027.0" width="171.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="30.4" y="1038.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (187 samples, 14.52%)</title><rect x="27.4" y="1011.0" width="171.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="30.4" y="1022.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (187 samples, 14.52%)</title><rect x="27.4" y="995.0" width="171.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="30.4" y="1006.0">java/util/concurrent/E..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (187 samples, 14.52%)</title><rect x="27.4" y="979.0" width="171.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="30.4" y="990.0">java/util/concurrent/T..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (187 samples, 14.52%)</title><rect x="27.4" y="963.0" width="171.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="30.4" y="974.0">java/util/concurrent/L..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (118 samples, 9.16%)</title><rect x="27.4" y="947.0" width="108.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.4" y="958.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (26 samples, 2.02%)</title><rect x="27.4" y="931.0" width="23.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="30.4" y="942.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (26 samples, 2.02%)</title><rect x="27.4" y="915.0" width="23.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="30.4" y="926.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (17 samples, 1.32%)</title><rect x="35.7" y="899.0" width="15.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="38.7" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (17 samples, 1.32%)</title><rect x="35.7" y="883.0" width="15.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="38.7" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.31%)</title><rect x="51.2" y="931.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="54.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (4 samples, 0.31%)</title><rect x="51.2" y="915.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="54.2" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.23%)</title><rect x="52.1" y="899.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="55.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (88 samples, 6.83%)</title><rect x="54.9" y="931.0" width="80.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="57.9" y="942.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (88 samples, 6.83%)</title><rect x="54.9" y="915.0" width="80.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="57.9" y="926.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (87 samples, 6.75%)</title><rect x="55.8" y="899.0" width="79.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.8" y="910.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (87 samples, 6.75%)</title><rect x="55.8" y="883.0" width="79.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="58.8" y="894.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (85 samples, 6.60%)</title><rect x="57.6" y="867.0" width="77.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="60.6" y="878.0">sun/misc/..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="59.5" y="851.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="62.5" y="862.0"></text>
</g>
<g>
<title>Unsafe_Unpark (72 samples, 5.59%)</title><rect x="60.4" y="851.0" width="66.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="63.4" y="862.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.16%)</title><rect x="60.4" y="835.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="63.4" y="846.0"></text>
</g>
<g>
<title>Parker::unpark() (3 samples, 0.23%)</title><rect x="62.2" y="835.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="65.2" y="846.0"></text>
</g>
<g>
<title>__pthread_cond_signal (46 samples, 3.57%)</title><rect x="65.0" y="835.0" width="42.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="68.0" y="846.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (4 samples, 0.31%)</title><rect x="107.1" y="835.0" width="3.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="110.1" y="846.0"></text>
</g>
<g>
<title>pthread_mutex_lock (17 samples, 1.32%)</title><rect x="110.8" y="835.0" width="15.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="113.8" y="846.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.31%)</title><rect x="126.4" y="851.0" width="3.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="129.4" y="862.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.39%)</title><rect x="130.0" y="851.0" width="4.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="133.0" y="862.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.08%)</title><rect x="134.6" y="851.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="137.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (56 samples, 4.35%)</title><rect x="135.5" y="947.0" width="51.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="138.5" y="958.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (56 samples, 4.35%)</title><rect x="135.5" y="931.0" width="51.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="138.5" y="942.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (56 samples, 4.35%)</title><rect x="135.5" y="915.0" width="51.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="138.5" y="926.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.62%)</title><rect x="186.8" y="947.0" width="7.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="189.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (8 samples, 0.62%)</title><rect x="186.8" y="931.0" width="7.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="189.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (8 samples, 0.62%)</title><rect x="186.8" y="915.0" width="7.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="189.8" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="193.2" y="899.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="196.2" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.08%)</title><rect x="193.2" y="883.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="196.2" y="894.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="193.2" y="867.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="196.2" y="878.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="193.2" y="851.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="196.2" y="862.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="193.2" y="835.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="196.2" y="846.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="193.2" y="819.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="196.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 0.39%)</title><rect x="194.1" y="947.0" width="4.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="197.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.39%)</title><rect x="194.1" y="931.0" width="4.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="197.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="194.1" y="915.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="197.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.08%)</title><rect x="194.1" y="899.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="197.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (4 samples, 0.31%)</title><rect x="195.1" y="915.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="198.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (3 samples, 0.23%)</title><rect x="196.0" y="899.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="199.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (1 samples, 0.08%)</title><rect x="198.7" y="1043.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="201.7" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.08%)</title><rect x="198.7" y="1027.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="201.7" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (2 samples, 0.16%)</title><rect x="199.6" y="1043.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="202.6" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.16%)</title><rect x="199.6" y="1027.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="202.6" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.16%)</title><rect x="199.6" y="1011.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="202.6" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (24 samples, 1.86%)</title><rect x="201.5" y="1043.0" width="22.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="204.5" y="1054.0">c..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.16%)</title><rect x="201.5" y="1027.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="204.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (22 samples, 1.71%)</title><rect x="203.3" y="1027.0" width="20.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="206.3" y="1038.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.08%)</title><rect x="219.8" y="1011.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="222.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.08%)</title><rect x="219.8" y="995.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="222.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.08%)</title><rect x="219.8" y="979.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="222.8" y="990.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.08%)</title><rect x="219.8" y="963.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="222.8" y="974.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.23%)</title><rect x="220.7" y="1011.0" width="2.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="223.7" y="1022.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.23%)</title><rect x="223.5" y="1043.0" width="2.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="226.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (2 samples, 0.16%)</title><rect x="226.2" y="1075.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="229.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (2 samples, 0.16%)</title><rect x="226.2" y="1059.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="229.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (2 samples, 0.16%)</title><rect x="226.2" y="1043.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="229.2" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.08%)</title><rect x="227.1" y="1027.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="230.1" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="227.1" y="1011.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="230.1" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="227.1" y="995.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="230.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (8 samples, 0.62%)</title><rect x="228.0" y="1075.0" width="7.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="231.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (8 samples, 0.62%)</title><rect x="228.0" y="1059.0" width="7.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="231.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (8 samples, 0.62%)</title><rect x="228.0" y="1043.0" width="7.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="231.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (8 samples, 0.62%)</title><rect x="228.0" y="1027.0" width="7.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="231.0" y="1038.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (4 samples, 0.31%)</title><rect x="231.7" y="1011.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="234.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (55 samples, 4.27%)</title><rect x="235.4" y="1091.0" width="50.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="238.4" y="1102.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (54 samples, 4.19%)</title><rect x="235.4" y="1075.0" width="49.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="238.4" y="1086.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (30 samples, 2.33%)</title><rect x="237.2" y="1059.0" width="27.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="240.2" y="1070.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (2 samples, 0.16%)</title><rect x="237.2" y="1043.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="240.2" y="1054.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 0.08%)</title><rect x="237.2" y="1027.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="240.2" y="1038.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.08%)</title><rect x="237.2" y="1011.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="240.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.08%)</title><rect x="238.1" y="1027.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="241.1" y="1038.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.08%)</title><rect x="238.1" y="1011.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="241.1" y="1022.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.08%)</title><rect x="238.1" y="995.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="241.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (28 samples, 2.17%)</title><rect x="239.0" y="1043.0" width="25.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="242.0" y="1054.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (27 samples, 2.10%)</title><rect x="240.0" y="1027.0" width="24.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="243.0" y="1038.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (24 samples, 1.86%)</title><rect x="240.0" y="1011.0" width="21.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="243.0" y="1022.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (24 samples, 1.86%)</title><rect x="240.0" y="995.0" width="21.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="243.0" y="1006.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (12 samples, 0.93%)</title><rect x="240.0" y="979.0" width="10.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="243.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.08%)</title><rect x="240.9" y="963.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="243.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.08%)</title><rect x="240.9" y="947.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="243.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$4100 (1 samples, 0.08%)</title><rect x="240.9" y="931.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="243.9" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordTopicFetchMetrics (1 samples, 0.08%)</title><rect x="240.9" y="915.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="243.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="240.9" y="899.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="243.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="240.9" y="883.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="243.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="240.9" y="867.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="243.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.08%)</title><rect x="240.9" y="851.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="243.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.08%)</title><rect x="240.9" y="835.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="243.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.08%)</title><rect x="240.9" y="819.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="243.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (2 samples, 0.16%)</title><rect x="241.8" y="963.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="244.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (2 samples, 0.16%)</title><rect x="241.8" y="947.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="244.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (2 samples, 0.16%)</title><rect x="241.8" y="931.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="244.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (2 samples, 0.16%)</title><rect x="241.8" y="915.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="244.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (2 samples, 0.16%)</title><rect x="241.8" y="899.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="244.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (2 samples, 0.16%)</title><rect x="241.8" y="883.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="244.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (2 samples, 0.16%)</title><rect x="241.8" y="867.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="244.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (7 samples, 0.54%)</title><rect x="243.6" y="963.0" width="6.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="246.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (7 samples, 0.54%)</title><rect x="243.6" y="947.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="246.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.08%)</title><rect x="250.0" y="963.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="253.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.uncompressedIterator (1 samples, 0.08%)</title><rect x="250.0" y="947.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="253.0" y="958.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.08%)</title><rect x="250.0" y="931.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="253.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (11 samples, 0.85%)</title><rect x="250.9" y="979.0" width="10.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="253.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (10 samples, 0.78%)</title><rect x="251.9" y="963.0" width="9.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="254.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (10 samples, 0.78%)</title><rect x="251.9" y="947.0" width="9.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="254.9" y="958.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (9 samples, 0.70%)</title><rect x="251.9" y="931.0" width="8.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="254.9" y="942.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (7 samples, 0.54%)</title><rect x="253.7" y="915.0" width="6.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="256.7" y="926.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="259.2" y="899.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="262.2" y="910.0"></text>
</g>
<g>
<title>java/util/Arrays.asList (1 samples, 0.08%)</title><rect x="260.1" y="931.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="263.1" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="260.1" y="915.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="263.1" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="260.1" y="899.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="263.1" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="260.1" y="883.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="263.1" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="260.1" y="867.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="263.1" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="260.1" y="851.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="263.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.08%)</title><rect x="261.0" y="979.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="264.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.08%)</title><rect x="261.9" y="1011.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="264.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.08%)</title><rect x="261.9" y="995.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="264.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="261.9" y="979.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="264.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="261.9" y="963.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="264.9" y="974.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="261.9" y="947.0" width="1.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="264.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.16%)</title><rect x="262.9" y="1011.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="265.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.16%)</title><rect x="262.9" y="995.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="265.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="262.9" y="979.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="265.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="262.9" y="963.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="265.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="262.9" y="947.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="265.9" y="958.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="263.8" y="947.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="266.8" y="958.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="263.8" y="931.0" width="0.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="266.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (7 samples, 0.54%)</title><rect x="264.7" y="1059.0" width="6.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="267.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (7 samples, 0.54%)</title><rect x="264.7" y="1043.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="267.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (6 samples, 0.47%)</title><rect x="264.7" y="1027.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="267.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.16%)</title><rect x="264.7" y="1011.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="267.7" y="1022.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.08%)</title><rect x="264.7" y="995.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="267.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/1751319774.accept (1 samples, 0.08%)</title><rect x="265.6" y="995.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="268.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.08%)</title><rect x="265.6" y="979.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.08%)</title><rect x="265.6" y="963.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="268.6" y="974.0"></text>
</g>
<g>
<title>java/util/Optional.map (1 samples, 0.08%)</title><rect x="265.6" y="947.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="268.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$227/1135446120.apply (1 samples, 0.08%)</title><rect x="265.6" y="931.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="268.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lambda$leaderAndEpoch$6 (1 samples, 0.08%)</title><rect x="265.6" y="915.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="268.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (2 samples, 0.16%)</title><rect x="266.5" y="1011.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="269.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (2 samples, 0.16%)</title><rect x="266.5" y="995.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="269.5" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (1 samples, 0.08%)</title><rect x="266.5" y="979.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="269.5" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="267.4" y="979.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="270.4" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="267.4" y="963.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="270.4" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="267.4" y="947.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="270.4" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="267.4" y="931.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="270.4" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="267.4" y="915.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="270.4" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="267.4" y="899.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="270.4" y="910.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$236/1800748430.get (1 samples, 0.08%)</title><rect x="267.4" y="883.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="270.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.08%)</title><rect x="268.4" y="1011.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="271.4" y="1022.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.08%)</title><rect x="268.4" y="995.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="271.4" y="1006.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.08%)</title><rect x="268.4" y="979.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="271.4" y="990.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.08%)</title><rect x="268.4" y="963.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="271.4" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="268.4" y="947.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="271.4" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="268.4" y="931.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="271.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.08%)</title><rect x="269.3" y="1011.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="272.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.08%)</title><rect x="269.3" y="995.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="272.3" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="269.3" y="979.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="272.3" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="269.3" y="963.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="272.3" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="269.3" y="947.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="272.3" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="269.3" y="931.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="272.3" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="269.3" y="915.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="272.3" y="926.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.08%)</title><rect x="269.3" y="899.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="272.3" y="910.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (1 samples, 0.08%)</title><rect x="269.3" y="883.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="272.3" y="894.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.08%)</title><rect x="269.3" y="867.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="272.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.08%)</title><rect x="270.2" y="1027.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="273.2" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.08%)</title><rect x="270.2" y="1011.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="273.2" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="270.2" y="995.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="273.2" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="270.2" y="979.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="273.2" y="990.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="270.2" y="963.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="273.2" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="270.2" y="947.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="273.2" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="270.2" y="931.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="273.2" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.08%)</title><rect x="270.2" y="915.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="273.2" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.08%)</title><rect x="270.2" y="899.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="273.2" y="910.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.08%)</title><rect x="270.2" y="883.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="273.2" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.08%)</title><rect x="270.2" y="867.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="273.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$229/1462393294.apply (1 samples, 0.08%)</title><rect x="270.2" y="851.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="273.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.lambda$stream$0 (1 samples, 0.08%)</title><rect x="270.2" y="835.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="273.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerInterceptors.onConsume (1 samples, 0.08%)</title><rect x="271.1" y="1059.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="274.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.08%)</title><rect x="272.0" y="1059.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="275.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.08%)</title><rect x="272.0" y="1043.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="275.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 0.31%)</title><rect x="272.9" y="1059.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="275.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.31%)</title><rect x="272.9" y="1043.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="275.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (2 samples, 0.16%)</title><rect x="272.9" y="1027.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="275.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (2 samples, 0.16%)</title><rect x="272.9" y="1011.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="275.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.08%)</title><rect x="272.9" y="995.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="275.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="272.9" y="979.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="275.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.08%)</title><rect x="272.9" y="963.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="275.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="272.9" y="947.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="275.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="272.9" y="931.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="275.9" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.08%)</title><rect x="272.9" y="915.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="275.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="272.9" y="899.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="275.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.08%)</title><rect x="272.9" y="883.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="275.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$16.read (1 samples, 0.08%)</title><rect x="272.9" y="867.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="275.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$16.read (1 samples, 0.08%)</title><rect x="272.9" y="851.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="275.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/MemoryRecords.readableRecords (1 samples, 0.08%)</title><rect x="272.9" y="835.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="275.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/MemoryRecords.&lt;init&gt; (1 samples, 0.08%)</title><rect x="272.9" y="819.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="275.9" y="830.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.08%)</title><rect x="272.9" y="803.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="275.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestHeader.apiKey (1 samples, 0.08%)</title><rect x="273.9" y="995.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="276.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.16%)</title><rect x="274.8" y="1027.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="277.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.16%)</title><rect x="274.8" y="1011.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="277.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.16%)</title><rect x="274.8" y="995.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="277.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.16%)</title><rect x="274.8" y="979.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="277.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.16%)</title><rect x="274.8" y="963.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="277.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.16%)</title><rect x="274.8" y="947.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="277.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.16%)</title><rect x="274.8" y="931.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="277.8" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.16%)</title><rect x="274.8" y="915.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="277.8" y="926.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="274.8" y="899.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="277.8" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.08%)</title><rect x="275.7" y="899.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="278.7" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.08%)</title><rect x="275.7" y="883.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="278.7" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.08%)</title><rect x="275.7" y="867.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="278.7" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.08%)</title><rect x="275.7" y="851.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="278.7" y="862.0"></text>
</g>
<g>
<title>__read (1 samples, 0.08%)</title><rect x="275.7" y="835.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="278.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (8 samples, 0.62%)</title><rect x="276.6" y="1059.0" width="7.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="279.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.08%)</title><rect x="277.5" y="1043.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="280.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.08%)</title><rect x="277.5" y="1027.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="280.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.newClientRequest (1 samples, 0.08%)</title><rect x="277.5" y="1011.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="280.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.&lt;init&gt; (1 samples, 0.08%)</title><rect x="277.5" y="995.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="280.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (6 samples, 0.47%)</title><rect x="278.4" y="1043.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="281.4" y="1054.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (4 samples, 0.31%)</title><rect x="278.4" y="1027.0" width="3.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="281.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$256/674172833.accept (4 samples, 0.31%)</title><rect x="278.4" y="1011.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="281.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (2 samples, 0.16%)</title><rect x="280.3" y="995.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="283.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.16%)</title><rect x="280.3" y="979.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="283.3" y="990.0"></text>
</g>
<g>
<title>java/util/Optional.map (1 samples, 0.08%)</title><rect x="280.3" y="963.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="283.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$227/1135446120.apply (1 samples, 0.08%)</title><rect x="280.3" y="947.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="283.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lambda$leaderAndEpoch$6 (1 samples, 0.08%)</title><rect x="280.3" y="931.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="283.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.08%)</title><rect x="281.2" y="963.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="284.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.08%)</title><rect x="281.2" y="947.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="284.2" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="281.2" y="931.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="284.2" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="281.2" y="915.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="284.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.08%)</title><rect x="282.1" y="1027.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="285.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.milliseconds (1 samples, 0.08%)</title><rect x="283.0" y="1027.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="286.0" y="1038.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="283.0" y="1011.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="286.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.08%)</title><rect x="283.9" y="1059.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="286.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="283.9" y="1043.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="286.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="283.9" y="1027.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="286.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="283.9" y="1011.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="286.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.08%)</title><rect x="283.9" y="995.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="286.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.08%)</title><rect x="284.8" y="1075.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="287.8" y="1086.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="284.8" y="1059.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="287.8" y="1070.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="284.8" y="1043.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="287.8" y="1054.0"></text>
</g>
<g>
<title>java/lang/Thread.run (755 samples, 58.62%)</title><rect x="285.8" y="1123.0" width="691.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="288.8" y="1134.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (755 samples, 58.62%)</title><rect x="285.8" y="1107.0" width="691.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="288.8" y="1118.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (755 samples, 58.62%)</title><rect x="285.8" y="1091.0" width="691.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="288.8" y="1102.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/1809297693.run (517 samples, 40.14%)</title><rect x="292.2" y="1075.0" width="473.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="295.2" y="1086.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (517 samples, 40.14%)</title><rect x="292.2" y="1059.0" width="473.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="295.2" y="1070.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTa..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (517 samples, 40.14%)</title><rect x="292.2" y="1043.0" width="473.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="295.2" y="1054.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (510 samples, 39.60%)</title><rect x="292.2" y="1027.0" width="467.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="295.2" y="1038.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleT..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (181 samples, 14.05%)</title><rect x="300.4" y="1011.0" width="165.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="303.4" y="1022.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (181 samples, 14.05%)</title><rect x="300.4" y="995.0" width="165.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="303.4" y="1006.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (181 samples, 14.05%)</title><rect x="300.4" y="979.0" width="165.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="303.4" y="990.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (181 samples, 14.05%)</title><rect x="300.4" y="963.0" width="165.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="303.4" y="974.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (181 samples, 14.05%)</title><rect x="300.4" y="947.0" width="165.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="303.4" y="958.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (181 samples, 14.05%)</title><rect x="300.4" y="931.0" width="165.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="303.4" y="942.0">com/fasterxml/jackson..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (76 samples, 5.90%)</title><rect x="300.4" y="915.0" width="69.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="303.4" y="926.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (46 samples, 3.57%)</title><rect x="300.4" y="899.0" width="42.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="303.4" y="910.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (43 samples, 3.34%)</title><rect x="300.4" y="883.0" width="39.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="303.4" y="894.0">com..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="326.1" y="867.0" width="1.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="329.1" y="878.0"></text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.70%)</title><rect x="327.9" y="867.0" width="8.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="330.9" y="878.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.47%)</title><rect x="330.7" y="851.0" width="5.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="333.7" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 0.31%)</title><rect x="336.1" y="867.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="339.1" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.31%)</title><rect x="336.1" y="851.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="339.1" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.31%)</title><rect x="336.1" y="835.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="339.1" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.31%)</title><rect x="336.1" y="819.0" width="3.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="339.1" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (4 samples, 0.31%)</title><rect x="336.1" y="803.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="339.1" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (3 samples, 0.23%)</title><rect x="339.8" y="883.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="342.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.08%)</title><rect x="339.8" y="867.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="342.8" y="878.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.16%)</title><rect x="340.7" y="867.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="343.7" y="878.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (2 samples, 0.16%)</title><rect x="340.7" y="851.0" width="1.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="343.7" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (30 samples, 2.33%)</title><rect x="342.6" y="899.0" width="27.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="345.6" y="910.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="342.6" y="883.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="345.6" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (3 samples, 0.23%)</title><rect x="343.5" y="883.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="346.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (26 samples, 2.02%)</title><rect x="346.2" y="883.0" width="23.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="349.2" y="894.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (4 samples, 0.31%)</title><rect x="351.7" y="867.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="354.7" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.08%)</title><rect x="354.5" y="851.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="357.5" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (7 samples, 0.54%)</title><rect x="355.4" y="867.0" width="6.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="358.4" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="355.4" y="851.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="358.4" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="355.4" y="835.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="358.4" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="355.4" y="819.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="358.4" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (6 samples, 0.47%)</title><rect x="356.3" y="851.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="359.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.08%)</title><rect x="356.3" y="835.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="359.3" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="356.3" y="819.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="359.3" y="830.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="356.3" y="803.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="359.3" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="356.3" y="787.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="359.3" y="798.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="356.3" y="771.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="359.3" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="356.3" y="755.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="359.3" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (5 samples, 0.39%)</title><rect x="357.2" y="835.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="360.2" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (9 samples, 0.70%)</title><rect x="361.8" y="867.0" width="8.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="364.8" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.08%)</title><rect x="369.1" y="851.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="372.1" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="369.1" y="835.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="372.1" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="369.1" y="819.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="372.1" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="369.1" y="803.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="372.1" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (91 samples, 7.07%)</title><rect x="370.0" y="915.0" width="83.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="373.0" y="926.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (5 samples, 0.39%)</title><rect x="370.0" y="899.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="373.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (5 samples, 0.39%)</title><rect x="370.0" y="883.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="373.0" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (5 samples, 0.39%)</title><rect x="370.0" y="867.0" width="4.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="373.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (5 samples, 0.39%)</title><rect x="370.0" y="851.0" width="4.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="373.0" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (10 samples, 0.78%)</title><rect x="374.6" y="899.0" width="9.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="377.6" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (10 samples, 0.78%)</title><rect x="374.6" y="883.0" width="9.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="377.6" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.08%)</title><rect x="380.1" y="867.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="383.1" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (3 samples, 0.23%)</title><rect x="381.0" y="867.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="384.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (13 samples, 1.01%)</title><rect x="383.8" y="899.0" width="11.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="386.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (13 samples, 1.01%)</title><rect x="383.8" y="883.0" width="11.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="386.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (11 samples, 0.85%)</title><rect x="384.7" y="867.0" width="10.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="387.7" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (10 samples, 0.78%)</title><rect x="385.6" y="851.0" width="9.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="388.6" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="389.3" y="835.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="392.3" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="389.3" y="819.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="392.3" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="389.3" y="803.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="392.3" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (5 samples, 0.39%)</title><rect x="390.2" y="835.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="393.2" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.08%)</title><rect x="394.8" y="867.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="397.8" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.08%)</title><rect x="394.8" y="851.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="397.8" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (3 samples, 0.23%)</title><rect x="395.7" y="899.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="398.7" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.16%)</title><rect x="396.6" y="883.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="399.6" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (60 samples, 4.66%)</title><rect x="398.4" y="899.0" width="55.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="401.4" y="910.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (22 samples, 1.71%)</title><rect x="398.4" y="883.0" width="20.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="401.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.08%)</title><rect x="408.5" y="867.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="411.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.39%)</title><rect x="409.4" y="867.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="412.4" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.39%)</title><rect x="409.4" y="851.0" width="4.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="412.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.39%)</title><rect x="409.4" y="835.0" width="4.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="412.4" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (5 samples, 0.39%)</title><rect x="414.0" y="867.0" width="4.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="417.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (38 samples, 2.95%)</title><rect x="418.6" y="883.0" width="34.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="421.6" y="894.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (38 samples, 2.95%)</title><rect x="418.6" y="867.0" width="34.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="421.6" y="878.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (38 samples, 2.95%)</title><rect x="418.6" y="851.0" width="34.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="421.6" y="862.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (13 samples, 1.01%)</title><rect x="422.3" y="835.0" width="11.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="425.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.54%)</title><rect x="425.9" y="819.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="428.9" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.54%)</title><rect x="425.9" y="803.0" width="6.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="428.9" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.54%)</title><rect x="425.9" y="787.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="428.9" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.31%)</title><rect x="428.7" y="771.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="431.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.08%)</title><rect x="432.3" y="819.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="435.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.08%)</title><rect x="432.3" y="803.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="435.3" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.08%)</title><rect x="433.3" y="819.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="436.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (9 samples, 0.70%)</title><rect x="434.2" y="835.0" width="8.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="437.2" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (7 samples, 0.54%)</title><rect x="436.0" y="819.0" width="6.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="439.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (1 samples, 0.08%)</title><rect x="436.0" y="803.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="439.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (1 samples, 0.08%)</title><rect x="436.0" y="787.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="439.0" y="798.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.08%)</title><rect x="436.0" y="771.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="439.0" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="436.0" y="755.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="439.0" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.47%)</title><rect x="436.9" y="803.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="439.9" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.47%)</title><rect x="436.9" y="787.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="439.9" y="798.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (6 samples, 0.47%)</title><rect x="436.9" y="771.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="439.9" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.08%)</title><rect x="442.4" y="835.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="445.4" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (4 samples, 0.31%)</title><rect x="443.3" y="835.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="446.3" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (4 samples, 0.31%)</title><rect x="443.3" y="819.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="446.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (3 samples, 0.23%)</title><rect x="444.3" y="803.0" width="2.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="447.3" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (3 samples, 0.23%)</title><rect x="444.3" y="787.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="447.3" y="798.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (3 samples, 0.23%)</title><rect x="444.3" y="771.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="447.3" y="782.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (3 samples, 0.23%)</title><rect x="444.3" y="755.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="447.3" y="766.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (3 samples, 0.23%)</title><rect x="444.3" y="739.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="447.3" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (6 samples, 0.47%)</title><rect x="447.0" y="835.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="450.0" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.47%)</title><rect x="447.0" y="819.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="450.0" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.47%)</title><rect x="447.0" y="803.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="450.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.08%)</title><rect x="452.5" y="835.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="455.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.08%)</title><rect x="452.5" y="819.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="455.5" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (14 samples, 1.09%)</title><rect x="453.4" y="915.0" width="12.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="456.4" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (14 samples, 1.09%)</title><rect x="453.4" y="899.0" width="12.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="456.4" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (14 samples, 1.09%)</title><rect x="453.4" y="883.0" width="12.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="456.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.08%)</title><rect x="455.2" y="867.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="458.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (3 samples, 0.23%)</title><rect x="456.2" y="867.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="459.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (2 samples, 0.16%)</title><rect x="458.9" y="867.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="461.9" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (6 samples, 0.47%)</title><rect x="460.7" y="867.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="463.7" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.47%)</title><rect x="460.7" y="851.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="463.7" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (278 samples, 21.58%)</title><rect x="466.2" y="1011.0" width="254.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="469.2" y="1022.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (49 samples, 3.80%)</title><rect x="466.2" y="995.0" width="44.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="469.2" y="1006.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (2 samples, 0.16%)</title><rect x="466.2" y="979.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="469.2" y="990.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (47 samples, 3.65%)</title><rect x="468.1" y="979.0" width="43.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="471.1" y="990.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (45 samples, 3.49%)</title><rect x="469.9" y="963.0" width="41.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="472.9" y="974.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (7 samples, 0.54%)</title><rect x="469.9" y="947.0" width="6.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="472.9" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 0.54%)</title><rect x="469.9" y="931.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="472.9" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (7 samples, 0.54%)</title><rect x="469.9" y="915.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="472.9" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.54%)</title><rect x="469.9" y="899.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="472.9" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="476.3" y="947.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="479.3" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="476.3" y="931.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="479.3" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="476.3" y="915.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="479.3" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.08%)</title><rect x="476.3" y="899.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="479.3" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (37 samples, 2.87%)</title><rect x="477.2" y="947.0" width="33.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="480.2" y="958.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (33 samples, 2.56%)</title><rect x="480.9" y="931.0" width="30.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="483.9" y="942.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 0.54%)</title><rect x="504.7" y="915.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="507.7" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.54%)</title><rect x="511.1" y="995.0" width="6.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="514.1" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.39%)</title><rect x="513.0" y="979.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="516.0" y="990.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.39%)</title><rect x="513.0" y="963.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="516.0" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (167 samples, 12.97%)</title><rect x="517.5" y="995.0" width="153.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="520.5" y="1006.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (167 samples, 12.97%)</title><rect x="517.5" y="979.0" width="153.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="520.5" y="990.0">com/linecorp/decato..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="525.8" y="963.0" width="0.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="528.8" y="974.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="525.8" y="947.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="528.8" y="958.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.16%)</title><rect x="526.7" y="963.0" width="1.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="529.7" y="974.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="526.7" y="947.0" width="1.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="529.7" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (68 samples, 5.28%)</title><rect x="528.5" y="963.0" width="62.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="531.5" y="974.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (39 samples, 3.03%)</title><rect x="545.0" y="947.0" width="35.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="548.0" y="958.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (38 samples, 2.95%)</title><rect x="545.9" y="931.0" width="34.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="548.9" y="942.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (19 samples, 1.48%)</title><rect x="558.8" y="915.0" width="17.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="561.8" y="926.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (19 samples, 1.48%)</title><rect x="558.8" y="899.0" width="17.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="561.8" y="910.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (19 samples, 1.48%)</title><rect x="558.8" y="883.0" width="17.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="561.8" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (18 samples, 1.40%)</title><rect x="558.8" y="867.0" width="16.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="561.8" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.08%)</title><rect x="558.8" y="851.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="561.8" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.16%)</title><rect x="559.7" y="851.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="562.7" y="862.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="559.7" y="835.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="562.7" y="846.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="559.7" y="819.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="562.7" y="830.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="560.6" y="835.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="563.6" y="846.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.08%)</title><rect x="560.6" y="819.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="563.6" y="830.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.08%)</title><rect x="561.5" y="851.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="564.5" y="862.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (13 samples, 1.01%)</title><rect x="562.4" y="851.0" width="11.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="565.4" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (11 samples, 0.85%)</title><rect x="563.4" y="835.0" width="10.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="566.4" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (3 samples, 0.23%)</title><rect x="563.4" y="819.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="566.4" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (2 samples, 0.16%)</title><rect x="563.4" y="803.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="566.4" y="814.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (2 samples, 0.16%)</title><rect x="563.4" y="787.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="566.4" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (2 samples, 0.16%)</title><rect x="563.4" y="771.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="566.4" y="782.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (2 samples, 0.16%)</title><rect x="563.4" y="755.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="566.4" y="766.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.08%)</title><rect x="563.4" y="739.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="566.4" y="750.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (1 samples, 0.08%)</title><rect x="564.3" y="739.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="567.3" y="750.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.08%)</title><rect x="565.2" y="803.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="568.2" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (4 samples, 0.31%)</title><rect x="566.1" y="819.0" width="3.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="569.1" y="830.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.08%)</title><rect x="569.8" y="819.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="572.8" y="830.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="570.7" y="819.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="573.7" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="570.7" y="803.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="573.7" y="814.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="571.6" y="819.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="574.6" y="830.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="572.5" y="819.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="575.5" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="573.4" y="835.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="576.4" y="846.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (1 samples, 0.08%)</title><rect x="574.3" y="851.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="577.3" y="862.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="575.3" y="867.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="578.3" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="575.3" y="851.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="578.3" y="862.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.08%)</title><rect x="576.2" y="915.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="579.2" y="926.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.23%)</title><rect x="577.1" y="915.0" width="2.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="580.1" y="926.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="579.8" y="915.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="582.8" y="926.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.08%)</title><rect x="580.8" y="947.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="583.8" y="958.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.08%)</title><rect x="580.8" y="931.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="583.8" y="942.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.08%)</title><rect x="580.8" y="915.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="583.8" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="580.8" y="899.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="583.8" y="910.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="581.7" y="947.0" width="0.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="584.7" y="958.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (9 samples, 0.70%)</title><rect x="582.6" y="947.0" width="8.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="585.6" y="958.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (11 samples, 0.85%)</title><rect x="590.8" y="963.0" width="10.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="593.8" y="974.0"></text>
</g>
<g>
<title>java/lang/Long.toString (11 samples, 0.85%)</title><rect x="590.8" y="947.0" width="10.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="593.8" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="590.8" y="931.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="593.8" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="591.8" y="931.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="594.8" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.08%)</title><rect x="591.8" y="915.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="594.8" y="926.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (9 samples, 0.70%)</title><rect x="592.7" y="931.0" width="8.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="595.7" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.08%)</title><rect x="600.0" y="915.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="603.0" y="926.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (76 samples, 5.90%)</title><rect x="600.9" y="963.0" width="69.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="603.9" y="974.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (76 samples, 5.90%)</title><rect x="600.9" y="947.0" width="69.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="603.9" y="958.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (31 samples, 2.41%)</title><rect x="600.9" y="931.0" width="28.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="603.9" y="942.0">ch..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (31 samples, 2.41%)</title><rect x="600.9" y="915.0" width="28.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="603.9" y="926.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (17 samples, 1.32%)</title><rect x="613.7" y="899.0" width="15.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="616.7" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (17 samples, 1.32%)</title><rect x="613.7" y="883.0" width="15.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="616.7" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (17 samples, 1.32%)</title><rect x="613.7" y="867.0" width="15.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="616.7" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (45 samples, 3.49%)</title><rect x="629.3" y="931.0" width="41.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="632.3" y="942.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (40 samples, 3.11%)</title><rect x="633.9" y="915.0" width="36.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="636.9" y="926.0">jav..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.16%)</title><rect x="637.6" y="899.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="640.6" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.23%)</title><rect x="639.4" y="899.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="642.4" y="910.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.23%)</title><rect x="639.4" y="883.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="642.4" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (31 samples, 2.41%)</title><rect x="642.1" y="899.0" width="28.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="645.1" y="910.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (5 samples, 0.39%)</title><rect x="657.7" y="883.0" width="4.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="660.7" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (4 samples, 0.31%)</title><rect x="662.3" y="883.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="665.3" y="894.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 0.39%)</title><rect x="666.0" y="883.0" width="4.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="669.0" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (45 samples, 3.49%)</title><rect x="670.5" y="995.0" width="41.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="673.5" y="1006.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (45 samples, 3.49%)</title><rect x="670.5" y="979.0" width="41.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="673.5" y="990.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1552744540.process (16 samples, 1.24%)</title><rect x="670.5" y="963.0" width="14.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="673.5" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (15 samples, 1.16%)</title><rect x="670.5" y="947.0" width="13.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="673.5" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (12 samples, 0.93%)</title><rect x="670.5" y="931.0" width="11.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="673.5" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.08%)</title><rect x="677.0" y="915.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="680.0" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.08%)</title><rect x="677.0" y="899.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="680.0" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.08%)</title><rect x="677.0" y="883.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="680.0" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.08%)</title><rect x="677.0" y="867.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="680.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.08%)</title><rect x="677.0" y="851.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="680.0" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (3 samples, 0.23%)</title><rect x="677.9" y="915.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="680.9" y="926.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.23%)</title><rect x="677.9" y="899.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="680.9" y="910.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.23%)</title><rect x="677.9" y="883.0" width="2.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="680.9" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="680.6" y="915.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="683.6" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="680.6" y="899.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="683.6" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="680.6" y="883.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="683.6" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.23%)</title><rect x="681.5" y="931.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="684.5" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.16%)</title><rect x="682.5" y="915.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="685.5" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.16%)</title><rect x="682.5" y="899.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="685.5" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.16%)</title><rect x="682.5" y="883.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="685.5" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="684.3" y="947.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="687.3" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (4 samples, 0.31%)</title><rect x="685.2" y="963.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="688.2" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.23%)</title><rect x="688.9" y="963.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="691.9" y="974.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.23%)</title><rect x="688.9" y="947.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="691.9" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.loggingExceptions (1 samples, 0.08%)</title><rect x="691.6" y="963.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="694.6" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$282/103635914.get (1 samples, 0.08%)</title><rect x="691.6" y="947.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="694.6" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.lambda$pushDownStream$66 (1 samples, 0.08%)</title><rect x="691.6" y="931.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="694.6" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1016925085.linkToTargetMethod (1 samples, 0.08%)</title><rect x="692.5" y="963.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="695.5" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.08%)</title><rect x="692.5" y="947.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="695.5" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$286/587217444.get$Lambda (1 samples, 0.08%)</title><rect x="692.5" y="931.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="695.5" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="692.5" y="915.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="695.5" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="692.5" y="899.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="695.5" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="692.5" y="883.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="695.5" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.16%)</title><rect x="693.4" y="963.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="696.4" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.16%)</title><rect x="693.4" y="947.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="696.4" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (11 samples, 0.85%)</title><rect x="695.3" y="963.0" width="10.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="698.3" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 0.62%)</title><rect x="698.0" y="947.0" width="7.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="701.0" y="958.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.31%)</title><rect x="698.0" y="931.0" width="3.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="701.0" y="942.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (4 samples, 0.31%)</title><rect x="701.7" y="931.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="704.7" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (7 samples, 0.54%)</title><rect x="705.4" y="963.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="708.4" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.39%)</title><rect x="707.2" y="947.0" width="4.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="710.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 0.78%)</title><rect x="711.8" y="995.0" width="9.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="714.8" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 0.78%)</title><rect x="711.8" y="979.0" width="9.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="714.8" y="990.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.23%)</title><rect x="713.6" y="963.0" width="2.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="716.6" y="974.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.23%)</title><rect x="713.6" y="947.0" width="2.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="716.6" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 0.39%)</title><rect x="716.4" y="963.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="719.4" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$292/742000353.accept (5 samples, 0.39%)</title><rect x="716.4" y="947.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="719.4" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$45 (5 samples, 0.39%)</title><rect x="716.4" y="931.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="719.4" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/1519274758.complete (5 samples, 0.39%)</title><rect x="716.4" y="915.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="719.4" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$5 (5 samples, 0.39%)</title><rect x="716.4" y="899.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="719.4" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/677550000.complete (5 samples, 0.39%)</title><rect x="716.4" y="883.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="719.4" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (5 samples, 0.39%)</title><rect x="716.4" y="867.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="719.4" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (5 samples, 0.39%)</title><rect x="716.4" y="851.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="719.4" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (5 samples, 0.39%)</title><rect x="716.4" y="835.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="719.4" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (5 samples, 0.39%)</title><rect x="716.4" y="819.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="719.4" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (5 samples, 0.39%)</title><rect x="716.4" y="803.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="719.4" y="814.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="720.0" y="787.0" width="0.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="723.0" y="798.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="720.0" y="771.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="723.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (32 samples, 2.48%)</title><rect x="720.9" y="1011.0" width="29.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="723.9" y="1022.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (32 samples, 2.48%)</title><rect x="720.9" y="995.0" width="29.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="723.9" y="1006.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.08%)</title><rect x="721.8" y="979.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="724.8" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (30 samples, 2.33%)</title><rect x="722.8" y="979.0" width="27.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="725.8" y="990.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$292/742000353.accept (30 samples, 2.33%)</title><rect x="722.8" y="963.0" width="27.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="725.8" y="974.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$45 (30 samples, 2.33%)</title><rect x="722.8" y="947.0" width="27.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="725.8" y="958.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/1519274758.complete (30 samples, 2.33%)</title><rect x="722.8" y="931.0" width="27.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="725.8" y="942.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$5 (30 samples, 2.33%)</title><rect x="722.8" y="915.0" width="27.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="725.8" y="926.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/677550000.complete (27 samples, 2.10%)</title><rect x="722.8" y="899.0" width="24.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="725.8" y="910.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (27 samples, 2.10%)</title><rect x="722.8" y="883.0" width="24.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="725.8" y="894.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (27 samples, 2.10%)</title><rect x="722.8" y="867.0" width="24.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="725.8" y="878.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (27 samples, 2.10%)</title><rect x="722.8" y="851.0" width="24.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="725.8" y="862.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (27 samples, 2.10%)</title><rect x="722.8" y="835.0" width="24.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="725.8" y="846.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (27 samples, 2.10%)</title><rect x="722.8" y="819.0" width="24.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="725.8" y="830.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$276/2017596214.complete (3 samples, 0.23%)</title><rect x="747.5" y="899.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="750.5" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$null$70 (3 samples, 0.23%)</title><rect x="747.5" y="883.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="750.5" y="894.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (10 samples, 0.78%)</title><rect x="750.2" y="1011.0" width="9.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="753.2" y="1022.0"></text>
</g>
<g>
<title>[vdso] (10 samples, 0.78%)</title><rect x="750.2" y="995.0" width="9.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="753.2" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (2 samples, 0.16%)</title><rect x="759.4" y="1027.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="762.4" y="1038.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.16%)</title><rect x="759.4" y="1011.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="762.4" y="1022.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.16%)</title><rect x="759.4" y="995.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="762.4" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="759.4" y="979.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="762.4" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.16%)</title><rect x="759.4" y="963.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="762.4" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="759.4" y="947.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="762.4" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="760.3" y="947.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="763.3" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="760.3" y="931.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="763.3" y="942.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="760.3" y="915.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="763.3" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (5 samples, 0.39%)</title><rect x="761.2" y="1027.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="764.2" y="1038.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.23%)</title><rect x="762.2" y="1011.0" width="2.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="765.2" y="1022.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.23%)</title><rect x="762.2" y="995.0" width="2.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="765.2" y="1006.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="764.9" y="1011.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="767.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (4 samples, 0.31%)</title><rect x="765.8" y="1075.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="768.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.31%)</title><rect x="765.8" y="1059.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="768.8" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.31%)</title><rect x="765.8" y="1043.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="768.8" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.31%)</title><rect x="765.8" y="1027.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="768.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.08%)</title><rect x="768.6" y="1011.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="771.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (227 samples, 17.62%)</title><rect x="769.5" y="1075.0" width="208.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="772.5" y="1086.0">java/util/concurrent/Thread..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (226 samples, 17.55%)</title><rect x="770.4" y="1059.0" width="207.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="773.4" y="1070.0">java/util/concurrent/Linked..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (201 samples, 15.61%)</title><rect x="770.4" y="1043.0" width="184.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="773.4" y="1054.0">java/util/concurrent/loc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (10 samples, 0.78%)</title><rect x="779.6" y="1027.0" width="9.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="782.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (4 samples, 0.31%)</title><rect x="788.7" y="1027.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="791.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (4 samples, 0.31%)</title><rect x="788.7" y="1011.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="791.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (177 samples, 13.74%)</title><rect x="792.4" y="1027.0" width="162.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="795.4" y="1038.0">java/util/concurrent/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (163 samples, 12.66%)</title><rect x="805.2" y="1011.0" width="149.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="808.2" y="1022.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.08%)</title><rect x="814.4" y="995.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="817.4" y="1006.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="815.3" y="995.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="818.3" y="1006.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="816.2" y="995.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="819.2" y="1006.0"></text>
</g>
<g>
<title>Unsafe_Park (145 samples, 11.26%)</title><rect x="817.1" y="995.0" width="132.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="820.1" y="1006.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.23%)</title><rect x="821.7" y="979.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="824.7" y="990.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.08%)</title><rect x="824.5" y="979.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="827.5" y="990.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (28 samples, 2.17%)</title><rect x="825.4" y="979.0" width="25.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="828.4" y="990.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (7 samples, 0.54%)</title><rect x="834.5" y="963.0" width="6.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="837.5" y="974.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="835.5" y="947.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="838.5" y="958.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="835.5" y="931.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="838.5" y="942.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.08%)</title><rect x="836.4" y="947.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="839.4" y="958.0"></text>
</g>
<g>
<title>pthread_getspecific (4 samples, 0.31%)</title><rect x="837.3" y="947.0" width="3.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="840.3" y="958.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="840.9" y="963.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="843.9" y="974.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.08%)</title><rect x="841.9" y="963.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="844.9" y="974.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (9 samples, 0.70%)</title><rect x="842.8" y="963.0" width="8.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="845.8" y="974.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.08%)</title><rect x="851.0" y="979.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="854.0" y="990.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.16%)</title><rect x="851.9" y="979.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="854.9" y="990.0"></text>
</g>
<g>
<title>__lll_lock_wait (8 samples, 0.62%)</title><rect x="853.8" y="979.0" width="7.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="856.8" y="990.0"></text>
</g>
<g>
<title>__lll_unlock_wake (30 samples, 2.33%)</title><rect x="861.1" y="979.0" width="27.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="864.1" y="990.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (48 samples, 3.73%)</title><rect x="888.6" y="979.0" width="44.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="891.6" y="990.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.16%)</title><rect x="932.6" y="979.0" width="1.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="935.6" y="990.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.23%)</title><rect x="934.4" y="979.0" width="2.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="937.4" y="990.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.08%)</title><rect x="937.1" y="979.0" width="1.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="940.1" y="990.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (9 samples, 0.70%)</title><rect x="938.1" y="979.0" width="8.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="941.1" y="990.0"></text>
</g>
<g>
<title>_init (1 samples, 0.08%)</title><rect x="946.3" y="979.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="949.3" y="990.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.23%)</title><rect x="947.2" y="979.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="950.2" y="990.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (5 samples, 0.39%)</title><rect x="950.0" y="995.0" width="4.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="953.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.08%)</title><rect x="954.5" y="1043.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="957.5" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (24 samples, 1.86%)</title><rect x="955.5" y="1043.0" width="22.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="958.5" y="1054.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (24 samples, 1.86%)</title><rect x="955.5" y="1027.0" width="22.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="958.5" y="1038.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (24 samples, 1.86%)</title><rect x="955.5" y="1011.0" width="22.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="958.5" y="1022.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (24 samples, 1.86%)</title><rect x="955.5" y="995.0" width="22.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="958.5" y="1006.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.16%)</title><rect x="977.5" y="1123.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="980.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 0.16%)</title><rect x="977.5" y="1107.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="980.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="977.5" y="1091.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="980.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.maybeThrowAnyException (1 samples, 0.08%)</title><rect x="977.5" y="1075.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="980.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.clearErrorsAndMaybeThrowException (1 samples, 0.08%)</title><rect x="977.5" y="1059.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="980.5" y="1070.0"></text>
</g>
<g>
<title>java/util/Optional.orElseGet (1 samples, 0.08%)</title><rect x="977.5" y="1043.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="980.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$85/1972637984.get (1 samples, 0.08%)</title><rect x="977.5" y="1027.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="980.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.08%)</title><rect x="978.4" y="1091.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="981.4" y="1102.0"></text>
</g>
<g>
<title>start_thread (230 samples, 17.86%)</title><rect x="979.3" y="1123.0" width="210.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="982.3" y="1134.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (230 samples, 17.86%)</title><rect x="979.3" y="1107.0" width="210.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="982.3" y="1118.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (28 samples, 2.17%)</title><rect x="979.3" y="1091.0" width="25.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="982.3" y="1102.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 0.23%)</title><rect x="979.3" y="1075.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="982.3" y="1086.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.23%)</title><rect x="979.3" y="1059.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="982.3" y="1070.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.08%)</title><rect x="979.3" y="1043.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="982.3" y="1054.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.16%)</title><rect x="980.2" y="1043.0" width="1.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="983.2" y="1054.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (25 samples, 1.94%)</title><rect x="982.0" y="1075.0" width="22.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="985.0" y="1086.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.39%)</title><rect x="982.0" y="1059.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="985.0" y="1070.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.08%)</title><rect x="982.0" y="1043.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="985.0" y="1054.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.08%)</title><rect x="982.0" y="1027.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="985.0" y="1038.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.08%)</title><rect x="983.0" y="1043.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="986.0" y="1054.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.08%)</title><rect x="983.9" y="1043.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="986.9" y="1054.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.16%)</title><rect x="984.8" y="1043.0" width="1.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="987.8" y="1054.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (9 samples, 0.70%)</title><rect x="986.6" y="1059.0" width="8.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="989.6" y="1070.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (6 samples, 0.47%)</title><rect x="986.6" y="1043.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="989.6" y="1054.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (6 samples, 0.47%)</title><rect x="986.6" y="1027.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="989.6" y="1038.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (6 samples, 0.47%)</title><rect x="986.6" y="1011.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="989.6" y="1022.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (6 samples, 0.47%)</title><rect x="986.6" y="995.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="989.6" y="1006.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)2, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.08%)</title><rect x="991.2" y="979.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="994.2" y="990.0"></text>
</g>
<g>
<title>InstanceMirrorKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.08%)</title><rect x="991.2" y="963.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="994.2" y="974.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.23%)</title><rect x="992.1" y="1043.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="995.1" y="1054.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.16%)</title><rect x="992.1" y="1027.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="995.1" y="1038.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.08%)</title><rect x="993.9" y="1027.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="996.9" y="1038.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.08%)</title><rect x="993.9" y="1011.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="996.9" y="1022.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (11 samples, 0.85%)</title><rect x="994.9" y="1059.0" width="10.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="997.9" y="1070.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (11 samples, 0.85%)</title><rect x="994.9" y="1043.0" width="10.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="997.9" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (8 samples, 0.62%)</title><rect x="994.9" y="1027.0" width="7.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="997.9" y="1038.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (8 samples, 0.62%)</title><rect x="994.9" y="1011.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="997.9" y="1022.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (6 samples, 0.47%)</title><rect x="996.7" y="995.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="999.7" y="1006.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (6 samples, 0.47%)</title><rect x="996.7" y="979.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="999.7" y="990.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.16%)</title><rect x="1000.4" y="963.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1003.4" y="974.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.08%)</title><rect x="1001.3" y="947.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1004.3" y="958.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (3 samples, 0.23%)</title><rect x="1002.2" y="1027.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1005.2" y="1038.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (2 samples, 0.16%)</title><rect x="1002.2" y="1011.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1005.2" y="1022.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.08%)</title><rect x="1003.1" y="995.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1006.1" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::start_cset_region_for_worker(unsigned int) (1 samples, 0.08%)</title><rect x="1004.0" y="1011.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1007.0" y="1022.0"></text>
</g>
<g>
<title>JavaThread::run() (199 samples, 15.45%)</title><rect x="1004.9" y="1091.0" width="182.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1007.9" y="1102.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (199 samples, 15.45%)</title><rect x="1004.9" y="1075.0" width="182.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1007.9" y="1086.0">JavaThread::thread_main_..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (198 samples, 15.37%)</title><rect x="1004.9" y="1059.0" width="181.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1007.9" y="1070.0">CompileBroker::compiler..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (198 samples, 15.37%)</title><rect x="1004.9" y="1043.0" width="181.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1007.9" y="1054.0">CompileBroker::invoke_c..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (196 samples, 15.22%)</title><rect x="1004.9" y="1027.0" width="179.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1007.9" y="1038.0">C2Compiler::compile_met..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (196 samples, 15.22%)</title><rect x="1004.9" y="1011.0" width="179.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1007.9" y="1022.0">Compile::Compile(ciEnv*..</text>
</g>
<g>
<title>Compile::Code_Gen() (82 samples, 6.37%)</title><rect x="1004.9" y="995.0" width="75.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1007.9" y="1006.0">Compile:..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.23%)</title><rect x="1004.9" y="979.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1007.9" y="990.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.16%)</title><rect x="1004.9" y="963.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1007.9" y="974.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.08%)</title><rect x="1006.8" y="963.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1009.8" y="974.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.08%)</title><rect x="1006.8" y="947.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1009.8" y="958.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.08%)</title><rect x="1006.8" y="931.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1009.8" y="942.0"></text>
</g>
<g>
<title>Assembler::pushq(Address) (1 samples, 0.08%)</title><rect x="1006.8" y="915.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1009.8" y="926.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 0.31%)</title><rect x="1007.7" y="979.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1010.7" y="990.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (4 samples, 0.31%)</title><rect x="1007.7" y="963.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1010.7" y="974.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.08%)</title><rect x="1009.5" y="947.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1012.5" y="958.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.08%)</title><rect x="1010.4" y="947.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1013.4" y="958.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="1010.4" y="931.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1013.4" y="942.0"></text>
</g>
<g>
<title>Matcher::match() (9 samples, 0.70%)</title><rect x="1011.4" y="979.0" width="8.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1014.4" y="990.0"></text>
</g>
<g>
<title>Arena::destruct_contents() (1 samples, 0.08%)</title><rect x="1011.4" y="963.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1014.4" y="974.0"></text>
</g>
<g>
<title>CheckCastPPNode::ideal_reg() const (1 samples, 0.08%)</title><rect x="1012.3" y="963.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1015.3" y="974.0"></text>
</g>
<g>
<title>ConNNode::Opcode() const (1 samples, 0.08%)</title><rect x="1013.2" y="963.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1016.2" y="974.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (6 samples, 0.47%)</title><rect x="1014.1" y="963.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1017.1" y="974.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (4 samples, 0.31%)</title><rect x="1015.0" y="947.0" width="3.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1018.0" y="958.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.08%)</title><rect x="1018.7" y="947.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1021.7" y="958.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.08%)</title><rect x="1018.7" y="931.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1021.7" y="942.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.08%)</title><rect x="1018.7" y="915.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1021.7" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 0.39%)</title><rect x="1019.6" y="979.0" width="4.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1022.6" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 0.39%)</title><rect x="1019.6" y="963.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1022.6" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1019.6" y="947.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1022.6" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.08%)</title><rect x="1019.6" y="931.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1022.6" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 0.16%)</title><rect x="1020.5" y="947.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1023.5" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.08%)</title><rect x="1021.4" y="931.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1024.4" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (2 samples, 0.16%)</title><rect x="1022.3" y="947.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1025.3" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.08%)</title><rect x="1023.3" y="931.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1026.3" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (60 samples, 4.66%)</title><rect x="1024.2" y="979.0" width="54.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1027.2" y="990.0">Phase..</text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.08%)</title><rect x="1024.2" y="963.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1027.2" y="974.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 0.23%)</title><rect x="1025.1" y="963.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1028.1" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 0.31%)</title><rect x="1027.8" y="963.0" width="3.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1030.8" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.08%)</title><rect x="1028.8" y="947.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1031.8" y="958.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.16%)</title><rect x="1029.7" y="947.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1032.7" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1030.6" y="931.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1033.6" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.23%)</title><rect x="1031.5" y="963.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1034.5" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.08%)</title><rect x="1031.5" y="947.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1034.5" y="958.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.16%)</title><rect x="1032.4" y="947.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1035.4" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1033.3" y="931.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1036.3" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (11 samples, 0.85%)</title><rect x="1034.3" y="963.0" width="10.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1037.3" y="974.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.08%)</title><rect x="1041.6" y="947.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1044.6" y="958.0"></text>
</g>
<g>
<title>MachProjNode::ideal_reg() const (1 samples, 0.08%)</title><rect x="1042.5" y="947.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1045.5" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.08%)</title><rect x="1043.4" y="947.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1046.4" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::clone_projs(Block*, unsigned int, Node*, Node*, unsigned int&amp;) (1 samples, 0.08%)</title><rect x="1043.4" y="931.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1046.4" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (13 samples, 1.01%)</title><rect x="1044.3" y="963.0" width="11.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1047.3" y="974.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.08%)</title><rect x="1049.8" y="947.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1052.8" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.23%)</title><rect x="1050.7" y="947.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1053.7" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1052.6" y="931.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1055.6" y="942.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.08%)</title><rect x="1053.5" y="947.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1056.5" y="958.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.08%)</title><rect x="1054.4" y="947.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1057.4" y="958.0"></text>
</g>
<g>
<title>xorL_rRegNode::rule() const (1 samples, 0.08%)</title><rect x="1055.3" y="947.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1058.3" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.08%)</title><rect x="1056.2" y="963.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1059.2" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.08%)</title><rect x="1056.2" y="947.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1059.2" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.31%)</title><rect x="1057.2" y="963.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1060.2" y="974.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.16%)</title><rect x="1058.1" y="947.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1061.1" y="958.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.08%)</title><rect x="1059.9" y="947.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1062.9" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 0.39%)</title><rect x="1060.8" y="963.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1063.8" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (5 samples, 0.39%)</title><rect x="1060.8" y="947.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1063.8" y="958.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.08%)</title><rect x="1065.4" y="963.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1068.4" y="974.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.16%)</title><rect x="1066.3" y="963.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1069.3" y="974.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.16%)</title><rect x="1066.3" y="947.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1069.3" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.08%)</title><rect x="1066.3" y="931.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1069.3" y="942.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.08%)</title><rect x="1067.2" y="931.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1070.2" y="942.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.08%)</title><rect x="1067.2" y="915.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1070.2" y="926.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 0.23%)</title><rect x="1068.2" y="963.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1071.2" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.23%)</title><rect x="1068.2" y="947.0" width="2.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1071.2" y="958.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.08%)</title><rect x="1070.9" y="963.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1073.9" y="974.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1070.9" y="947.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1073.9" y="958.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.08%)</title><rect x="1071.8" y="963.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1074.8" y="974.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.08%)</title><rect x="1071.8" y="947.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1074.8" y="958.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 0.39%)</title><rect x="1072.7" y="963.0" width="4.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1075.7" y="974.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.16%)</title><rect x="1075.5" y="947.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1078.5" y="958.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1076.4" y="931.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1079.4" y="942.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.08%)</title><rect x="1077.3" y="963.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1080.3" y="974.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.08%)</title><rect x="1078.2" y="963.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1081.2" y="974.0"></text>
</g>
<g>
<title>loadConPNode::ideal_Opcode() const (1 samples, 0.08%)</title><rect x="1079.1" y="979.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1082.1" y="990.0"></text>
</g>
<g>
<title>Compile::Optimize() (101 samples, 7.84%)</title><rect x="1080.1" y="995.0" width="92.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1083.1" y="1006.0">Compile::Op..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 0.16%)</title><rect x="1080.1" y="979.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1083.1" y="990.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 0.16%)</title><rect x="1080.1" y="963.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1083.1" y="974.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 0.16%)</title><rect x="1081.9" y="979.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1084.9" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.16%)</title><rect x="1081.9" y="963.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1084.9" y="974.0"></text>
</g>
<g>
<title>LoadNKlassNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1081.9" y="947.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1084.9" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1082.8" y="947.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1085.8" y="958.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1082.8" y="931.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1085.8" y="942.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.08%)</title><rect x="1082.8" y="915.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1085.8" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1082.8" y="899.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1085.8" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1082.8" y="883.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1085.8" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1082.8" y="867.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1085.8" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1082.8" y="851.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1085.8" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1082.8" y="835.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1085.8" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1082.8" y="819.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1085.8" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1082.8" y="803.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1085.8" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1082.8" y="787.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1085.8" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1082.8" y="771.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1085.8" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1082.8" y="755.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1085.8" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1082.8" y="739.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1085.8" y="750.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.08%)</title><rect x="1082.8" y="723.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1085.8" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (4 samples, 0.31%)</title><rect x="1083.7" y="979.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1086.7" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (4 samples, 0.31%)</title><rect x="1083.7" y="963.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1086.7" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (3 samples, 0.23%)</title><rect x="1084.6" y="947.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1087.6" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.16%)</title><rect x="1085.6" y="931.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1088.6" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.16%)</title><rect x="1085.6" y="915.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1088.6" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.16%)</title><rect x="1085.6" y="899.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1088.6" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.16%)</title><rect x="1085.6" y="883.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1088.6" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.16%)</title><rect x="1085.6" y="867.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1088.6" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.16%)</title><rect x="1085.6" y="851.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1088.6" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.16%)</title><rect x="1085.6" y="835.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1088.6" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.16%)</title><rect x="1085.6" y="819.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1088.6" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1085.6" y="803.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1088.6" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1085.6" y="787.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1088.6" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1085.6" y="771.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1088.6" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1085.6" y="755.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1088.6" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1085.6" y="739.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1088.6" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1085.6" y="723.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1088.6" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1085.6" y="707.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1088.6" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1085.6" y="691.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1088.6" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1085.6" y="675.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1088.6" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1085.6" y="659.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1088.6" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1085.6" y="643.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1088.6" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1085.6" y="627.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1088.6" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1085.6" y="611.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1088.6" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1085.6" y="595.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1088.6" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1085.6" y="579.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1088.6" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1085.6" y="563.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1088.6" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1085.6" y="547.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1088.6" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1085.6" y="531.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1088.6" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1085.6" y="515.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1088.6" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1085.6" y="499.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1088.6" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1085.6" y="483.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1088.6" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1085.6" y="467.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1088.6" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1085.6" y="451.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1088.6" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1085.6" y="435.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1088.6" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="1085.6" y="419.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1088.6" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1086.5" y="803.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1089.5" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1086.5" y="787.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1089.5" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1086.5" y="771.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1089.5" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1086.5" y="755.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1089.5" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1086.5" y="739.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1089.5" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1086.5" y="723.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1089.5" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1086.5" y="707.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1089.5" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1086.5" y="691.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1089.5" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1086.5" y="675.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1089.5" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="1086.5" y="659.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1089.5" y="670.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.08%)</title><rect x="1086.5" y="643.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1089.5" y="654.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="1086.5" y="627.0" width="0.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1089.5" y="638.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.16%)</title><rect x="1087.4" y="979.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1090.4" y="990.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.08%)</title><rect x="1088.3" y="963.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1091.3" y="974.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (2 samples, 0.16%)</title><rect x="1089.2" y="979.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1092.2" y="990.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (2 samples, 0.16%)</title><rect x="1089.2" y="963.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1092.2" y="974.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (2 samples, 0.16%)</title><rect x="1089.2" y="947.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1092.2" y="958.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1089.2" y="931.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1092.2" y="942.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1089.2" y="915.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1092.2" y="926.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1089.2" y="899.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1092.2" y="910.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1089.2" y="883.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1092.2" y="894.0"></text>
</g>
<g>
<title>ProjNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1090.1" y="931.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1093.1" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool) (1 samples, 0.08%)</title><rect x="1091.1" y="979.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1094.1" y="990.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1091.1" y="963.0" width="0.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1094.1" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (74 samples, 5.75%)</title><rect x="1092.0" y="979.0" width="67.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1095.0" y="990.0">PhaseId..</text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="1092.0" y="963.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1095.0" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="1092.0" y="947.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1095.0" y="958.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="1092.0" y="931.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1095.0" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_counted_loop(Node*, IdealLoopTree*) (1 samples, 0.08%)</title><rect x="1092.0" y="915.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1095.0" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.08%)</title><rect x="1092.0" y="899.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1095.0" y="910.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="1092.0" y="883.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1095.0" y="894.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1092.9" y="963.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1095.9" y="974.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1092.9" y="947.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1095.9" y="958.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1092.9" y="931.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1095.9" y="942.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1092.9" y="915.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1095.9" y="926.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1092.9" y="899.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1095.9" y="910.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1092.9" y="883.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1095.9" y="894.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1092.9" y="867.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1095.9" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1092.9" y="851.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1095.9" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::recompute_dom_depth() (1 samples, 0.08%)</title><rect x="1092.9" y="835.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1095.9" y="846.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.08%)</title><rect x="1093.8" y="963.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1096.8" y="974.0"></text>
</g>
<g>
<title>Node::is_CFG() const (2 samples, 0.16%)</title><rect x="1094.7" y="963.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1097.7" y="974.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.08%)</title><rect x="1096.6" y="963.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1099.6" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (5 samples, 0.39%)</title><rect x="1097.5" y="963.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1100.5" y="974.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.08%)</title><rect x="1101.1" y="947.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1104.1" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 0.39%)</title><rect x="1102.0" y="963.0" width="4.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1105.0" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1105.7" y="947.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1108.7" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (48 samples, 3.73%)</title><rect x="1106.6" y="963.0" width="44.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1109.6" y="974.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (43 samples, 3.34%)</title><rect x="1111.2" y="947.0" width="39.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1114.2" y="958.0">Pha..</text>
</g>
<g>
<title>Node::unique_ctrl_out() (1 samples, 0.08%)</title><rect x="1112.1" y="931.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1115.1" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1113.0" y="931.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1116.0" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (39 samples, 3.03%)</title><rect x="1114.0" y="931.0" width="35.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1117.0" y="942.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.08%)</title><rect x="1141.4" y="915.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.4" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1141.4" y="899.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.4" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1141.4" y="883.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.4" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.23%)</title><rect x="1142.4" y="915.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.4" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (5 samples, 0.39%)</title><rect x="1145.1" y="915.0" width="4.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1148.1" y="926.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.08%)</title><rect x="1149.7" y="931.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.7" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.16%)</title><rect x="1150.6" y="963.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.6" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.08%)</title><rect x="1151.5" y="947.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.5" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 0.31%)</title><rect x="1152.4" y="963.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.4" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 0.23%)</title><rect x="1153.4" y="947.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1156.4" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (2 samples, 0.16%)</title><rect x="1153.4" y="931.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1156.4" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (2 samples, 0.16%)</title><rect x="1153.4" y="915.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.4" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.08%)</title><rect x="1155.2" y="931.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.2" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1155.2" y="915.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.2" y="926.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.08%)</title><rect x="1155.2" y="899.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.2" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.23%)</title><rect x="1156.1" y="963.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.1" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.23%)</title><rect x="1156.1" y="947.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.1" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1156.1" y="931.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.1" y="942.0"></text>
</g>
<g>
<title>Opaque1Node::hash() const (1 samples, 0.08%)</title><rect x="1156.1" y="915.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.1" y="926.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1157.0" y="931.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.0" y="942.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1157.9" y="931.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.9" y="942.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.08%)</title><rect x="1157.9" y="915.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.9" y="926.0"></text>
</g>
<g>
<title>Ticks::stamp() (1 samples, 0.08%)</title><rect x="1158.9" y="963.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.9" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (11 samples, 0.85%)</title><rect x="1159.8" y="979.0" width="10.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1162.8" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (11 samples, 0.85%)</title><rect x="1159.8" y="963.0" width="10.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.8" y="974.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1159.8" y="947.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.8" y="958.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.08%)</title><rect x="1159.8" y="931.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.8" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.08%)</title><rect x="1160.7" y="947.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.7" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.16%)</title><rect x="1161.6" y="947.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.6" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1162.5" y="931.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.5" y="942.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (3 samples, 0.23%)</title><rect x="1163.4" y="947.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.4" y="958.0"></text>
</g>
<g>
<title>MemNode::optimize_memory_chain(Node*, TypePtr const*, Node*, PhaseGVN*) (1 samples, 0.08%)</title><rect x="1165.3" y="931.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.3" y="942.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1166.2" y="947.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.2" y="958.0"></text>
</g>
<g>
<title>Type::filter_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1166.2" y="931.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.2" y="942.0"></text>
</g>
<g>
<title>Type::xmeet(Type const*) const (1 samples, 0.08%)</title><rect x="1166.2" y="915.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.2" y="926.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1167.1" y="947.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.1" y="958.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.16%)</title><rect x="1168.0" y="947.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.0" y="958.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.08%)</title><rect x="1169.8" y="979.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.8" y="990.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.08%)</title><rect x="1169.8" y="963.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.8" y="974.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.08%)</title><rect x="1169.8" y="947.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.8" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1169.8" y="931.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.8" y="942.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.08%)</title><rect x="1170.8" y="979.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.8" y="990.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.08%)</title><rect x="1170.8" y="963.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.8" y="974.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.08%)</title><rect x="1170.8" y="947.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.8" y="958.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1170.8" y="931.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.8" y="942.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1170.8" y="915.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.8" y="926.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1170.8" y="899.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.8" y="910.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1170.8" y="883.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.8" y="894.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.08%)</title><rect x="1170.8" y="867.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.8" y="878.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1171.7" y="979.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1174.7" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.85%)</title><rect x="1172.6" y="995.0" width="10.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.6" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.85%)</title><rect x="1172.6" y="979.0" width="10.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.6" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 0.85%)</title><rect x="1172.6" y="963.0" width="10.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.6" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.85%)</title><rect x="1172.6" y="947.0" width="10.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.6" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 0.85%)</title><rect x="1172.6" y="931.0" width="10.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.6" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.85%)</title><rect x="1172.6" y="915.0" width="10.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.6" y="926.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1172.6" y="899.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.6" y="910.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1172.6" y="883.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.6" y="894.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1172.6" y="867.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.6" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1172.6" y="851.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.6" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1172.6" y="835.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.6" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1172.6" y="819.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.6" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1172.6" y="803.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.6" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1172.6" y="787.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.6" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.08%)</title><rect x="1172.6" y="771.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.6" y="782.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1172.6" y="755.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.6" y="766.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1172.6" y="739.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.6" y="750.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1172.6" y="723.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.6" y="734.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1172.6" y="707.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.6" y="718.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.08%)</title><rect x="1172.6" y="691.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.6" y="702.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call(CallInfo&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.08%)</title><rect x="1172.6" y="675.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.6" y="686.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.08%)</title><rect x="1172.6" y="659.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.6" y="670.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1172.6" y="643.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.6" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.78%)</title><rect x="1173.5" y="899.0" width="9.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.5" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.78%)</title><rect x="1173.5" y="883.0" width="9.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.5" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.78%)</title><rect x="1173.5" y="867.0" width="9.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.5" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.78%)</title><rect x="1173.5" y="851.0" width="9.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.78%)</title><rect x="1173.5" y="835.0" width="9.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.78%)</title><rect x="1173.5" y="819.0" width="9.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.5" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.78%)</title><rect x="1173.5" y="803.0" width="9.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.5" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.78%)</title><rect x="1173.5" y="787.0" width="9.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.78%)</title><rect x="1173.5" y="771.0" width="9.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.78%)</title><rect x="1173.5" y="755.0" width="9.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.78%)</title><rect x="1173.5" y="739.0" width="9.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.78%)</title><rect x="1173.5" y="723.0" width="9.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.5" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.70%)</title><rect x="1173.5" y="707.0" width="8.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.5" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.70%)</title><rect x="1173.5" y="691.0" width="8.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.70%)</title><rect x="1173.5" y="675.0" width="8.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.70%)</title><rect x="1173.5" y="659.0" width="8.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.70%)</title><rect x="1173.5" y="643.0" width="8.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.62%)</title><rect x="1173.5" y="627.0" width="7.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.5" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.62%)</title><rect x="1173.5" y="611.0" width="7.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.5" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.62%)</title><rect x="1173.5" y="595.0" width="7.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.5" y="606.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.08%)</title><rect x="1173.5" y="579.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.5" y="590.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.08%)</title><rect x="1173.5" y="563.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.5" y="574.0"></text>
</g>
<g>
<title>GraphKit::reexecute_sp() (1 samples, 0.08%)</title><rect x="1173.5" y="547.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.54%)</title><rect x="1174.4" y="579.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.47%)</title><rect x="1174.4" y="563.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.47%)</title><rect x="1174.4" y="547.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.39%)</title><rect x="1174.4" y="531.0" width="4.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.4" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.39%)</title><rect x="1174.4" y="515.0" width="4.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.4" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.39%)</title><rect x="1174.4" y="499.0" width="4.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.39%)</title><rect x="1174.4" y="483.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.39%)</title><rect x="1174.4" y="467.0" width="4.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.39%)</title><rect x="1174.4" y="451.0" width="4.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.39%)</title><rect x="1174.4" y="435.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.4" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.31%)</title><rect x="1174.4" y="419.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.4" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.31%)</title><rect x="1174.4" y="403.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.31%)</title><rect x="1174.4" y="387.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.31%)</title><rect x="1174.4" y="371.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.31%)</title><rect x="1174.4" y="355.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.16%)</title><rect x="1175.3" y="339.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.3" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1175.3" y="323.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.3" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1175.3" y="307.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1175.3" y="291.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1175.3" y="275.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1175.3" y="259.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1175.3" y="243.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.3" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1175.3" y="227.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.3" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1175.3" y="211.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1175.3" y="195.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1175.3" y="179.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.3" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1175.3" y="163.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.3" y="174.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1175.3" y="147.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.3" y="158.0"></text>
</g>
<g>
<title>AddNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1175.3" y="131.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.3" y="142.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1176.3" y="243.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1176.3" y="227.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.3" y="238.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.08%)</title><rect x="1176.3" y="211.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.3" y="222.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1176.3" y="195.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1177.2" y="339.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.2" y="350.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.08%)</title><rect x="1177.2" y="323.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.2" y="334.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1177.2" y="307.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.2" y="318.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.1" y="419.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.1" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.1" y="403.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.1" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.1" y="387.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.1" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1178.1" y="371.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1178.1" y="355.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1178.1" y="339.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1178.1" y="323.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1178.1" y="307.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.1" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.1" y="291.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.1" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1178.1" y="275.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1178.1" y="259.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1178.1" y="243.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1178.1" y="227.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1178.1" y="211.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.1" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1178.1" y="195.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.1" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1178.1" y="179.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1178.1" y="163.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.1" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1178.1" y="147.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.1" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1178.1" y="131.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.1" y="142.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1178.1" y="115.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.1" y="126.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1178.1" y="99.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.1" y="110.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1178.1" y="83.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.1" y="94.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.08%)</title><rect x="1178.1" y="67.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.1" y="78.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1178.1" y="51.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.1" y="62.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1178.1" y="35.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.1" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1179.0" y="531.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1179.0" y="515.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.0" y="526.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.08%)</title><rect x="1179.0" y="499.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.0" y="510.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1179.0" y="483.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.0" y="494.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1179.0" y="467.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.0" y="478.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.08%)</title><rect x="1179.0" y="451.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.0" y="462.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.08%)</title><rect x="1179.9" y="563.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1180.8" y="627.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1180.8" y="611.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.8" y="622.0"></text>
</g>
<g>
<title>GraphKit::basic_plus_adr(Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1180.8" y="595.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.8" y="606.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1180.8" y="579.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.8" y="590.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.8" y="707.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.8" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.8" y="691.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.8" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.8" y="675.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.8" y="659.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.8" y="643.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.8" y="627.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.8" y="611.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.8" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.8" y="595.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.8" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.8" y="579.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.8" y="563.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.8" y="547.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.8" y="531.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.08%)</title><rect x="1181.8" y="515.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.8" y="526.0"></text>
</g>
<g>
<title>Parse::sharpen_type_after_if(BoolTest::mask, Node*, Type const*, Node*, Type const*) (1 samples, 0.08%)</title><rect x="1181.8" y="499.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.8" y="510.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.16%)</title><rect x="1182.7" y="995.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.7" y="1006.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 0.16%)</title><rect x="1182.7" y="979.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.7" y="990.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1184.5" y="1027.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.5" y="1038.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.08%)</title><rect x="1184.5" y="1011.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.5" y="1022.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.08%)</title><rect x="1184.5" y="995.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.5" y="1006.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.08%)</title><rect x="1184.5" y="979.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.5" y="990.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.08%)</title><rect x="1184.5" y="963.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.5" y="974.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1184.5" y="947.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.5" y="958.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.08%)</title><rect x="1184.5" y="931.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.5" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.08%)</title><rect x="1184.5" y="915.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.5" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.08%)</title><rect x="1184.5" y="899.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.5" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.08%)</title><rect x="1184.5" y="883.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.5" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1184.5" y="867.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.5" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.08%)</title><rect x="1184.5" y="851.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.5" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.08%)</title><rect x="1184.5" y="835.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.5" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.08%)</title><rect x="1184.5" y="819.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.5" y="830.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.08%)</title><rect x="1184.5" y="803.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.5" y="814.0"></text>
</g>
<g>
<title>BlockListBuilder::make_block_at(int, BlockBegin*) (1 samples, 0.08%)</title><rect x="1184.5" y="787.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.5" y="798.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (1 samples, 0.08%)</title><rect x="1185.4" y="1027.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.4" y="1038.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1185.4" y="1011.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.4" y="1022.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1185.4" y="995.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.4" y="1006.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1185.4" y="979.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.4" y="990.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.08%)</title><rect x="1185.4" y="963.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.4" y="974.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.08%)</title><rect x="1185.4" y="947.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.4" y="958.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.08%)</title><rect x="1185.4" y="931.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.4" y="942.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.08%)</title><rect x="1186.3" y="1059.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.3" y="1070.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.08%)</title><rect x="1186.3" y="1043.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.3" y="1054.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.08%)</title><rect x="1186.3" y="1027.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.3" y="1038.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.08%)</title><rect x="1186.3" y="1011.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1189.3" y="1022.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.08%)</title><rect x="1186.3" y="995.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.3" y="1006.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.08%)</title><rect x="1186.3" y="979.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.3" y="990.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int_mb(int) (1 samples, 0.08%)</title><rect x="1186.3" y="963.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.3" y="974.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.23%)</title><rect x="1187.3" y="1091.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.3" y="1102.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.23%)</title><rect x="1187.3" y="1075.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.3" y="1086.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.08%)</title><rect x="1188.2" y="1059.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.2" y="1070.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.08%)</title><rect x="1189.1" y="1059.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1192.1" y="1070.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.08%)</title><rect x="1189.1" y="1043.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.1" y="1054.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.08%)</title><rect x="1189.1" y="1027.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.1" y="1038.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.08%)</title><rect x="1189.1" y="1011.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1192.1" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.08%)</title><rect x="1189.1" y="995.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.1" y="1006.0"></text>
</g>
<g>
<title>G1RemSet::cleanup_after_oops_into_collection_set_do() (1 samples, 0.08%)</title><rect x="1189.1" y="979.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.1" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::cleanUpCardTable() (1 samples, 0.08%)</title><rect x="1189.1" y="963.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.1" y="974.0"></text>
</g>
<g>
<title>os::elapsedTime() (1 samples, 0.08%)</title><rect x="1189.1" y="947.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.1" y="958.0"></text>
</g>
</g>
</svg>
