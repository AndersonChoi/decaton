<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (1,485 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2035.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2019.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2003.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1987.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1971.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1955.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1939.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1923.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1907.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1891.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1875.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1859.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1843.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1827.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1811.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1795.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1779.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1763.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1747.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1731.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1715.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1699.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1683.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1667.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1651.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1635.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1619.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1603.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1587.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1571.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1555.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1539.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1523.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1507.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1491.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1475.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1459.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1443.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1427.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1411.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1395.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1379.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1363.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1347.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1331.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1315.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1299.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1283.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1267.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1251.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1235.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1219.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1203.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1187.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1171.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1155.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1139.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1123.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1107.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1091.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1075.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1059.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1043.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1027.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1011.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="995.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="979.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="963.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="947.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="931.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="915.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="899.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="883.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="867.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="851.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="835.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="819.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="803.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="787.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="771.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="755.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="739.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="723.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="707.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="691.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="675.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="659.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="643.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="627.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="611.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="595.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="579.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="563.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="547.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="531.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="515.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="499.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="483.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="467.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="451.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="435.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="419.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="403.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="387.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="371.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="355.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="339.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="323.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="307.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="291.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="275.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="259.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="243.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="227.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="211.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="195.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="179.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="163.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="147.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="131.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="115.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="99.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="83.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="67.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="51.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="35.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>[deoptimization] (1 samples, 0.07%)</title><rect x="10.8" y="2035.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.8" y="2046.0"></text>
</g>
<g>
<title>Deoptimization::uncommon_trap(JavaThread*, int) (1 samples, 0.07%)</title><rect x="10.8" y="2019.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.8" y="2030.0"></text>
</g>
<g>
<title>Deoptimization::uncommon_trap_inner(JavaThread*, int) (1 samples, 0.07%)</title><rect x="10.8" y="2003.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.8" y="2014.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.07%)</title><rect x="10.8" y="1987.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.8" y="1998.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.07%)</title><rect x="10.8" y="1971.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.8" y="1982.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="11.6" y="2035.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="14.6" y="2046.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.07%)</title><rect x="11.6" y="2019.0" width="0.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="14.6" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (313 samples, 21.08%)</title><rect x="12.4" y="2035.0" width="248.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.4" y="2046.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.07%)</title><rect x="12.4" y="2019.0" width="0.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="15.4" y="2030.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="12.4" y="2003.0" width="0.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="15.4" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.07%)</title><rect x="13.2" y="2019.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.2" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.07%)</title><rect x="13.2" y="2003.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.2" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.07%)</title><rect x="13.2" y="1987.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="16.2" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.07%)</title><rect x="13.2" y="1971.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="16.2" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.07%)</title><rect x="13.2" y="1955.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.2" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="13.2" y="1939.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="16.2" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.07%)</title><rect x="13.2" y="1923.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.07%)</title><rect x="13.2" y="1907.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="16.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.07%)</title><rect x="13.2" y="1891.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.2" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.07%)</title><rect x="13.2" y="1875.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.2" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.07%)</title><rect x="13.2" y="1859.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.2" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.07%)</title><rect x="13.2" y="1843.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.2" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.07%)</title><rect x="13.2" y="1827.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="16.2" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.sizeOf (1 samples, 0.07%)</title><rect x="13.2" y="1811.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.2" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.sizeOf (1 samples, 0.07%)</title><rect x="13.2" y="1795.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="16.2" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/TaggedFields.sizeOf (1 samples, 0.07%)</title><rect x="13.2" y="1779.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="16.2" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (311 samples, 20.94%)</title><rect x="14.0" y="2019.0" width="247.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.0" y="2030.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (7 samples, 0.47%)</title><rect x="14.0" y="2003.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.0" y="2014.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (6 samples, 0.40%)</title><rect x="14.8" y="1987.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="17.8" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1701397689.accept (6 samples, 0.40%)</title><rect x="14.8" y="1971.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="17.8" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (6 samples, 0.40%)</title><rect x="14.8" y="1955.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="17.8" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (6 samples, 0.40%)</title><rect x="14.8" y="1939.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="17.8" y="1950.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (5 samples, 0.34%)</title><rect x="14.8" y="1923.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="17.8" y="1934.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (1 samples, 0.07%)</title><rect x="18.7" y="1923.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="21.7" y="1934.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.07%)</title><rect x="18.7" y="1907.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="21.7" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (6 samples, 0.40%)</title><rect x="19.5" y="2003.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="22.5" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (6 samples, 0.40%)</title><rect x="19.5" y="1987.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.5" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (5 samples, 0.34%)</title><rect x="20.3" y="1971.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.3" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (5 samples, 0.34%)</title><rect x="20.3" y="1955.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="23.3" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (5 samples, 0.34%)</title><rect x="20.3" y="1939.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="23.3" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (5 samples, 0.34%)</title><rect x="20.3" y="1923.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.3" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (4 samples, 0.27%)</title><rect x="20.3" y="1907.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.3" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="20.3" y="1891.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="23.3" y="1902.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.07%)</title><rect x="21.1" y="1891.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="24.1" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.estimateSize (1 samples, 0.07%)</title><rect x="21.1" y="1875.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="24.1" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (2 samples, 0.13%)</title><rect x="21.9" y="1891.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="24.9" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.07%)</title><rect x="22.7" y="1875.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.7" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.07%)</title><rect x="22.7" y="1859.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="25.7" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.07%)</title><rect x="23.5" y="1907.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="26.5" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.07%)</title><rect x="23.5" y="1891.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.5" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.07%)</title><rect x="23.5" y="1875.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="26.5" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.07%)</title><rect x="23.5" y="1859.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.5" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="23.5" y="1843.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="26.5" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (3 samples, 0.20%)</title><rect x="24.3" y="2003.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="27.3" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (3 samples, 0.20%)</title><rect x="24.3" y="1987.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="27.3" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.13%)</title><rect x="25.1" y="1971.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="28.1" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.13%)</title><rect x="25.1" y="1955.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="28.1" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.13%)</title><rect x="25.1" y="1939.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="28.1" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.13%)</title><rect x="25.1" y="1923.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="28.1" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.13%)</title><rect x="25.1" y="1907.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.1" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="25.1" y="1891.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="28.1" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="25.1" y="1875.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="28.1" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="25.1" y="1859.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.1" y="1870.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="25.1" y="1843.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="28.1" y="1854.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.07%)</title><rect x="25.9" y="1891.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="28.9" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.estimateSize (1 samples, 0.07%)</title><rect x="25.9" y="1875.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="28.9" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.07%)</title><rect x="26.7" y="2003.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="29.7" y="2014.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.07%)</title><rect x="26.7" y="1987.0" width="0.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="29.7" y="1998.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="26.7" y="1971.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="29.7" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.07%)</title><rect x="27.5" y="2003.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="30.5" y="2014.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.07%)</title><rect x="27.5" y="1987.0" width="0.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="30.5" y="1998.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="27.5" y="1971.0" width="0.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="30.5" y="1982.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (207 samples, 13.94%)</title><rect x="28.3" y="2003.0" width="164.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="31.3" y="2014.0">java/lang/Iterable.fo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1194234896.accept (198 samples, 13.33%)</title><rect x="29.1" y="1987.0" width="157.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="32.1" y="1998.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$72 (198 samples, 13.33%)</title><rect x="29.1" y="1971.0" width="157.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="32.1" y="1982.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (167 samples, 11.25%)</title><rect x="32.2" y="1955.0" width="132.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="35.2" y="1966.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (167 samples, 11.25%)</title><rect x="32.2" y="1939.0" width="132.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="35.2" y="1950.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (167 samples, 11.25%)</title><rect x="32.2" y="1923.0" width="132.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="35.2" y="1934.0">com/linecorp/dec..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (167 samples, 11.25%)</title><rect x="32.2" y="1907.0" width="132.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="35.2" y="1918.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (167 samples, 11.25%)</title><rect x="32.2" y="1891.0" width="132.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="35.2" y="1902.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (167 samples, 11.25%)</title><rect x="32.2" y="1875.0" width="132.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="35.2" y="1886.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (115 samples, 7.74%)</title><rect x="32.2" y="1859.0" width="91.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="35.2" y="1870.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (25 samples, 1.68%)</title><rect x="32.2" y="1843.0" width="19.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="35.2" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (25 samples, 1.68%)</title><rect x="32.2" y="1827.0" width="19.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="35.2" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (18 samples, 1.21%)</title><rect x="37.8" y="1811.0" width="14.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="40.8" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (18 samples, 1.21%)</title><rect x="37.8" y="1795.0" width="14.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="40.8" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (9 samples, 0.61%)</title><rect x="52.1" y="1843.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="55.1" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (9 samples, 0.61%)</title><rect x="52.1" y="1827.0" width="7.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="55.1" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.20%)</title><rect x="52.9" y="1811.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="55.9" y="1822.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.07%)</title><rect x="54.5" y="1795.0" width="0.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="57.5" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (5 samples, 0.34%)</title><rect x="55.3" y="1811.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="58.3" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (81 samples, 5.45%)</title><rect x="59.3" y="1843.0" width="64.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="62.3" y="1854.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (81 samples, 5.45%)</title><rect x="59.3" y="1827.0" width="64.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="62.3" y="1838.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (81 samples, 5.45%)</title><rect x="59.3" y="1811.0" width="64.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="62.3" y="1822.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (81 samples, 5.45%)</title><rect x="59.3" y="1795.0" width="64.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="62.3" y="1806.0">java/ut..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (79 samples, 5.32%)</title><rect x="60.9" y="1779.0" width="62.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="63.9" y="1790.0">sun/mi..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (3 samples, 0.20%)</title><rect x="60.9" y="1763.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="63.9" y="1774.0"></text>
</g>
<g>
<title>Unsafe_Unpark (71 samples, 4.78%)</title><rect x="63.2" y="1763.0" width="56.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="66.2" y="1774.0">Unsafe..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.07%)</title><rect x="65.6" y="1747.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="68.6" y="1758.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.13%)</title><rect x="66.4" y="1747.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="69.4" y="1758.0"></text>
</g>
<g>
<title>__pthread_cond_signal (40 samples, 2.69%)</title><rect x="68.0" y="1747.0" width="31.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="71.0" y="1758.0">__..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (7 samples, 0.47%)</title><rect x="99.8" y="1747.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="102.8" y="1758.0"></text>
</g>
<g>
<title>pthread_mutex_lock (18 samples, 1.21%)</title><rect x="105.4" y="1747.0" width="14.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="108.4" y="1758.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.13%)</title><rect x="119.7" y="1763.0" width="1.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="122.7" y="1774.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.20%)</title><rect x="121.2" y="1763.0" width="2.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="124.2" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (4 samples, 0.27%)</title><rect x="123.6" y="1859.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="126.6" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (4 samples, 0.27%)</title><rect x="123.6" y="1843.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="126.6" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (4 samples, 0.27%)</title><rect x="123.6" y="1827.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="126.6" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.34%)</title><rect x="126.8" y="1859.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="129.8" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (4 samples, 0.27%)</title><rect x="126.8" y="1843.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="129.8" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.27%)</title><rect x="126.8" y="1827.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="129.8" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.07%)</title><rect x="129.2" y="1811.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="132.2" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (1 samples, 0.07%)</title><rect x="130.0" y="1843.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="133.0" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.07%)</title><rect x="130.0" y="1827.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="133.0" y="1838.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="130.0" y="1811.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="133.0" y="1822.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.07%)</title><rect x="130.0" y="1795.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="133.0" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (43 samples, 2.90%)</title><rect x="130.8" y="1859.0" width="34.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="133.8" y="1870.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (43 samples, 2.90%)</title><rect x="130.8" y="1843.0" width="34.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="133.8" y="1854.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (43 samples, 2.90%)</title><rect x="130.8" y="1827.0" width="34.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="133.8" y="1838.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (2 samples, 0.13%)</title><rect x="163.4" y="1811.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="166.4" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (2 samples, 0.13%)</title><rect x="164.9" y="1955.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="167.9" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.13%)</title><rect x="164.9" y="1939.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="167.9" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (3 samples, 0.20%)</title><rect x="166.5" y="1955.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="169.5" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.20%)</title><rect x="166.5" y="1939.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="169.5" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.20%)</title><rect x="166.5" y="1923.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="169.5" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (20 samples, 1.35%)</title><rect x="168.9" y="1955.0" width="15.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="171.9" y="1966.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (19 samples, 1.28%)</title><rect x="169.7" y="1939.0" width="15.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="172.7" y="1950.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.20%)</title><rect x="180.8" y="1923.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="183.8" y="1934.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.07%)</title><rect x="180.8" y="1907.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="183.8" y="1918.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.13%)</title><rect x="181.6" y="1907.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="184.6" y="1918.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.13%)</title><rect x="183.2" y="1923.0" width="1.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="186.2" y="1934.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.13%)</title><rect x="184.8" y="1955.0" width="1.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="187.8" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (6 samples, 0.40%)</title><rect x="186.4" y="1987.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="189.4" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (6 samples, 0.40%)</title><rect x="186.4" y="1971.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="189.4" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.40%)</title><rect x="186.4" y="1955.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="189.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.40%)</title><rect x="186.4" y="1939.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="189.4" y="1950.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (4 samples, 0.27%)</title><rect x="188.0" y="1923.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="191.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (2 samples, 0.13%)</title><rect x="191.2" y="1987.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="194.2" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.13%)</title><rect x="191.2" y="1971.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="194.2" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (86 samples, 5.79%)</title><rect x="192.8" y="2003.0" width="68.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="195.8" y="2014.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (86 samples, 5.79%)</title><rect x="192.8" y="1987.0" width="68.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="195.8" y="1998.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquire (1 samples, 0.07%)</title><rect x="192.8" y="1971.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="195.8" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (52 samples, 3.50%)</title><rect x="193.6" y="1971.0" width="41.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="196.6" y="1982.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (2 samples, 0.13%)</title><rect x="193.6" y="1955.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="196.6" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (2 samples, 0.13%)</title><rect x="193.6" y="1939.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="196.6" y="1950.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.07%)</title><rect x="194.4" y="1923.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="197.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="195.1" y="1955.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="198.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.07%)</title><rect x="195.1" y="1939.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="198.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.07%)</title><rect x="195.1" y="1923.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="198.1" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.07%)</title><rect x="195.1" y="1907.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="198.1" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (1 samples, 0.07%)</title><rect x="195.1" y="1891.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="198.1" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.casHead (1 samples, 0.07%)</title><rect x="195.1" y="1875.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="198.1" y="1886.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.07%)</title><rect x="195.1" y="1859.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="198.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (49 samples, 3.30%)</title><rect x="195.9" y="1955.0" width="39.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="198.9" y="1966.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (48 samples, 3.23%)</title><rect x="196.7" y="1939.0" width="38.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="199.7" y="1950.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (44 samples, 2.96%)</title><rect x="196.7" y="1923.0" width="35.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="199.7" y="1934.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (44 samples, 2.96%)</title><rect x="196.7" y="1907.0" width="35.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="199.7" y="1918.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (24 samples, 1.62%)</title><rect x="197.5" y="1891.0" width="19.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="200.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.07%)</title><rect x="199.1" y="1875.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="202.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.movePartitionToEnd (1 samples, 0.07%)</title><rect x="199.1" y="1859.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="202.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.moveToEnd (1 samples, 0.07%)</title><rect x="199.1" y="1843.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="202.1" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="199.1" y="1827.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="202.1" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeCloseRecordStream (10 samples, 0.67%)</title><rect x="199.9" y="1875.0" width="8.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="202.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (11 samples, 0.74%)</title><rect x="207.9" y="1875.0" width="8.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="210.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (11 samples, 0.74%)</title><rect x="207.9" y="1859.0" width="8.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="210.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (11 samples, 0.74%)</title><rect x="207.9" y="1843.0" width="8.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="210.9" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (11 samples, 0.74%)</title><rect x="207.9" y="1827.0" width="8.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="210.9" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (11 samples, 0.74%)</title><rect x="207.9" y="1811.0" width="8.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="210.9" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (11 samples, 0.74%)</title><rect x="207.9" y="1795.0" width="8.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="210.9" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (11 samples, 0.74%)</title><rect x="207.9" y="1779.0" width="8.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="210.9" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (19 samples, 1.28%)</title><rect x="216.6" y="1891.0" width="15.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="219.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (19 samples, 1.28%)</title><rect x="216.6" y="1875.0" width="15.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="219.6" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (19 samples, 1.28%)</title><rect x="216.6" y="1859.0" width="15.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="219.6" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (19 samples, 1.28%)</title><rect x="216.6" y="1843.0" width="15.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="219.6" y="1854.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (12 samples, 0.81%)</title><rect x="222.2" y="1827.0" width="9.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="225.2" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (12 samples, 0.81%)</title><rect x="222.2" y="1811.0" width="9.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="225.2" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (12 samples, 0.81%)</title><rect x="222.2" y="1795.0" width="9.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="225.2" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (12 samples, 0.81%)</title><rect x="222.2" y="1779.0" width="9.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="225.2" y="1790.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.07%)</title><rect x="227.7" y="1763.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="230.7" y="1774.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.27%)</title><rect x="228.5" y="1763.0" width="3.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="231.5" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.13%)</title><rect x="231.7" y="1923.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="234.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.13%)</title><rect x="231.7" y="1907.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="234.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (2 samples, 0.13%)</title><rect x="231.7" y="1891.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="234.7" y="1902.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="231.7" y="1875.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="234.7" y="1886.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="231.7" y="1859.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="234.7" y="1870.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.07%)</title><rect x="232.5" y="1875.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="235.5" y="1886.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.07%)</title><rect x="232.5" y="1859.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="235.5" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.07%)</title><rect x="232.5" y="1843.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="235.5" y="1854.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="232.5" y="1827.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="235.5" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.13%)</title><rect x="233.3" y="1923.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="236.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.13%)</title><rect x="233.3" y="1907.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="236.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.07%)</title><rect x="233.3" y="1891.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="236.3" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.07%)</title><rect x="233.3" y="1875.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="236.3" y="1886.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="233.3" y="1859.0" width="0.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="236.3" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="234.1" y="1891.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="237.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="234.1" y="1875.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="237.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="234.1" y="1859.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="237.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="234.1" y="1843.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="237.1" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (10 samples, 0.67%)</title><rect x="234.9" y="1971.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="237.9" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (9 samples, 0.61%)</title><rect x="234.9" y="1955.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="237.9" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (8 samples, 0.54%)</title><rect x="234.9" y="1939.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="237.9" y="1950.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.07%)</title><rect x="235.7" y="1923.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="238.7" y="1934.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.07%)</title><rect x="235.7" y="1907.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="238.7" y="1918.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="235.7" y="1891.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="238.7" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="236.5" y="1923.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="239.5" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="236.5" y="1907.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="239.5" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="236.5" y="1891.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="239.5" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="236.5" y="1875.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="239.5" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="236.5" y="1859.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="239.5" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.07%)</title><rect x="236.5" y="1843.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="239.5" y="1854.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="236.5" y="1827.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="239.5" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.13%)</title><rect x="237.3" y="1923.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="240.3" y="1934.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.13%)</title><rect x="237.3" y="1907.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="240.3" y="1918.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.07%)</title><rect x="237.3" y="1891.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="240.3" y="1902.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.07%)</title><rect x="237.3" y="1875.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="240.3" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="237.3" y="1859.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="240.3" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.07%)</title><rect x="237.3" y="1843.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="240.3" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.07%)</title><rect x="238.1" y="1891.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="241.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (3 samples, 0.20%)</title><rect x="238.8" y="1923.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="241.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (3 samples, 0.20%)</title><rect x="238.8" y="1907.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="241.8" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.20%)</title><rect x="238.8" y="1891.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="241.8" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.20%)</title><rect x="238.8" y="1875.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="241.8" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.20%)</title><rect x="238.8" y="1859.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="241.8" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.13%)</title><rect x="238.8" y="1843.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="241.8" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.13%)</title><rect x="238.8" y="1827.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="241.8" y="1838.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (2 samples, 0.13%)</title><rect x="238.8" y="1811.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="241.8" y="1822.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.07%)</title><rect x="239.6" y="1795.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="242.6" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.07%)</title><rect x="239.6" y="1779.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="242.6" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="239.6" y="1763.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="242.6" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$230/451298444.test (1 samples, 0.07%)</title><rect x="239.6" y="1747.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="242.6" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$collectPartitions$6 (1 samples, 0.07%)</title><rect x="239.6" y="1731.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="242.6" y="1742.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.07%)</title><rect x="240.4" y="1843.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="243.4" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.07%)</title><rect x="240.4" y="1827.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="243.4" y="1838.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.07%)</title><rect x="240.4" y="1811.0" width="0.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="243.4" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.07%)</title><rect x="241.2" y="1939.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="244.2" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.07%)</title><rect x="241.2" y="1923.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="244.2" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="241.2" y="1907.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="244.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.07%)</title><rect x="242.0" y="1955.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="245.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (2 samples, 0.13%)</title><rect x="242.8" y="1971.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="245.8" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.07%)</title><rect x="242.8" y="1955.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="245.8" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.hasInFlightRequests (1 samples, 0.07%)</title><rect x="243.6" y="1955.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="246.6" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.isEmpty (1 samples, 0.07%)</title><rect x="243.6" y="1939.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="246.6" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (9 samples, 0.61%)</title><rect x="244.4" y="1971.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="247.4" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (9 samples, 0.61%)</title><rect x="244.4" y="1955.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="247.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (3 samples, 0.20%)</title><rect x="244.4" y="1939.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="247.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (2 samples, 0.13%)</title><rect x="244.4" y="1923.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="247.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.07%)</title><rect x="244.4" y="1907.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="247.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.07%)</title><rect x="244.4" y="1891.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="247.4" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$3.read (1 samples, 0.07%)</title><rect x="244.4" y="1875.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="247.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.responseHeaderVersion (1 samples, 0.07%)</title><rect x="245.2" y="1907.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="248.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/ApiMessageType.fromApiKey (1 samples, 0.07%)</title><rect x="245.2" y="1891.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="248.2" y="1902.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.07%)</title><rect x="245.2" y="1875.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="248.2" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.07%)</title><rect x="246.0" y="1923.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="249.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.07%)</title><rect x="246.0" y="1907.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="249.0" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="246.0" y="1891.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="249.0" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.07%)</title><rect x="246.0" y="1875.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="249.0" y="1886.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.newNode (1 samples, 0.07%)</title><rect x="246.0" y="1859.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="249.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (6 samples, 0.40%)</title><rect x="246.8" y="1939.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="249.8" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.clear (1 samples, 0.07%)</title><rect x="246.8" y="1923.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="249.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (5 samples, 0.34%)</title><rect x="247.6" y="1923.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="250.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (5 samples, 0.34%)</title><rect x="247.6" y="1907.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="250.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.13%)</title><rect x="247.6" y="1891.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="250.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.13%)</title><rect x="247.6" y="1875.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="250.6" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.13%)</title><rect x="247.6" y="1859.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="250.6" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.13%)</title><rect x="247.6" y="1843.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="250.6" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.13%)</title><rect x="247.6" y="1827.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="250.6" y="1838.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="247.6" y="1811.0" width="0.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="250.6" y="1822.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="248.4" y="1811.0" width="0.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="251.4" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToStagedReceives (3 samples, 0.20%)</title><rect x="249.2" y="1891.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="252.2" y="1902.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.20%)</title><rect x="249.2" y="1875.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="252.2" y="1886.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.07%)</title><rect x="249.2" y="1859.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="252.2" y="1870.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.13%)</title><rect x="250.0" y="1859.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="253.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (8 samples, 0.54%)</title><rect x="251.6" y="1971.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="254.6" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (7 samples, 0.47%)</title><rect x="252.4" y="1955.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="255.4" y="1966.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.07%)</title><rect x="253.2" y="1939.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="256.2" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$256/330977716.accept (1 samples, 0.07%)</title><rect x="253.2" y="1923.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="256.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.07%)</title><rect x="253.2" y="1907.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="256.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.07%)</title><rect x="253.2" y="1891.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="256.2" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.07%)</title><rect x="253.2" y="1875.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="256.2" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.07%)</title><rect x="253.2" y="1859.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="256.2" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="253.2" y="1843.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="256.2" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (2 samples, 0.13%)</title><rect x="253.9" y="1939.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="256.9" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="253.9" y="1923.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="256.9" y="1934.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.&lt;init&gt; (1 samples, 0.07%)</title><rect x="254.7" y="1923.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="257.7" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (1 samples, 0.07%)</title><rect x="254.7" y="1907.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="257.7" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap.tableSizeFor (1 samples, 0.07%)</title><rect x="254.7" y="1891.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="257.7" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.20%)</title><rect x="255.5" y="1939.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="258.5" y="1950.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.07%)</title><rect x="255.5" y="1923.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="258.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.13%)</title><rect x="256.3" y="1923.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="259.3" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.13%)</title><rect x="256.3" y="1907.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="259.3" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.13%)</title><rect x="256.3" y="1891.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="259.3" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.13%)</title><rect x="256.3" y="1875.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="259.3" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.13%)</title><rect x="256.3" y="1859.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="259.3" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.13%)</title><rect x="256.3" y="1843.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="259.3" y="1854.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (2 samples, 0.13%)</title><rect x="256.3" y="1827.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="259.3" y="1838.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (2 samples, 0.13%)</title><rect x="256.3" y="1811.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="259.3" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (2 samples, 0.13%)</title><rect x="256.3" y="1795.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="259.3" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.13%)</title><rect x="256.3" y="1779.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="259.3" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.13%)</title><rect x="256.3" y="1763.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="259.3" y="1774.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.13%)</title><rect x="256.3" y="1747.0" width="1.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="259.3" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (2 samples, 0.13%)</title><rect x="257.9" y="1971.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="260.9" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.13%)</title><rect x="257.9" y="1955.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="260.9" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="258.7" y="1939.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="261.7" y="1950.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="258.7" y="1923.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="261.7" y="1934.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="258.7" y="1907.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="261.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 0.13%)</title><rect x="259.5" y="1971.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="262.5" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.13%)</title><rect x="259.5" y="1955.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="262.5" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.13%)</title><rect x="259.5" y="1939.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="262.5" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.13%)</title><rect x="259.5" y="1923.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="262.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (2 samples, 0.13%)</title><rect x="259.5" y="1907.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="262.5" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (2 samples, 0.13%)</title><rect x="259.5" y="1891.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="262.5" y="1902.0"></text>
</g>
<g>
<title>java/lang/Thread.run (899 samples, 60.54%)</title><rect x="261.1" y="2035.0" width="714.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="264.1" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (896 samples, 60.34%)</title><rect x="263.5" y="2019.0" width="712.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="266.5" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (896 samples, 60.34%)</title><rect x="263.5" y="2003.0" width="712.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="266.5" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/1000935494.run (613 samples, 41.28%)</title><rect x="267.5" y="1987.0" width="487.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="270.5" y="1998.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/10..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (613 samples, 41.28%)</title><rect x="267.5" y="1971.0" width="487.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="270.5" y="1982.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (610 samples, 41.08%)</title><rect x="269.0" y="1955.0" width="484.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="272.0" y="1966.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (599 samples, 40.34%)</title><rect x="269.0" y="1939.0" width="476.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="272.0" y="1950.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleTh..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (1 samples, 0.07%)</title><rect x="275.4" y="1923.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="278.4" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (196 samples, 13.20%)</title><rect x="276.2" y="1923.0" width="155.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="279.2" y="1934.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (196 samples, 13.20%)</title><rect x="276.2" y="1907.0" width="155.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="279.2" y="1918.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (196 samples, 13.20%)</title><rect x="276.2" y="1891.0" width="155.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="279.2" y="1902.0">com/linecorp/decaton..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.13%)</title><rect x="276.2" y="1875.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="279.2" y="1886.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.13%)</title><rect x="276.2" y="1859.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="279.2" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.13%)</title><rect x="276.2" y="1843.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="279.2" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="277.0" y="1827.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="280.0" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (194 samples, 13.06%)</title><rect x="277.8" y="1875.0" width="154.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="280.8" y="1886.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (194 samples, 13.06%)</title><rect x="277.8" y="1859.0" width="154.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="280.8" y="1870.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (194 samples, 13.06%)</title><rect x="277.8" y="1843.0" width="154.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="280.8" y="1854.0">com/fasterxml/jackso..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (80 samples, 5.39%)</title><rect x="277.8" y="1827.0" width="63.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="280.8" y="1838.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (51 samples, 3.43%)</title><rect x="277.8" y="1811.0" width="40.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="280.8" y="1822.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (48 samples, 3.23%)</title><rect x="277.8" y="1795.0" width="38.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="280.8" y="1806.0">com..</text>
</g>
<g>
<title>[unknown] (3 samples, 0.20%)</title><rect x="296.1" y="1779.0" width="2.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="299.1" y="1790.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (3 samples, 0.20%)</title><rect x="296.1" y="1763.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="299.1" y="1774.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.13%)</title><rect x="298.4" y="1779.0" width="1.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="301.4" y="1790.0"></text>
</g>
<g>
<title>__clock_gettime (13 samples, 0.88%)</title><rect x="300.0" y="1779.0" width="10.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="303.0" y="1790.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.54%)</title><rect x="304.0" y="1763.0" width="6.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="307.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.07%)</title><rect x="310.4" y="1779.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="313.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (5 samples, 0.34%)</title><rect x="311.2" y="1779.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="314.2" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.34%)</title><rect x="311.2" y="1763.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="314.2" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 0.34%)</title><rect x="311.2" y="1747.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="314.2" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.34%)</title><rect x="311.2" y="1731.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="314.2" y="1742.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (5 samples, 0.34%)</title><rect x="311.2" y="1715.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="314.2" y="1726.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="315.1" y="1779.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="318.1" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (3 samples, 0.20%)</title><rect x="315.9" y="1795.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="318.9" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.20%)</title><rect x="315.9" y="1779.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="318.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (29 samples, 1.95%)</title><rect x="318.3" y="1811.0" width="23.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="321.3" y="1822.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (2 samples, 0.13%)</title><rect x="318.3" y="1795.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="321.3" y="1806.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.07%)</title><rect x="319.1" y="1779.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="322.1" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (27 samples, 1.82%)</title><rect x="319.9" y="1795.0" width="21.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="322.9" y="1806.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.07%)</title><rect x="325.5" y="1779.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="328.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (5 samples, 0.34%)</title><rect x="326.3" y="1779.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="329.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (3 samples, 0.20%)</title><rect x="327.8" y="1763.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="330.8" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (9 samples, 0.61%)</title><rect x="330.2" y="1779.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="333.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (9 samples, 0.61%)</title><rect x="330.2" y="1763.0" width="7.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="333.2" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (9 samples, 0.61%)</title><rect x="330.2" y="1747.0" width="7.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="333.2" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (5 samples, 0.34%)</title><rect x="337.4" y="1779.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="340.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (98 samples, 6.60%)</title><rect x="341.4" y="1827.0" width="77.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="344.4" y="1838.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (6 samples, 0.40%)</title><rect x="341.4" y="1811.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="344.4" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (6 samples, 0.40%)</title><rect x="341.4" y="1795.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="344.4" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (3 samples, 0.20%)</title><rect x="342.9" y="1779.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="345.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (3 samples, 0.20%)</title><rect x="342.9" y="1763.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="345.9" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.07%)</title><rect x="345.3" y="1779.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="348.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (10 samples, 0.67%)</title><rect x="346.1" y="1811.0" width="8.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="349.1" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (10 samples, 0.67%)</title><rect x="346.1" y="1795.0" width="8.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="349.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.07%)</title><rect x="348.5" y="1779.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="351.5" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (4 samples, 0.27%)</title><rect x="349.3" y="1779.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="352.3" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (2 samples, 0.13%)</title><rect x="352.5" y="1779.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="355.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (13 samples, 0.88%)</title><rect x="354.1" y="1811.0" width="10.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="357.1" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 0.74%)</title><rect x="354.9" y="1795.0" width="8.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="357.9" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (2 samples, 0.13%)</title><rect x="356.5" y="1779.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="359.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (7 samples, 0.47%)</title><rect x="358.0" y="1779.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="361.0" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (7 samples, 0.47%)</title><rect x="358.0" y="1763.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="361.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.07%)</title><rect x="363.6" y="1795.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="366.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (3 samples, 0.20%)</title><rect x="364.4" y="1811.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="367.4" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.20%)</title><rect x="364.4" y="1795.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="367.4" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (3 samples, 0.20%)</title><rect x="364.4" y="1779.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="367.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (3 samples, 0.20%)</title><rect x="364.4" y="1763.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="367.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (3 samples, 0.20%)</title><rect x="364.4" y="1747.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="367.4" y="1758.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.20%)</title><rect x="364.4" y="1731.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="367.4" y="1742.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.20%)</title><rect x="364.4" y="1715.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="367.4" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (3 samples, 0.20%)</title><rect x="364.4" y="1699.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="367.4" y="1710.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.13%)</title><rect x="365.2" y="1683.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="368.2" y="1694.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.07%)</title><rect x="366.0" y="1667.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="369.0" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (66 samples, 4.44%)</title><rect x="366.8" y="1811.0" width="52.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="369.8" y="1822.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (19 samples, 1.28%)</title><rect x="367.6" y="1795.0" width="15.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="370.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (2 samples, 0.13%)</title><rect x="367.6" y="1779.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="370.6" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.27%)</title><rect x="369.2" y="1779.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="372.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.27%)</title><rect x="369.2" y="1763.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="372.2" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.27%)</title><rect x="369.2" y="1747.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="372.2" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (4 samples, 0.27%)</title><rect x="369.2" y="1731.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="372.2" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.07%)</title><rect x="371.5" y="1715.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="374.5" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (9 samples, 0.61%)</title><rect x="372.3" y="1779.0" width="7.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="375.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (5 samples, 0.34%)</title><rect x="372.3" y="1763.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="375.3" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (4 samples, 0.27%)</title><rect x="376.3" y="1763.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="379.3" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (4 samples, 0.27%)</title><rect x="376.3" y="1747.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="379.3" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.13%)</title><rect x="377.9" y="1731.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="380.9" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (2 samples, 0.13%)</title><rect x="377.9" y="1715.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="380.9" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.20%)</title><rect x="379.5" y="1779.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="382.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.20%)</title><rect x="379.5" y="1763.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="382.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.07%)</title><rect x="381.9" y="1779.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="384.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (46 samples, 3.10%)</title><rect x="382.7" y="1795.0" width="36.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="385.7" y="1806.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (46 samples, 3.10%)</title><rect x="382.7" y="1779.0" width="36.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="385.7" y="1790.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (46 samples, 3.10%)</title><rect x="382.7" y="1763.0" width="36.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="385.7" y="1774.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 0.74%)</title><rect x="389.0" y="1747.0" width="8.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="392.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (2 samples, 0.13%)</title><rect x="389.0" y="1731.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="392.0" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.13%)</title><rect x="390.6" y="1731.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="393.6" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.13%)</title><rect x="390.6" y="1715.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="393.6" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.13%)</title><rect x="390.6" y="1699.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="393.6" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.13%)</title><rect x="390.6" y="1683.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="393.6" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (4 samples, 0.27%)</title><rect x="392.2" y="1731.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="395.2" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (4 samples, 0.27%)</title><rect x="392.2" y="1715.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="395.2" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.13%)</title><rect x="393.8" y="1699.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="396.8" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (3 samples, 0.20%)</title><rect x="395.4" y="1731.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="398.4" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (14 samples, 0.94%)</title><rect x="397.8" y="1747.0" width="11.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="400.8" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.07%)</title><rect x="402.5" y="1731.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="405.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (7 samples, 0.47%)</title><rect x="403.3" y="1731.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="406.3" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.47%)</title><rect x="403.3" y="1715.0" width="5.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="406.3" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.47%)</title><rect x="403.3" y="1699.0" width="5.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="406.3" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (7 samples, 0.47%)</title><rect x="403.3" y="1683.0" width="5.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="406.3" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.07%)</title><rect x="408.9" y="1747.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="411.9" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.07%)</title><rect x="409.7" y="1747.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="412.7" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.07%)</title><rect x="409.7" y="1731.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="412.7" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.07%)</title><rect x="409.7" y="1715.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="412.7" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.07%)</title><rect x="409.7" y="1699.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="412.7" y="1710.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.07%)</title><rect x="409.7" y="1683.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="412.7" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (7 samples, 0.47%)</title><rect x="410.5" y="1747.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="413.5" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.47%)</title><rect x="410.5" y="1731.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="413.5" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.47%)</title><rect x="410.5" y="1715.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="413.5" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (4 samples, 0.27%)</title><rect x="416.0" y="1747.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="419.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.07%)</title><rect x="418.4" y="1731.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="421.4" y="1742.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="418.4" y="1715.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="421.4" y="1726.0"></text>
</g>
<g>
<title>InstanceKlass::array_klass_impl(bool, int, Thread*) (1 samples, 0.07%)</title><rect x="418.4" y="1699.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="421.4" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (16 samples, 1.08%)</title><rect x="419.2" y="1827.0" width="12.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="422.2" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (16 samples, 1.08%)</title><rect x="419.2" y="1811.0" width="12.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="422.2" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (16 samples, 1.08%)</title><rect x="419.2" y="1795.0" width="12.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="422.2" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (3 samples, 0.20%)</title><rect x="421.6" y="1779.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="424.6" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (3 samples, 0.20%)</title><rect x="424.0" y="1779.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="427.0" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (7 samples, 0.47%)</title><rect x="426.4" y="1779.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="429.4" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.47%)</title><rect x="426.4" y="1763.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="429.4" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (363 samples, 24.44%)</title><rect x="431.9" y="1923.0" width="288.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="434.9" y="1934.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (60 samples, 4.04%)</title><rect x="431.9" y="1907.0" width="47.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="434.9" y="1918.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (60 samples, 4.04%)</title><rect x="431.9" y="1891.0" width="47.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="434.9" y="1902.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (57 samples, 3.84%)</title><rect x="434.3" y="1875.0" width="45.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="437.3" y="1886.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (22 samples, 1.48%)</title><rect x="437.5" y="1859.0" width="17.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="440.5" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (10 samples, 0.67%)</title><rect x="447.0" y="1843.0" width="8.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="450.0" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (10 samples, 0.67%)</title><rect x="447.0" y="1827.0" width="8.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="450.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (10 samples, 0.67%)</title><rect x="447.0" y="1811.0" width="8.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="450.0" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.07%)</title><rect x="455.0" y="1859.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="458.0" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.07%)</title><rect x="455.0" y="1843.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="458.0" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="455.0" y="1827.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="458.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.07%)</title><rect x="455.0" y="1811.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="458.0" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.07%)</title><rect x="455.0" y="1795.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="458.0" y="1806.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (30 samples, 2.02%)</title><rect x="455.8" y="1859.0" width="23.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="458.8" y="1870.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (23 samples, 1.55%)</title><rect x="461.3" y="1843.0" width="18.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="464.3" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.27%)</title><rect x="461.3" y="1827.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="464.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.13%)</title><rect x="462.9" y="1811.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="465.9" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (19 samples, 1.28%)</title><rect x="464.5" y="1827.0" width="15.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="467.5" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.20%)</title><rect x="477.2" y="1811.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="480.2" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.27%)</title><rect x="479.6" y="1907.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="482.6" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.13%)</title><rect x="481.2" y="1891.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="484.2" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.13%)</title><rect x="481.2" y="1875.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="484.2" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (201 samples, 13.54%)</title><rect x="482.8" y="1907.0" width="159.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="485.8" y="1918.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (201 samples, 13.54%)</title><rect x="482.8" y="1891.0" width="159.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="485.8" y="1902.0">com/linecorp/decaton..</text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.47%)</title><rect x="492.3" y="1875.0" width="5.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="495.3" y="1886.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.40%)</title><rect x="493.1" y="1859.0" width="4.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="496.1" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (63 samples, 4.24%)</title><rect x="497.9" y="1875.0" width="50.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="500.9" y="1886.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (36 samples, 2.42%)</title><rect x="510.6" y="1859.0" width="28.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="513.6" y="1870.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (34 samples, 2.29%)</title><rect x="512.2" y="1843.0" width="27.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="515.2" y="1854.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (9 samples, 0.61%)</title><rect x="524.1" y="1827.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="527.1" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (9 samples, 0.61%)</title><rect x="524.1" y="1811.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="527.1" y="1822.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (9 samples, 0.61%)</title><rect x="524.1" y="1795.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="527.1" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (9 samples, 0.61%)</title><rect x="524.1" y="1779.0" width="7.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="527.1" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 0.27%)</title><rect x="524.1" y="1763.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="527.1" y="1774.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.27%)</title><rect x="524.1" y="1747.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="527.1" y="1758.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (3 samples, 0.20%)</title><rect x="524.9" y="1731.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="527.9" y="1742.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.07%)</title><rect x="525.7" y="1715.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="528.7" y="1726.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.07%)</title><rect x="526.5" y="1715.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="529.5" y="1726.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.27%)</title><rect x="527.3" y="1763.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="530.3" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.13%)</title><rect x="528.9" y="1747.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="531.9" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="528.9" y="1731.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="531.9" y="1742.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.07%)</title><rect x="529.7" y="1731.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="532.7" y="1742.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (1 samples, 0.07%)</title><rect x="530.5" y="1763.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="533.5" y="1774.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (7 samples, 0.47%)</title><rect x="531.3" y="1827.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="534.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.07%)</title><rect x="536.8" y="1827.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="539.8" y="1838.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.13%)</title><rect x="537.6" y="1827.0" width="1.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="540.6" y="1838.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.13%)</title><rect x="539.2" y="1859.0" width="1.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="542.2" y="1870.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (9 samples, 0.61%)</title><rect x="540.8" y="1859.0" width="7.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="543.8" y="1870.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (17 samples, 1.14%)</title><rect x="548.0" y="1875.0" width="13.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="551.0" y="1886.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.07%)</title><rect x="548.0" y="1859.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="551.0" y="1870.0"></text>
</g>
<g>
<title>java/lang/Long.toString (16 samples, 1.08%)</title><rect x="548.7" y="1859.0" width="12.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="551.7" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="548.7" y="1843.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="551.7" y="1854.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="548.7" y="1827.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="551.7" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="548.7" y="1811.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="551.7" y="1822.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (15 samples, 1.01%)</title><rect x="549.5" y="1843.0" width="12.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="552.5" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 0.27%)</title><rect x="557.5" y="1827.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="560.5" y="1838.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.07%)</title><rect x="560.7" y="1827.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="563.7" y="1838.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (102 samples, 6.87%)</title><rect x="561.5" y="1875.0" width="81.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="564.5" y="1886.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (100 samples, 6.73%)</title><rect x="563.1" y="1859.0" width="79.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="566.1" y="1870.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (36 samples, 2.42%)</title><rect x="563.1" y="1843.0" width="28.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="566.1" y="1854.0">ch..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.54%)</title><rect x="585.3" y="1827.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="588.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.54%)</title><rect x="585.3" y="1811.0" width="6.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="588.3" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.54%)</title><rect x="585.3" y="1795.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="588.3" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.13%)</title><rect x="591.7" y="1843.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="594.7" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.13%)</title><rect x="591.7" y="1827.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="594.7" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.13%)</title><rect x="591.7" y="1811.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="594.7" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.13%)</title><rect x="591.7" y="1795.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="594.7" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.13%)</title><rect x="591.7" y="1779.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="594.7" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (62 samples, 4.18%)</title><rect x="593.2" y="1843.0" width="49.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="596.2" y="1854.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (53 samples, 3.57%)</title><rect x="600.4" y="1827.0" width="42.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="603.4" y="1838.0">java..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.34%)</title><rect x="603.6" y="1811.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="606.6" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (6 samples, 0.40%)</title><rect x="607.5" y="1811.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="610.5" y="1822.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (6 samples, 0.40%)</title><rect x="607.5" y="1795.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="610.5" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (38 samples, 2.56%)</title><rect x="612.3" y="1811.0" width="30.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="615.3" y="1822.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.07%)</title><rect x="626.6" y="1795.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="629.6" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (17 samples, 1.14%)</title><rect x="627.4" y="1795.0" width="13.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="630.4" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.13%)</title><rect x="639.3" y="1779.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="642.3" y="1790.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="639.3" y="1763.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="642.3" y="1774.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="640.1" y="1763.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="643.1" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="640.1" y="1747.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="643.1" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="640.1" y="1731.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="643.1" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="640.1" y="1715.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="643.1" y="1726.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.13%)</title><rect x="640.9" y="1795.0" width="1.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="643.9" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (73 samples, 4.92%)</title><rect x="642.5" y="1907.0" width="58.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="645.5" y="1918.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (73 samples, 4.92%)</title><rect x="642.5" y="1891.0" width="58.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="645.5" y="1902.0">com/li..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="643.3" y="1875.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="646.3" y="1886.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="643.3" y="1859.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="646.3" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/460718720.process (38 samples, 2.56%)</title><rect x="644.1" y="1875.0" width="30.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="647.1" y="1886.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (34 samples, 2.29%)</title><rect x="647.3" y="1859.0" width="27.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="650.3" y="1870.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (31 samples, 2.09%)</title><rect x="647.3" y="1843.0" width="24.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="650.3" y="1854.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (17 samples, 1.14%)</title><rect x="654.4" y="1827.0" width="13.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="657.4" y="1838.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (11 samples, 0.74%)</title><rect x="659.2" y="1811.0" width="8.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="662.2" y="1822.0"></text>
</g>
<g>
<title>[vdso] (11 samples, 0.74%)</title><rect x="659.2" y="1795.0" width="8.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="662.2" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (4 samples, 0.27%)</title><rect x="667.9" y="1827.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="670.9" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.07%)</title><rect x="671.1" y="1827.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="674.1" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.07%)</title><rect x="671.1" y="1811.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="674.1" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="671.1" y="1795.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="674.1" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.20%)</title><rect x="671.9" y="1843.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="674.9" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.20%)</title><rect x="671.9" y="1827.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="674.9" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.20%)</title><rect x="671.9" y="1811.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="674.9" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.20%)</title><rect x="671.9" y="1795.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="674.9" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.20%)</title><rect x="671.9" y="1779.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="674.9" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (4 samples, 0.27%)</title><rect x="674.3" y="1875.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="677.3" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$283/1198105075.complete (1 samples, 0.07%)</title><rect x="677.5" y="1875.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="680.5" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.lambda$pushDownStream$76 (1 samples, 0.07%)</title><rect x="677.5" y="1859.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="680.5" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="677.5" y="1843.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="680.5" y="1854.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="677.5" y="1827.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="680.5" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="677.5" y="1811.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="680.5" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="677.5" y="1795.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="680.5" y="1806.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="677.5" y="1779.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="680.5" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.47%)</title><rect x="678.3" y="1875.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="681.3" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (7 samples, 0.47%)</title><rect x="678.3" y="1859.0" width="5.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="681.3" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.loggingExceptions (1 samples, 0.07%)</title><rect x="683.8" y="1875.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="686.8" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$282/959383218.get (1 samples, 0.07%)</title><rect x="683.8" y="1859.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="686.8" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.lambda$pushDownStream$75 (1 samples, 0.07%)</title><rect x="683.8" y="1843.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="686.8" y="1854.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1016925085.linkToTargetMethod (2 samples, 0.13%)</title><rect x="684.6" y="1875.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="687.6" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (2 samples, 0.13%)</title><rect x="684.6" y="1859.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="687.6" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$283/1198105075.get$Lambda (2 samples, 0.13%)</title><rect x="684.6" y="1843.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="687.6" y="1854.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="685.4" y="1827.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="688.4" y="1838.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="685.4" y="1811.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="688.4" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="685.4" y="1795.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="688.4" y="1806.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="685.4" y="1779.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="688.4" y="1790.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="685.4" y="1763.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="688.4" y="1774.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="685.4" y="1747.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="688.4" y="1758.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="685.4" y="1731.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="688.4" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="685.4" y="1715.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="688.4" y="1726.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.07%)</title><rect x="685.4" y="1699.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="688.4" y="1710.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.07%)</title><rect x="685.4" y="1683.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="688.4" y="1694.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.07%)</title><rect x="685.4" y="1667.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="688.4" y="1678.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.13%)</title><rect x="686.2" y="1875.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="689.2" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.07%)</title><rect x="687.0" y="1859.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="690.0" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (1 samples, 0.07%)</title><rect x="687.0" y="1843.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="690.0" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.40%)</title><rect x="687.8" y="1875.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="690.8" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.34%)</title><rect x="688.6" y="1859.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="691.6" y="1870.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="688.6" y="1843.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="691.6" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (4 samples, 0.27%)</title><rect x="689.4" y="1843.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="692.4" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.07%)</title><rect x="692.6" y="1875.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="695.6" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.07%)</title><rect x="692.6" y="1859.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="695.6" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (9 samples, 0.61%)</title><rect x="693.4" y="1875.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="696.4" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (6 samples, 0.40%)</title><rect x="695.8" y="1859.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="698.8" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.07%)</title><rect x="700.5" y="1907.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="703.5" y="1918.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.07%)</title><rect x="700.5" y="1891.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="703.5" y="1902.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.07%)</title><rect x="700.5" y="1875.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="703.5" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="700.5" y="1859.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="703.5" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="700.5" y="1843.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="703.5" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="700.5" y="1827.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="703.5" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="700.5" y="1811.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="703.5" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (24 samples, 1.62%)</title><rect x="701.3" y="1907.0" width="19.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="704.3" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (24 samples, 1.62%)</title><rect x="701.3" y="1891.0" width="19.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="704.3" y="1902.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.34%)</title><rect x="705.3" y="1875.0" width="4.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="708.3" y="1886.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.34%)</title><rect x="705.3" y="1859.0" width="4.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="708.3" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (14 samples, 0.94%)</title><rect x="709.3" y="1875.0" width="11.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="712.3" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$287/1464030459.accept (14 samples, 0.94%)</title><rect x="709.3" y="1859.0" width="11.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="712.3" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$43 (14 samples, 0.94%)</title><rect x="709.3" y="1843.0" width="11.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="712.3" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/1080389350.complete (14 samples, 0.94%)</title><rect x="709.3" y="1827.0" width="11.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="712.3" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$46 (14 samples, 0.94%)</title><rect x="709.3" y="1811.0" width="11.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="712.3" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1590733096.complete (14 samples, 0.94%)</title><rect x="709.3" y="1795.0" width="11.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="712.3" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (14 samples, 0.94%)</title><rect x="709.3" y="1779.0" width="11.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="712.3" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (14 samples, 0.94%)</title><rect x="709.3" y="1763.0" width="11.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="712.3" y="1774.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (14 samples, 0.94%)</title><rect x="709.3" y="1747.0" width="11.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="712.3" y="1758.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (14 samples, 0.94%)</title><rect x="709.3" y="1731.0" width="11.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="712.3" y="1742.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (14 samples, 0.94%)</title><rect x="709.3" y="1715.0" width="11.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="712.3" y="1726.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.27%)</title><rect x="717.2" y="1699.0" width="3.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="720.2" y="1710.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.27%)</title><rect x="717.2" y="1683.0" width="3.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="720.2" y="1694.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1016925085.linkToTargetMethod (1 samples, 0.07%)</title><rect x="720.4" y="1923.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="723.4" y="1934.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (1 samples, 0.07%)</title><rect x="720.4" y="1907.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="723.4" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$287/1464030459.get$Lambda (1 samples, 0.07%)</title><rect x="720.4" y="1891.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="723.4" y="1902.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="720.4" y="1875.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="723.4" y="1886.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="720.4" y="1859.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="723.4" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="720.4" y="1843.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="723.4" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="720.4" y="1827.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="723.4" y="1838.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="720.4" y="1811.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="723.4" y="1822.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.07%)</title><rect x="720.4" y="1795.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="723.4" y="1806.0"></text>
</g>
<g>
<title>VMThread::execute(VM_Operation*) (1 samples, 0.07%)</title><rect x="720.4" y="1779.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="723.4" y="1790.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit_prologue() (1 samples, 0.07%)</title><rect x="720.4" y="1763.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="723.4" y="1774.0"></text>
</g>
<g>
<title>VM_GC_Operation::doit_prologue() (1 samples, 0.07%)</title><rect x="720.4" y="1747.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="723.4" y="1758.0"></text>
</g>
<g>
<title>InstanceRefKlass::acquire_pending_list_lock(BasicLock*) (1 samples, 0.07%)</title><rect x="720.4" y="1731.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="723.4" y="1742.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.07%)</title><rect x="720.4" y="1715.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="723.4" y="1726.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin_VaryDuration(Thread*) (1 samples, 0.07%)</title><rect x="720.4" y="1699.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="723.4" y="1710.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (24 samples, 1.62%)</title><rect x="721.2" y="1923.0" width="19.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="724.2" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (24 samples, 1.62%)</title><rect x="721.2" y="1907.0" width="19.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="724.2" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.07%)</title><rect x="722.0" y="1891.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="725.0" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (22 samples, 1.48%)</title><rect x="722.8" y="1891.0" width="17.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="725.8" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$287/1464030459.accept (22 samples, 1.48%)</title><rect x="722.8" y="1875.0" width="17.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="725.8" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$43 (22 samples, 1.48%)</title><rect x="722.8" y="1859.0" width="17.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="725.8" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/1080389350.complete (22 samples, 1.48%)</title><rect x="722.8" y="1843.0" width="17.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="725.8" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$46 (22 samples, 1.48%)</title><rect x="722.8" y="1827.0" width="17.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="725.8" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1590733096.complete (19 samples, 1.28%)</title><rect x="722.8" y="1811.0" width="15.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="725.8" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (19 samples, 1.28%)</title><rect x="722.8" y="1795.0" width="15.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="725.8" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (19 samples, 1.28%)</title><rect x="722.8" y="1779.0" width="15.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="725.8" y="1790.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (19 samples, 1.28%)</title><rect x="722.8" y="1763.0" width="15.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="725.8" y="1774.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (19 samples, 1.28%)</title><rect x="722.8" y="1747.0" width="15.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="725.8" y="1758.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (19 samples, 1.28%)</title><rect x="722.8" y="1731.0" width="15.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="725.8" y="1742.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.07%)</title><rect x="737.1" y="1715.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="740.1" y="1726.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$276/142460742.complete (3 samples, 0.20%)</title><rect x="737.9" y="1811.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="740.9" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$null$71 (3 samples, 0.20%)</title><rect x="737.9" y="1795.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="740.9" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.07%)</title><rect x="739.5" y="1779.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="742.5" y="1790.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.40%)</title><rect x="740.2" y="1923.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="743.2" y="1934.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.40%)</title><rect x="740.2" y="1907.0" width="4.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="743.2" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (3 samples, 0.20%)</title><rect x="745.0" y="1939.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="748.0" y="1950.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (3 samples, 0.20%)</title><rect x="745.0" y="1923.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="748.0" y="1934.0"></text>
</g>
<g>
<title>java/time/Duration.create (3 samples, 0.20%)</title><rect x="745.0" y="1907.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="748.0" y="1918.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.20%)</title><rect x="745.0" y="1891.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="748.0" y="1902.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="745.0" y="1875.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="748.0" y="1886.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.13%)</title><rect x="745.8" y="1875.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="748.8" y="1886.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.13%)</title><rect x="745.8" y="1859.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="748.8" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.13%)</title><rect x="745.8" y="1843.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="748.8" y="1854.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="745.8" y="1827.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="748.8" y="1838.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.07%)</title><rect x="746.6" y="1827.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="749.6" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (8 samples, 0.54%)</title><rect x="747.4" y="1939.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="750.4" y="1950.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="749.8" y="1923.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="752.8" y="1934.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.20%)</title><rect x="750.6" y="1923.0" width="2.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="753.6" y="1934.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.20%)</title><rect x="750.6" y="1907.0" width="2.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="753.6" y="1918.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="753.0" y="1923.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="756.0" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1 samples, 0.07%)</title><rect x="753.8" y="1955.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="756.8" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (1 samples, 0.07%)</title><rect x="753.8" y="1939.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="756.8" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (1 samples, 0.07%)</title><rect x="753.8" y="1923.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="756.8" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (1 samples, 0.07%)</title><rect x="753.8" y="1907.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="756.8" y="1918.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.07%)</title><rect x="753.8" y="1891.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="756.8" y="1902.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.07%)</title><rect x="753.8" y="1875.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="756.8" y="1886.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.07%)</title><rect x="753.8" y="1859.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="756.8" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (1 samples, 0.07%)</title><rect x="754.6" y="1987.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="757.6" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (277 samples, 18.65%)</title><rect x="755.3" y="1987.0" width="220.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="758.3" y="1998.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (274 samples, 18.45%)</title><rect x="756.9" y="1971.0" width="217.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="759.9" y="1982.0">java/util/concurrent/LinkedBl..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (247 samples, 16.63%)</title><rect x="763.3" y="1955.0" width="196.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="766.3" y="1966.0">java/util/concurrent/locks..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (20 samples, 1.35%)</title><rect x="774.4" y="1939.0" width="15.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="777.4" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (4 samples, 0.27%)</title><rect x="790.3" y="1939.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="793.3" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.27%)</title><rect x="790.3" y="1923.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="793.3" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.27%)</title><rect x="790.3" y="1907.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="793.3" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.27%)</title><rect x="790.3" y="1891.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="793.3" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (4 samples, 0.27%)</title><rect x="790.3" y="1875.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="793.3" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (208 samples, 14.01%)</title><rect x="793.5" y="1939.0" width="165.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="796.5" y="1950.0">java/util/concurrent/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (197 samples, 13.27%)</title><rect x="802.2" y="1923.0" width="156.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="805.2" y="1934.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.13%)</title><rect x="806.2" y="1907.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="809.2" y="1918.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.13%)</title><rect x="807.8" y="1907.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="810.8" y="1918.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.13%)</title><rect x="809.4" y="1907.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="812.4" y="1918.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.07%)</title><rect x="811.0" y="1907.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="814.0" y="1918.0"></text>
</g>
<g>
<title>Unsafe_Park (178 samples, 11.99%)</title><rect x="811.8" y="1907.0" width="141.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="814.8" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (5 samples, 0.34%)</title><rect x="818.9" y="1891.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="821.9" y="1902.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.07%)</title><rect x="822.9" y="1891.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="825.9" y="1902.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="823.7" y="1891.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="826.7" y="1902.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (27 samples, 1.82%)</title><rect x="824.5" y="1891.0" width="21.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="827.5" y="1902.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (6 samples, 0.40%)</title><rect x="833.2" y="1875.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="836.2" y="1886.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.13%)</title><rect x="835.6" y="1859.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="838.6" y="1870.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.07%)</title><rect x="836.4" y="1843.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="839.4" y="1854.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.07%)</title><rect x="837.2" y="1859.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="840.2" y="1870.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.07%)</title><rect x="838.0" y="1875.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="841.0" y="1886.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="838.8" y="1875.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="841.8" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (8 samples, 0.54%)</title><rect x="839.6" y="1875.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="842.6" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.07%)</title><rect x="845.9" y="1891.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="848.9" y="1902.0"></text>
</g>
<g>
<title>__lll_lock_wait (9 samples, 0.61%)</title><rect x="846.7" y="1891.0" width="7.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="849.7" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (42 samples, 2.83%)</title><rect x="853.9" y="1891.0" width="33.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="856.9" y="1902.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (63 samples, 4.24%)</title><rect x="887.3" y="1891.0" width="50.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="890.3" y="1902.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.20%)</title><rect x="937.3" y="1891.0" width="2.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="940.3" y="1902.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.13%)</title><rect x="939.7" y="1891.0" width="1.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="942.7" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.07%)</title><rect x="941.3" y="1891.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="944.3" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.13%)</title><rect x="942.1" y="1891.0" width="1.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="945.1" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (6 samples, 0.40%)</title><rect x="943.7" y="1891.0" width="4.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="946.7" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.27%)</title><rect x="948.4" y="1891.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="951.4" y="1902.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="951.6" y="1891.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="954.6" y="1902.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="952.4" y="1891.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="955.4" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.27%)</title><rect x="953.2" y="1907.0" width="3.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="956.2" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.20%)</title><rect x="956.4" y="1907.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="959.4" y="1918.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.07%)</title><rect x="958.8" y="1939.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="961.8" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (19 samples, 1.28%)</title><rect x="959.6" y="1955.0" width="15.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="962.6" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (19 samples, 1.28%)</title><rect x="959.6" y="1939.0" width="15.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="962.6" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (19 samples, 1.28%)</title><rect x="959.6" y="1923.0" width="15.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="962.6" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (19 samples, 1.28%)</title><rect x="959.6" y="1907.0" width="15.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="962.6" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.07%)</title><rect x="974.7" y="1971.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="977.7" y="1982.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.07%)</title><rect x="975.5" y="2035.0" width="0.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="978.5" y="2046.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.07%)</title><rect x="976.2" y="2035.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="979.2" y="2046.0"></text>
</g>
<g>
<title>start_thread (268 samples, 18.05%)</title><rect x="977.0" y="2035.0" width="213.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="980.0" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (268 samples, 18.05%)</title><rect x="977.0" y="2019.0" width="213.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="980.0" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (26 samples, 1.75%)</title><rect x="977.0" y="2003.0" width="20.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="980.0" y="2014.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (5 samples, 0.34%)</title><rect x="977.0" y="1987.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="980.0" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.34%)</title><rect x="977.0" y="1971.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="980.0" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.07%)</title><rect x="977.0" y="1955.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="980.0" y="1966.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.27%)</title><rect x="977.8" y="1955.0" width="3.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="980.8" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (19 samples, 1.28%)</title><rect x="981.0" y="1987.0" width="15.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="984.0" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.20%)</title><rect x="981.0" y="1971.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="984.0" y="1982.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.07%)</title><rect x="981.8" y="1955.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="984.8" y="1966.0"></text>
</g>
<g>
<title>TypeArrayKlass::oop_oop_iterate(oopDesc*, ExtendedOopClosure*) (1 samples, 0.07%)</title><rect x="981.8" y="1939.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="984.8" y="1950.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.07%)</title><rect x="982.6" y="1955.0" width="0.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="985.6" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (12 samples, 0.81%)</title><rect x="983.4" y="1971.0" width="9.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="986.4" y="1982.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.34%)</title><rect x="983.4" y="1955.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="986.4" y="1966.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.13%)</title><rect x="983.4" y="1939.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="986.4" y="1950.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.07%)</title><rect x="984.2" y="1923.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="987.2" y="1934.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.07%)</title><rect x="984.2" y="1907.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="987.2" y="1918.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (3 samples, 0.20%)</title><rect x="985.0" y="1939.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="988.0" y="1950.0"></text>
</g>
<g>
<title>CompilerThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="985.0" y="1923.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="988.0" y="1934.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="985.0" y="1907.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="988.0" y="1918.0"></text>
</g>
<g>
<title>JNIHandleBlock::oops_do(OopClosure*) (1 samples, 0.07%)</title><rect x="985.0" y="1891.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="988.0" y="1902.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.07%)</title><rect x="985.0" y="1875.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="988.0" y="1886.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.07%)</title><rect x="985.0" y="1859.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="988.0" y="1870.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.07%)</title><rect x="985.0" y="1843.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="988.0" y="1854.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.13%)</title><rect x="985.8" y="1923.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="988.8" y="1934.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.07%)</title><rect x="985.8" y="1907.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="988.8" y="1918.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.07%)</title><rect x="985.8" y="1891.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="988.8" y="1902.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_strong_code_root(nmethod*) (1 samples, 0.07%)</title><rect x="985.8" y="1875.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="988.8" y="1886.0"></text>
</g>
<g>
<title>G1CodeRootSet::contains(nmethod*) (1 samples, 0.07%)</title><rect x="985.8" y="1859.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="988.8" y="1870.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.07%)</title><rect x="986.6" y="1907.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="989.6" y="1918.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**), OopClosure*) (1 samples, 0.07%)</title><rect x="986.6" y="1891.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="989.6" y="1902.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.07%)</title><rect x="986.6" y="1875.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="989.6" y="1886.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.07%)</title><rect x="986.6" y="1859.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="989.6" y="1870.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.07%)</title><rect x="986.6" y="1843.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="989.6" y="1854.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (7 samples, 0.47%)</title><rect x="987.4" y="1955.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="990.4" y="1966.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.07%)</title><rect x="987.4" y="1939.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="990.4" y="1950.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (6 samples, 0.40%)</title><rect x="988.2" y="1939.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="991.2" y="1950.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (4 samples, 0.27%)</title><rect x="992.9" y="1971.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="995.9" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (4 samples, 0.27%)</title><rect x="992.9" y="1955.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="995.9" y="1966.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (3 samples, 0.20%)</title><rect x="992.9" y="1939.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="995.9" y="1950.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (3 samples, 0.20%)</title><rect x="992.9" y="1923.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="995.9" y="1934.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 0.20%)</title><rect x="992.9" y="1907.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="995.9" y="1918.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (3 samples, 0.20%)</title><rect x="992.9" y="1891.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="995.9" y="1902.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.07%)</title><rect x="995.3" y="1939.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="998.3" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.07%)</title><rect x="995.3" y="1923.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="998.3" y="1934.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.07%)</title><rect x="995.3" y="1907.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="998.3" y="1918.0"></text>
</g>
<g>
<title>HeapRegionRemSetIterator::has_next(unsigned long&amp;) (1 samples, 0.07%)</title><rect x="995.3" y="1891.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="998.3" y="1902.0"></text>
</g>
<g>
<title>RSHashTableIter::has_next(unsigned long&amp;) (1 samples, 0.07%)</title><rect x="995.3" y="1875.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="998.3" y="1886.0"></text>
</g>
<g>
<title>Monitor::notify_all() (1 samples, 0.07%)</title><rect x="996.1" y="1987.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="999.1" y="1998.0"></text>
</g>
<g>
<title>Thread::muxAcquire(long volatile*, char const*) (1 samples, 0.07%)</title><rect x="996.1" y="1971.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="999.1" y="1982.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.07%)</title><rect x="996.9" y="1987.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="999.9" y="1998.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.07%)</title><rect x="996.9" y="1971.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="999.9" y="1982.0"></text>
</g>
<g>
<title>JavaThread::run() (240 samples, 16.16%)</title><rect x="997.7" y="2003.0" width="190.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1000.7" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (240 samples, 16.16%)</title><rect x="997.7" y="1987.0" width="190.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1000.7" y="1998.0">JavaThread::thread_main_i..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (239 samples, 16.09%)</title><rect x="997.7" y="1971.0" width="189.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1000.7" y="1982.0">CompileBroker::compiler_t..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (238 samples, 16.03%)</title><rect x="997.7" y="1955.0" width="189.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1000.7" y="1966.0">CompileBroker::invoke_com..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (237 samples, 15.96%)</title><rect x="997.7" y="1939.0" width="188.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1000.7" y="1950.0">C2Compiler::compile_meth..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (237 samples, 15.96%)</title><rect x="997.7" y="1923.0" width="188.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1000.7" y="1934.0">Compile::Compile(ciEnv*,..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.07%)</title><rect x="997.7" y="1907.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1000.7" y="1918.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.07%)</title><rect x="997.7" y="1891.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1000.7" y="1902.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="997.7" y="1875.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1000.7" y="1886.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="997.7" y="1859.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1000.7" y="1870.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="997.7" y="1843.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1000.7" y="1854.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="997.7" y="1827.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1000.7" y="1838.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="997.7" y="1811.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1000.7" y="1822.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="997.7" y="1795.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1000.7" y="1806.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.07%)</title><rect x="997.7" y="1779.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1000.7" y="1790.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="997.7" y="1763.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1000.7" y="1774.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="997.7" y="1747.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1000.7" y="1758.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="997.7" y="1731.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1000.7" y="1742.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="997.7" y="1715.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1000.7" y="1726.0"></text>
</g>
<g>
<title>ciObjectFactory::get_unloaded_klass(ciKlass*, ciSymbol*, bool) (1 samples, 0.07%)</title><rect x="997.7" y="1699.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1000.7" y="1710.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (94 samples, 6.33%)</title><rect x="998.5" y="1907.0" width="74.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1001.5" y="1918.0">Compile:..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.13%)</title><rect x="998.5" y="1891.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1001.5" y="1902.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.07%)</title><rect x="998.5" y="1875.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1001.5" y="1886.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.07%)</title><rect x="998.5" y="1859.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1001.5" y="1870.0"></text>
</g>
<g>
<title>MachNode::bottom_type() const (1 samples, 0.07%)</title><rect x="998.5" y="1843.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1001.5" y="1854.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="999.3" y="1875.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1002.3" y="1886.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (6 samples, 0.40%)</title><rect x="1000.1" y="1891.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1003.1" y="1902.0"></text>
</g>
<g>
<title>Compile::FillExceptionTables(unsigned int, unsigned int*, unsigned int*, Label*) (1 samples, 0.07%)</title><rect x="1000.1" y="1875.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1003.1" y="1886.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (3 samples, 0.20%)</title><rect x="1000.9" y="1875.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1003.9" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.13%)</title><rect x="1001.7" y="1859.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1004.7" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="1002.5" y="1843.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1005.5" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.07%)</title><rect x="1003.3" y="1875.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1006.3" y="1886.0"></text>
</g>
<g>
<title>MachOper::disp_reloc() const (1 samples, 0.07%)</title><rect x="1004.1" y="1875.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1007.1" y="1886.0"></text>
</g>
<g>
<title>MachNode::peephole(Block*, int, PhaseRegAlloc*, int&amp;, Compile*) (1 samples, 0.07%)</title><rect x="1004.9" y="1891.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1007.9" y="1902.0"></text>
</g>
<g>
<title>Matcher::match() (11 samples, 0.74%)</title><rect x="1005.6" y="1891.0" width="8.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1008.6" y="1902.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.07%)</title><rect x="1005.6" y="1875.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1008.6" y="1886.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (10 samples, 0.67%)</title><rect x="1006.4" y="1875.0" width="8.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1009.4" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (7 samples, 0.47%)</title><rect x="1007.2" y="1859.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1010.2" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.13%)</title><rect x="1012.8" y="1859.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1015.8" y="1870.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="1012.8" y="1843.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1015.8" y="1854.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="1012.8" y="1827.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1015.8" y="1838.0"></text>
</g>
<g>
<title>TypeInt::singleton() const (1 samples, 0.07%)</title><rect x="1013.6" y="1843.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1016.6" y="1854.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.07%)</title><rect x="1014.4" y="1891.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1017.4" y="1902.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.07%)</title><rect x="1014.4" y="1875.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1017.4" y="1886.0"></text>
</g>
<g>
<title>Block::num_fall_throughs() (1 samples, 0.07%)</title><rect x="1014.4" y="1859.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1017.4" y="1870.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.07%)</title><rect x="1014.4" y="1843.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1017.4" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (6 samples, 0.40%)</title><rect x="1015.2" y="1891.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1018.2" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.07%)</title><rect x="1015.2" y="1875.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1018.2" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::do_DFS(Tarjan*, unsigned int) (1 samples, 0.07%)</title><rect x="1015.2" y="1859.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1018.2" y="1870.0"></text>
</g>
<g>
<title>Block_Stack::most_frequent_successor(Block*) (1 samples, 0.07%)</title><rect x="1015.2" y="1843.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1018.2" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 0.34%)</title><rect x="1016.0" y="1875.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1019.0" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.07%)</title><rect x="1016.0" y="1859.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1019.0" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (2 samples, 0.13%)</title><rect x="1016.8" y="1859.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1019.8" y="1870.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.07%)</title><rect x="1017.6" y="1843.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1020.6" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.13%)</title><rect x="1018.4" y="1859.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1021.4" y="1870.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.07%)</title><rect x="1018.4" y="1843.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1021.4" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.07%)</title><rect x="1019.2" y="1843.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1022.2" y="1854.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.07%)</title><rect x="1019.2" y="1827.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1022.2" y="1838.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1019.2" y="1811.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1022.2" y="1822.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (67 samples, 4.51%)</title><rect x="1020.0" y="1891.0" width="53.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1023.0" y="1902.0">Phase..</text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.07%)</title><rect x="1020.7" y="1875.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1023.7" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.13%)</title><rect x="1021.5" y="1875.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1024.5" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 0.27%)</title><rect x="1023.1" y="1875.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1026.1" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1023.9" y="1859.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1026.9" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.13%)</title><rect x="1024.7" y="1859.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1027.7" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.13%)</title><rect x="1024.7" y="1843.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1027.7" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.20%)</title><rect x="1026.3" y="1875.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1029.3" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 0.20%)</title><rect x="1026.3" y="1859.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1029.3" y="1870.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="1027.9" y="1843.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1030.9" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (9 samples, 0.61%)</title><rect x="1028.7" y="1875.0" width="7.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1031.7" y="1886.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.07%)</title><rect x="1034.3" y="1859.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1037.3" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.07%)</title><rect x="1035.1" y="1859.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1038.1" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 0.67%)</title><rect x="1035.8" y="1875.0" width="8.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1038.8" y="1886.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (2 samples, 0.13%)</title><rect x="1038.2" y="1859.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1041.2" y="1870.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.07%)</title><rect x="1039.0" y="1843.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1042.0" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 0.27%)</title><rect x="1039.8" y="1859.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1042.8" y="1870.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.07%)</title><rect x="1043.0" y="1859.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1046.0" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.07%)</title><rect x="1043.8" y="1875.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1046.8" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.07%)</title><rect x="1043.8" y="1859.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1046.8" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.27%)</title><rect x="1044.6" y="1875.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1047.6" y="1886.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.07%)</title><rect x="1047.0" y="1859.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1050.0" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 0.34%)</title><rect x="1047.8" y="1875.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1050.8" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.07%)</title><rect x="1050.9" y="1859.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1053.9" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.07%)</title><rect x="1051.7" y="1875.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1054.7" y="1886.0"></text>
</g>
<g>
<title>loadConINode::bottom_type() const (1 samples, 0.07%)</title><rect x="1051.7" y="1859.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1054.7" y="1870.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1051.7" y="1843.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1054.7" y="1854.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1051.7" y="1827.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1054.7" y="1838.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (12 samples, 0.81%)</title><rect x="1052.5" y="1875.0" width="9.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1055.5" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.07%)</title><rect x="1052.5" y="1859.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1055.5" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.07%)</title><rect x="1052.5" y="1843.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1055.5" y="1854.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (11 samples, 0.74%)</title><rect x="1053.3" y="1859.0" width="8.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1056.3" y="1870.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (10 samples, 0.67%)</title><rect x="1054.1" y="1843.0" width="8.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1057.1" y="1854.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (5 samples, 0.34%)</title><rect x="1054.1" y="1827.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1057.1" y="1838.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (4 samples, 0.27%)</title><rect x="1058.1" y="1827.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1061.1" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::test_edge_sq(unsigned int, unsigned int) const (1 samples, 0.07%)</title><rect x="1061.3" y="1827.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1064.3" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.13%)</title><rect x="1062.1" y="1875.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1065.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 0.20%)</title><rect x="1063.7" y="1875.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1066.7" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.13%)</title><rect x="1064.5" y="1859.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1067.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.07%)</title><rect x="1066.0" y="1875.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1069.0" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.07%)</title><rect x="1066.0" y="1859.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1069.0" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 0.27%)</title><rect x="1066.8" y="1875.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1069.8" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.07%)</title><rect x="1066.8" y="1859.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1069.8" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.20%)</title><rect x="1067.6" y="1859.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1070.6" y="1870.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.07%)</title><rect x="1070.0" y="1875.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1073.0" y="1886.0"></text>
</g>
<g>
<title>RegMask::is_vector(unsigned int) (1 samples, 0.07%)</title><rect x="1070.8" y="1875.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1073.8" y="1886.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.07%)</title><rect x="1071.6" y="1875.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1074.6" y="1886.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.07%)</title><rect x="1071.6" y="1859.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1074.6" y="1870.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1072.4" y="1875.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1075.4" y="1886.0"></text>
</g>
<g>
<title>Compile::Optimize() (127 samples, 8.55%)</title><rect x="1073.2" y="1907.0" width="100.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1076.2" y="1918.0">Compile::Opt..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (6 samples, 0.40%)</title><rect x="1073.2" y="1891.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1076.2" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (6 samples, 0.40%)</title><rect x="1073.2" y="1875.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1076.2" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1074.0" y="1859.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1077.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.07%)</title><rect x="1074.0" y="1843.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1077.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (1 samples, 0.07%)</title><rect x="1074.0" y="1827.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1077.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (4 samples, 0.27%)</title><rect x="1074.8" y="1859.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1077.8" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.27%)</title><rect x="1074.8" y="1843.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1077.8" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.27%)</title><rect x="1074.8" y="1827.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1077.8" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="1074.8" y="1811.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1077.8" y="1822.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="1074.8" y="1795.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1077.8" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.20%)</title><rect x="1075.6" y="1811.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1078.6" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1075.6" y="1795.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1078.6" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1075.6" y="1779.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1078.6" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1075.6" y="1763.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1078.6" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1075.6" y="1747.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1078.6" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1075.6" y="1731.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1078.6" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1075.6" y="1715.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1078.6" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1075.6" y="1699.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1078.6" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1075.6" y="1683.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1078.6" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1075.6" y="1667.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1078.6" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1075.6" y="1651.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1078.6" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1075.6" y="1635.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1078.6" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1075.6" y="1619.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1078.6" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1075.6" y="1603.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1078.6" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1075.6" y="1587.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1078.6" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1075.6" y="1571.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1078.6" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1075.6" y="1555.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1078.6" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="1075.6" y="1539.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1078.6" y="1550.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="1075.6" y="1523.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1078.6" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.13%)</title><rect x="1076.4" y="1795.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1079.4" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.13%)</title><rect x="1076.4" y="1779.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1079.4" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1076.4" y="1763.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1079.4" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1076.4" y="1747.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1079.4" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1076.4" y="1731.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1079.4" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1076.4" y="1715.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1079.4" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1076.4" y="1699.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1079.4" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1076.4" y="1683.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1079.4" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1076.4" y="1667.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1079.4" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1076.4" y="1651.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1079.4" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1076.4" y="1635.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1079.4" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1076.4" y="1619.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1079.4" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1076.4" y="1603.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1079.4" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1076.4" y="1587.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1079.4" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1076.4" y="1571.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1079.4" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1076.4" y="1555.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1079.4" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1076.4" y="1539.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1079.4" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="1076.4" y="1523.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1079.4" y="1534.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="1076.4" y="1507.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1079.4" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1077.2" y="1763.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1080.2" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1077.2" y="1747.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1080.2" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1077.2" y="1731.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1080.2" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1077.2" y="1715.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1080.2" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1077.2" y="1699.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1080.2" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1077.2" y="1683.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1080.2" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1077.2" y="1667.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1080.2" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1077.2" y="1651.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1080.2" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1077.2" y="1635.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1080.2" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1077.2" y="1619.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1080.2" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1077.2" y="1603.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1080.2" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1077.2" y="1587.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1080.2" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1077.2" y="1571.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1080.2" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1077.2" y="1555.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1080.2" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1077.2" y="1539.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1080.2" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1077.2" y="1523.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1080.2" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1077.2" y="1507.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1080.2" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1077.2" y="1491.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1080.2" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1077.2" y="1475.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1080.2" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1077.2" y="1459.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1080.2" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1077.2" y="1443.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1080.2" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1077.2" y="1427.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1080.2" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1077.2" y="1411.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1080.2" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="1077.2" y="1395.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1080.2" y="1406.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.13%)</title><rect x="1078.0" y="1891.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1081.0" y="1902.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1078.8" y="1875.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1081.8" y="1886.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1078.8" y="1859.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1081.8" y="1870.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.07%)</title><rect x="1078.8" y="1843.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1081.8" y="1854.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.07%)</title><rect x="1078.8" y="1827.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1081.8" y="1838.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1078.8" y="1811.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1081.8" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (100 samples, 6.73%)</title><rect x="1079.5" y="1891.0" width="79.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1082.5" y="1902.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (5 samples, 0.34%)</title><rect x="1079.5" y="1875.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1082.5" y="1886.0"></text>
</g>
<g>
<title>CProjNode::is_CFG() const (1 samples, 0.07%)</title><rect x="1081.9" y="1859.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1084.9" y="1870.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.07%)</title><rect x="1082.7" y="1859.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1085.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.27%)</title><rect x="1083.5" y="1875.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1086.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.07%)</title><rect x="1084.3" y="1859.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1087.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.13%)</title><rect x="1085.1" y="1859.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1088.1" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (78 samples, 5.25%)</title><rect x="1086.7" y="1875.0" width="62.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1089.7" y="1886.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (75 samples, 5.05%)</title><rect x="1089.1" y="1859.0" width="59.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1092.1" y="1870.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (7 samples, 0.47%)</title><rect x="1090.7" y="1843.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1093.7" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (65 samples, 4.38%)</title><rect x="1096.2" y="1843.0" width="51.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1099.2" y="1854.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.07%)</title><rect x="1136.8" y="1827.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1139.8" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.07%)</title><rect x="1136.8" y="1811.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1139.8" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (13 samples, 0.88%)</title><rect x="1137.6" y="1827.0" width="10.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1140.6" y="1838.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1147.9" y="1843.0" width="0.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1150.9" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.07%)</title><rect x="1148.7" y="1875.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.7" y="1886.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.07%)</title><rect x="1148.7" y="1859.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1151.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (7 samples, 0.47%)</title><rect x="1149.5" y="1875.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.07%)</title><rect x="1151.1" y="1859.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.1" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_region(Node*, Node*) (1 samples, 0.07%)</title><rect x="1151.1" y="1843.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.1" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.07%)</title><rect x="1151.1" y="1827.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.1" y="1838.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.07%)</title><rect x="1151.1" y="1811.0" width="0.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1154.1" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (4 samples, 0.27%)</title><rect x="1151.9" y="1859.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.9" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (2 samples, 0.13%)</title><rect x="1151.9" y="1843.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.9" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (2 samples, 0.13%)</title><rect x="1153.4" y="1843.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1156.4" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (2 samples, 0.13%)</title><rect x="1153.4" y="1827.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.4" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.34%)</title><rect x="1155.0" y="1875.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1158.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 0.34%)</title><rect x="1155.0" y="1859.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.0" y="1870.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1155.0" y="1843.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.0" y="1854.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1155.0" y="1827.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.0" y="1838.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (3 samples, 0.20%)</title><rect x="1155.8" y="1843.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.8" y="1854.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.07%)</title><rect x="1155.8" y="1827.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.8" y="1838.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (2 samples, 0.13%)</title><rect x="1156.6" y="1827.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.6" y="1838.0"></text>
</g>
<g>
<title>SubINode::sub(Type const*, Type const*) const (1 samples, 0.07%)</title><rect x="1158.2" y="1843.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.2" y="1854.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1158.2" y="1827.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.2" y="1838.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1158.2" y="1811.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.2" y="1822.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (17 samples, 1.14%)</title><rect x="1159.0" y="1891.0" width="13.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.0" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (17 samples, 1.14%)</title><rect x="1159.0" y="1875.0" width="13.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.0" y="1886.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (2 samples, 0.13%)</title><rect x="1159.0" y="1859.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.0" y="1870.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1159.8" y="1843.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.8" y="1854.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.13%)</title><rect x="1160.6" y="1859.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.6" y="1870.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.07%)</title><rect x="1160.6" y="1843.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.6" y="1854.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1160.6" y="1827.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.6" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1160.6" y="1811.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.6" y="1822.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.07%)</title><rect x="1161.4" y="1843.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.4" y="1854.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1161.4" y="1827.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.4" y="1838.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1161.4" y="1811.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.4" y="1822.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1161.4" y="1795.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.4" y="1806.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1161.4" y="1779.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.4" y="1790.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="1161.4" y="1763.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1164.4" y="1774.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1162.2" y="1859.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.2" y="1870.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1162.2" y="1843.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.2" y="1854.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="1162.2" y="1827.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.2" y="1838.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.07%)</title><rect x="1162.2" y="1811.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.2" y="1822.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1162.2" y="1795.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.2" y="1806.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1162.2" y="1779.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.2" y="1790.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.07%)</title><rect x="1162.2" y="1763.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.2" y="1774.0"></text>
</g>
<g>
<title>MergeMemNode::hash() const (1 samples, 0.07%)</title><rect x="1163.0" y="1859.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.07%)</title><rect x="1163.8" y="1859.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.20%)</title><rect x="1164.6" y="1859.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.6" y="1870.0"></text>
</g>
<g>
<title>Node::del_req(unsigned int) (1 samples, 0.07%)</title><rect x="1166.2" y="1843.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.2" y="1854.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1167.0" y="1859.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.0" y="1870.0"></text>
</g>
<g>
<title>MemNode::optimize_memory_chain(Node*, TypePtr const*, Node*, PhaseGVN*) (1 samples, 0.07%)</title><rect x="1167.0" y="1843.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.0" y="1854.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1167.8" y="1859.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.8" y="1870.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.13%)</title><rect x="1168.5" y="1859.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1168.5" y="1843.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.5" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1168.5" y="1827.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.5" y="1838.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.07%)</title><rect x="1168.5" y="1811.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.5" y="1822.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1169.3" y="1843.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.3" y="1854.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (3 samples, 0.20%)</title><rect x="1170.1" y="1859.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.1" y="1870.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (3 samples, 0.20%)</title><rect x="1170.1" y="1843.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.1" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.20%)</title><rect x="1170.1" y="1827.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.1" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.20%)</title><rect x="1170.1" y="1811.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.1" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1170.1" y="1795.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.1" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1170.1" y="1779.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.1" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1170.1" y="1763.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.1" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1170.1" y="1747.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.1" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1170.1" y="1731.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.1" y="1742.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1170.1" y="1715.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.1" y="1726.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.13%)</title><rect x="1170.1" y="1699.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.1" y="1710.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.1" y="1683.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.1" y="1694.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.1" y="1667.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.1" y="1678.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.1" y="1651.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.1" y="1662.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.1" y="1635.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.1" y="1646.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.1" y="1619.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.1" y="1630.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.1" y="1603.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.1" y="1614.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.1" y="1587.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.1" y="1598.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.1" y="1571.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.1" y="1582.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1170.1" y="1555.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.1" y="1566.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1170.1" y="1539.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.1" y="1550.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1170.1" y="1523.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.1" y="1534.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1170.9" y="1683.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.9" y="1694.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1170.9" y="1667.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.9" y="1678.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1171.7" y="1795.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.7" y="1806.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1171.7" y="1779.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.7" y="1790.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.07%)</title><rect x="1172.5" y="1891.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.5" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.07%)</title><rect x="1172.5" y="1875.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.5" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1172.5" y="1859.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.5" y="1870.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1172.5" y="1843.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.5" y="1854.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1172.5" y="1827.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.5" y="1838.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1172.5" y="1811.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.5" y="1822.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.07%)</title><rect x="1173.3" y="1891.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.3" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="1173.3" y="1875.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.3" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="1173.3" y="1859.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.3" y="1870.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1173.3" y="1843.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.3" y="1854.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1173.3" y="1827.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.3" y="1838.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.07%)</title><rect x="1173.3" y="1811.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.3" y="1822.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.07%)</title><rect x="1173.3" y="1795.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.3" y="1806.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="1173.3" y="1779.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.3" y="1790.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1173.3" y="1763.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.3" y="1774.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.07%)</title><rect x="1173.3" y="1747.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.3" y="1758.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.07%)</title><rect x="1173.3" y="1731.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.3" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (15 samples, 1.01%)</title><rect x="1174.1" y="1907.0" width="11.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.1" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (15 samples, 1.01%)</title><rect x="1174.1" y="1891.0" width="11.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.1" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (15 samples, 1.01%)</title><rect x="1174.1" y="1875.0" width="11.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.1" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (15 samples, 1.01%)</title><rect x="1174.1" y="1859.0" width="11.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.1" y="1870.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.07%)</title><rect x="1174.1" y="1843.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.1" y="1854.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.07%)</title><rect x="1174.1" y="1827.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.1" y="1838.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.07%)</title><rect x="1174.1" y="1811.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.1" y="1822.0"></text>
</g>
<g>
<title>Parse::merge_memory_edges(MergeMemNode*, int, bool) (1 samples, 0.07%)</title><rect x="1174.1" y="1795.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.1" y="1806.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (14 samples, 0.94%)</title><rect x="1174.9" y="1843.0" width="11.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.9" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (14 samples, 0.94%)</title><rect x="1174.9" y="1827.0" width="11.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.9" y="1838.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1174.9" y="1811.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.9" y="1822.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1174.9" y="1795.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.9" y="1806.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1174.9" y="1779.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.9" y="1790.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1174.9" y="1763.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.9" y="1774.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1174.9" y="1747.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.9" y="1758.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1174.9" y="1731.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.9" y="1742.0"></text>
</g>
<g>
<title>ciTypeFlow::clone_loop_heads(ciTypeFlow::Loop*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1174.9" y="1715.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.9" y="1726.0"></text>
</g>
<g>
<title>ciTypeFlow::clone_loop_head(ciTypeFlow::Loop*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1174.9" y="1699.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.9" y="1710.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1174.9" y="1683.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.9" y="1694.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1174.9" y="1667.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.9" y="1678.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.07%)</title><rect x="1174.9" y="1651.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.9" y="1662.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1174.9" y="1635.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.9" y="1646.0"></text>
</g>
<g>
<title>ciBytecodeStream::has_method_type() (1 samples, 0.07%)</title><rect x="1174.9" y="1619.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.9" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.54%)</title><rect x="1175.7" y="1811.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.7" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.54%)</title><rect x="1175.7" y="1795.0" width="6.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.7" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.54%)</title><rect x="1175.7" y="1779.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.7" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.54%)</title><rect x="1175.7" y="1763.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.7" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.54%)</title><rect x="1175.7" y="1747.0" width="6.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.7" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.54%)</title><rect x="1175.7" y="1731.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.7" y="1742.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1175.7" y="1715.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.7" y="1726.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1175.7" y="1699.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.7" y="1710.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1175.7" y="1683.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.7" y="1694.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1175.7" y="1667.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.7" y="1678.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1175.7" y="1651.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.7" y="1662.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1175.7" y="1635.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.7" y="1646.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1175.7" y="1619.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.7" y="1630.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1175.7" y="1603.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.7" y="1614.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1175.7" y="1587.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.7" y="1598.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.07%)</title><rect x="1175.7" y="1571.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.7" y="1582.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1175.7" y="1555.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.7" y="1566.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1175.7" y="1539.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.7" y="1550.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1175.7" y="1523.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.7" y="1534.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1175.7" y="1507.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.7" y="1518.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.07%)</title><rect x="1175.7" y="1491.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.7" y="1502.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.07%)</title><rect x="1175.7" y="1475.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.7" y="1486.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1175.7" y="1459.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.7" y="1470.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.07%)</title><rect x="1175.7" y="1443.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.7" y="1454.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.07%)</title><rect x="1175.7" y="1427.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.7" y="1438.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.07%)</title><rect x="1175.7" y="1411.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.7" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1176.5" y="1715.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.5" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.13%)</title><rect x="1176.5" y="1699.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.5" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.5" y="1683.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.5" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.5" y="1667.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.5" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.5" y="1651.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.5" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1176.5" y="1635.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.5" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1176.5" y="1619.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.5" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1176.5" y="1603.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.5" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1176.5" y="1587.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.5" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1176.5" y="1571.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.5" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1176.5" y="1555.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.5" y="1566.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1176.5" y="1539.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.5" y="1550.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1176.5" y="1523.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.5" y="1534.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1176.5" y="1507.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.5" y="1518.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.07%)</title><rect x="1176.5" y="1491.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.5" y="1502.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.07%)</title><rect x="1176.5" y="1475.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.5" y="1486.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.07%)</title><rect x="1176.5" y="1459.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.5" y="1470.0"></text>
</g>
<g>
<title>Parse::init_blocks() (1 samples, 0.07%)</title><rect x="1177.3" y="1683.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.3" y="1694.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.27%)</title><rect x="1178.1" y="1715.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.1" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.27%)</title><rect x="1178.1" y="1699.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.1" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.27%)</title><rect x="1178.1" y="1683.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.1" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.27%)</title><rect x="1178.1" y="1667.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.1" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.27%)</title><rect x="1178.1" y="1651.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.1" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.27%)</title><rect x="1178.1" y="1635.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.1" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.27%)</title><rect x="1178.1" y="1619.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.1" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.27%)</title><rect x="1178.1" y="1603.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.1" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.27%)</title><rect x="1178.1" y="1587.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.1" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.27%)</title><rect x="1178.1" y="1571.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.1" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.27%)</title><rect x="1178.1" y="1555.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.1" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.27%)</title><rect x="1178.1" y="1539.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.1" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.27%)</title><rect x="1178.1" y="1523.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.1" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.27%)</title><rect x="1178.1" y="1507.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.1" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.27%)</title><rect x="1178.1" y="1491.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.1" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.27%)</title><rect x="1178.1" y="1475.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.1" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.27%)</title><rect x="1178.1" y="1459.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.1" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.27%)</title><rect x="1178.1" y="1443.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.1" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.27%)</title><rect x="1178.1" y="1427.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.1" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1178.1" y="1411.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.1" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1178.1" y="1395.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.1" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1178.1" y="1379.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.1" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1178.1" y="1363.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.1" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1178.1" y="1347.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.1" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1178.1" y="1331.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.1" y="1342.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1178.1" y="1315.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.1" y="1326.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1178.1" y="1299.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.1" y="1310.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1178.1" y="1283.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.1" y="1294.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1178.1" y="1267.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.1" y="1278.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1178.1" y="1251.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.1" y="1262.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1178.1" y="1235.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.1" y="1246.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1178.1" y="1219.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.1" y="1230.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1178.1" y="1203.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.1" y="1214.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.07%)</title><rect x="1178.1" y="1187.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.1" y="1198.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.07%)</title><rect x="1178.1" y="1171.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.1" y="1182.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1178.1" y="1155.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.1" y="1166.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1178.1" y="1139.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.1" y="1150.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1178.1" y="1123.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.1" y="1134.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1178.1" y="1107.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.1" y="1118.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1178.1" y="1091.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.1" y="1102.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.07%)</title><rect x="1178.1" y="1075.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.1" y="1086.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.07%)</title><rect x="1178.1" y="1059.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.1" y="1070.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.07%)</title><rect x="1178.1" y="1043.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.1" y="1054.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.07%)</title><rect x="1178.1" y="1027.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.1" y="1038.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.07%)</title><rect x="1178.1" y="1011.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.1" y="1022.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1178.9" y="1315.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.9" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.9" y="1299.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.9" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.9" y="1283.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.9" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.9" y="1267.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.9" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.9" y="1251.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.9" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.9" y="1235.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.9" y="1246.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.9" y="1219.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.9" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.9" y="1203.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.9" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.9" y="1187.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.9" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.9" y="1171.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.9" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.9" y="1155.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.9" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.9" y="1139.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.9" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.9" y="1123.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.9" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.9" y="1107.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.9" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.9" y="1091.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.9" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.9" y="1075.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.9" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.9" y="1059.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.9" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.9" y="1043.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.9" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.9" y="1027.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.9" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.9" y="1011.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.9" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1178.9" y="995.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.9" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1178.9" y="979.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.9" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1178.9" y="963.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.9" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1178.9" y="947.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.9" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1178.9" y="931.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.9" y="942.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1178.9" y="915.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.9" y="926.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_load_store(BasicType, LibraryCallKit::LoadStoreKind) (1 samples, 0.07%)</title><rect x="1178.9" y="899.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.9" y="910.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.07%)</title><rect x="1178.9" y="883.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.9" y="894.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.07%)</title><rect x="1178.9" y="867.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.9" y="878.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.7" y="1299.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.7" y="1310.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.7" y="1283.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.7" y="1294.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.7" y="1267.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.7" y="1278.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.7" y="1251.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.7" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.7" y="1235.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.7" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.7" y="1219.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.7" y="1230.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.7" y="1203.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.7" y="1214.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.7" y="1187.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.7" y="1198.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.7" y="1171.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.7" y="1182.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.7" y="1155.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.7" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.7" y="1139.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.7" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.7" y="1123.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.7" y="1134.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.7" y="1107.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.7" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.7" y="1091.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.7" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.7" y="1075.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.7" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.7" y="1059.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.7" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.7" y="1043.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.7" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.7" y="1027.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.7" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.7" y="1011.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.7" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.7" y="995.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.7" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.7" y="979.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.7" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.7" y="963.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.7" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.7" y="947.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.7" y="931.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.7" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.7" y="915.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.7" y="926.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.07%)</title><rect x="1179.7" y="899.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.7" y="910.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.07%)</title><rect x="1179.7" y="883.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.7" y="894.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1179.7" y="867.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.7" y="878.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.07%)</title><rect x="1179.7" y="851.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.7" y="862.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.5" y="1411.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.5" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.5" y="1395.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.5" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.5" y="1379.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.5" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.5" y="1363.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.5" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.5" y="1347.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.5" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.5" y="1331.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.5" y="1342.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1180.5" y="1315.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.5" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.5" y="1299.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.5" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.5" y="1283.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.5" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.5" y="1267.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.5" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.5" y="1251.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.5" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.5" y="1235.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.5" y="1246.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1180.5" y="1219.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.5" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.5" y="1203.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.5" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.5" y="1187.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.5" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.5" y="1171.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.5" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.5" y="1155.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.5" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.5" y="1139.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.5" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1180.5" y="1123.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.5" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.5" y="1107.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.5" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.5" y="1091.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.5" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.5" y="1075.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.5" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.5" y="1059.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.5" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.5" y="1043.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.5" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1180.5" y="1027.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.5" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.5" y="1011.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.5" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.5" y="995.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.5" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.5" y="979.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.5" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.5" y="963.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.5" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.5" y="947.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1180.5" y="931.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.5" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.5" y="915.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.5" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.5" y="899.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.5" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.5" y="883.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.5" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.5" y="867.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.5" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.5" y="851.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.5" y="862.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.07%)</title><rect x="1180.5" y="835.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.5" y="846.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.07%)</title><rect x="1180.5" y="819.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.5" y="830.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="1180.5" y="803.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.5" y="814.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1180.5" y="787.0" width="0.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1183.5" y="798.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.07%)</title><rect x="1181.3" y="1715.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.3" y="1726.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1181.3" y="1699.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.3" y="1710.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.07%)</title><rect x="1181.3" y="1683.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.3" y="1694.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1181.3" y="1667.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.3" y="1678.0"></text>
</g>
<g>
<title>LinkResolver::check_klass_accessability(KlassHandle, KlassHandle, Thread*) (1 samples, 0.07%)</title><rect x="1181.3" y="1651.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.3" y="1662.0"></text>
</g>
<g>
<title>Reflection::verify_class_access(Klass*, Klass*, bool) (1 samples, 0.07%)</title><rect x="1181.3" y="1635.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.3" y="1646.0"></text>
</g>
<g>
<title>UTF8::strrchr(signed char const*, int, signed char) (1 samples, 0.07%)</title><rect x="1181.3" y="1619.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.3" y="1630.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.34%)</title><rect x="1182.1" y="1811.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.1" y="1822.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.27%)</title><rect x="1182.1" y="1795.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.1" y="1806.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.27%)</title><rect x="1182.1" y="1779.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.1" y="1790.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.27%)</title><rect x="1182.1" y="1763.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.1" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.27%)</title><rect x="1182.1" y="1747.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.1" y="1758.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.27%)</title><rect x="1182.1" y="1731.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.1" y="1742.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.27%)</title><rect x="1182.1" y="1715.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.1" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.27%)</title><rect x="1182.1" y="1699.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.1" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.27%)</title><rect x="1182.1" y="1683.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.1" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.27%)</title><rect x="1182.1" y="1667.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.1" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.27%)</title><rect x="1182.1" y="1651.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.1" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1182.8" y="1635.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.8" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1182.8" y="1619.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.8" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.20%)</title><rect x="1182.8" y="1603.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.8" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.20%)</title><rect x="1182.8" y="1587.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.8" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.20%)</title><rect x="1182.8" y="1571.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.8" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.20%)</title><rect x="1182.8" y="1555.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.8" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.20%)</title><rect x="1182.8" y="1539.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.8" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.20%)</title><rect x="1182.8" y="1523.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.8" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.13%)</title><rect x="1182.8" y="1507.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.8" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.13%)</title><rect x="1182.8" y="1491.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.8" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.13%)</title><rect x="1182.8" y="1475.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.8" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.13%)</title><rect x="1182.8" y="1459.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.8" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.13%)</title><rect x="1182.8" y="1443.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.8" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.13%)</title><rect x="1182.8" y="1427.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.8" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1182.8" y="1411.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.8" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1182.8" y="1395.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.8" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1182.8" y="1379.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.8" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1182.8" y="1363.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.8" y="1374.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.07%)</title><rect x="1182.8" y="1347.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.8" y="1358.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.07%)</title><rect x="1182.8" y="1331.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.8" y="1342.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.07%)</title><rect x="1182.8" y="1315.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.8" y="1326.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.07%)</title><rect x="1182.8" y="1299.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.8" y="1310.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.07%)</title><rect x="1182.8" y="1283.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.8" y="1294.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.07%)</title><rect x="1182.8" y="1267.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.8" y="1278.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.6" y="1411.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.6" y="1422.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.6" y="1395.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.6" y="1406.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.6" y="1379.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.6" y="1390.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.6" y="1363.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.6" y="1374.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.6" y="1347.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.6" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.6" y="1331.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.6" y="1342.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.6" y="1315.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.6" y="1326.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1183.6" y="1299.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.6" y="1310.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.6" y="1283.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.6" y="1294.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.6" y="1267.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.6" y="1278.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.6" y="1251.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.6" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.6" y="1235.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.6" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.6" y="1219.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.6" y="1230.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1183.6" y="1203.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.6" y="1214.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.6" y="1187.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.6" y="1198.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1183.6" y="1171.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.6" y="1182.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1183.6" y="1155.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.6" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1183.6" y="1139.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.6" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1183.6" y="1123.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.6" y="1134.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.07%)</title><rect x="1183.6" y="1107.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.6" y="1118.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.07%)</title><rect x="1183.6" y="1091.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.6" y="1102.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.07%)</title><rect x="1183.6" y="1075.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.6" y="1086.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1183.6" y="1059.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.6" y="1070.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1183.6" y="1043.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.6" y="1054.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1183.6" y="1027.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.6" y="1038.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.4" y="1507.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.4" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.4" y="1491.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.4" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.4" y="1475.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.4" y="1486.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.4" y="1459.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.4" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.4" y="1443.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.4" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.4" y="1427.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.4" y="1438.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1184.4" y="1411.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.4" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.4" y="1395.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.4" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.4" y="1379.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.4" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.4" y="1363.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.4" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.4" y="1347.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.4" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.4" y="1331.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.4" y="1342.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1184.4" y="1315.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.4" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.4" y="1299.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.4" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.4" y="1283.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.4" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.4" y="1267.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.4" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.4" y="1251.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.4" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.4" y="1235.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.4" y="1246.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1184.4" y="1219.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.4" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.4" y="1203.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.4" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.4" y="1187.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.4" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.4" y="1171.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.4" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.4" y="1155.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.4" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.4" y="1139.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.4" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1184.4" y="1123.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.4" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1184.4" y="1107.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.4" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1184.4" y="1091.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.4" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1184.4" y="1075.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.4" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1184.4" y="1059.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.4" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1184.4" y="1043.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.4" y="1054.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1184.4" y="1027.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.4" y="1038.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1184.4" y="1011.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.4" y="1022.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.07%)</title><rect x="1184.4" y="995.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.4" y="1006.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1184.4" y="979.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.4" y="990.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1184.4" y="963.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.4" y="974.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.07%)</title><rect x="1184.4" y="947.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.4" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1184.4" y="931.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.4" y="942.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1184.4" y="915.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.4" y="926.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1184.4" y="899.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.4" y="910.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1185.2" y="1795.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.2" y="1806.0"></text>
</g>
<g>
<title>UncommonTrapCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1185.2" y="1779.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.2" y="1790.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1185.2" y="1763.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.2" y="1774.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.07%)</title><rect x="1185.2" y="1747.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.2" y="1758.0"></text>
</g>
<g>
<title>Type_Array::grow(unsigned int) (1 samples, 0.07%)</title><rect x="1185.2" y="1731.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.2" y="1742.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1185.2" y="1715.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.2" y="1726.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.07%)</title><rect x="1186.0" y="1939.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.0" y="1950.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.07%)</title><rect x="1186.0" y="1923.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.0" y="1934.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.07%)</title><rect x="1186.0" y="1907.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.0" y="1918.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.07%)</title><rect x="1186.0" y="1891.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.0" y="1902.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.07%)</title><rect x="1186.0" y="1875.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.0" y="1886.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.07%)</title><rect x="1186.0" y="1859.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.0" y="1870.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.07%)</title><rect x="1186.0" y="1843.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.0" y="1854.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.07%)</title><rect x="1186.0" y="1827.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.0" y="1838.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.07%)</title><rect x="1186.0" y="1811.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.0" y="1822.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.07%)</title><rect x="1186.0" y="1795.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.0" y="1806.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1186.0" y="1779.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.0" y="1790.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.07%)</title><rect x="1186.0" y="1763.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.0" y="1774.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.07%)</title><rect x="1186.0" y="1747.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.0" y="1758.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.07%)</title><rect x="1186.0" y="1731.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.0" y="1742.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.07%)</title><rect x="1186.0" y="1715.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.0" y="1726.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1186.0" y="1699.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.0" y="1710.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.07%)</title><rect x="1186.0" y="1683.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.0" y="1694.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.07%)</title><rect x="1186.0" y="1667.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.0" y="1678.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.07%)</title><rect x="1186.0" y="1651.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.0" y="1662.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.07%)</title><rect x="1186.0" y="1635.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.0" y="1646.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.07%)</title><rect x="1186.0" y="1619.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.0" y="1630.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.07%)</title><rect x="1186.0" y="1603.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.0" y="1614.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1186.0" y="1587.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.0" y="1598.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1186.0" y="1571.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.0" y="1582.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.07%)</title><rect x="1186.0" y="1555.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.0" y="1566.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.07%)</title><rect x="1186.0" y="1539.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.0" y="1550.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.07%)</title><rect x="1186.0" y="1523.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.0" y="1534.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.07%)</title><rect x="1186.8" y="1955.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.8" y="1966.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.07%)</title><rect x="1186.8" y="1939.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.8" y="1950.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.07%)</title><rect x="1186.8" y="1923.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.8" y="1934.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.07%)</title><rect x="1186.8" y="1907.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.8" y="1918.0"></text>
</g>
<g>
<title>RelocIterator::advance_over_prefix() (1 samples, 0.07%)</title><rect x="1186.8" y="1891.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.8" y="1902.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.07%)</title><rect x="1187.6" y="1971.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.6" y="1982.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.07%)</title><rect x="1187.6" y="1955.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.6" y="1966.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.07%)</title><rect x="1187.6" y="1939.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.6" y="1950.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.07%)</title><rect x="1187.6" y="1923.0" width="0.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1190.6" y="1934.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.07%)</title><rect x="1187.6" y="1907.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.6" y="1918.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="1187.6" y="1891.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.6" y="1902.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.13%)</title><rect x="1188.4" y="2003.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.4" y="2014.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.13%)</title><rect x="1188.4" y="1987.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.4" y="1998.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.07%)</title><rect x="1188.4" y="1971.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.4" y="1982.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.07%)</title><rect x="1189.2" y="1971.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.2" y="1982.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.07%)</title><rect x="1189.2" y="1955.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1192.2" y="1966.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.07%)</title><rect x="1189.2" y="1939.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.2" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.07%)</title><rect x="1189.2" y="1923.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.2" y="1934.0"></text>
</g>
<g>
<title>GCHeapLog::log_heap(bool) (1 samples, 0.07%)</title><rect x="1189.2" y="1907.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1192.2" y="1918.0"></text>
</g>
<g>
<title>outputStream::print_cr(char const*, ...) (1 samples, 0.07%)</title><rect x="1189.2" y="1891.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1192.2" y="1902.0"></text>
</g>
<g>
<title>__vsnprintf (1 samples, 0.07%)</title><rect x="1189.2" y="1875.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1192.2" y="1886.0"></text>
</g>
<g>
<title>vfprintf (1 samples, 0.07%)</title><rect x="1189.2" y="1859.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1192.2" y="1870.0"></text>
</g>
</g>
</svg>
