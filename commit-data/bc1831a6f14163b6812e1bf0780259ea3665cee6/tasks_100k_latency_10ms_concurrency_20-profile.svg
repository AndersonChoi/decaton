<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (309 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.32%)</title><rect x="10.0" y="883.0" width="3.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.32%)</title><rect x="10.0" y="867.0" width="3.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (26 samples, 8.41%)</title><rect x="13.8" y="883.0" width="99.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.8" y="894.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (25 samples, 8.09%)</title><rect x="17.6" y="867.0" width="95.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.6" y="878.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (2 samples, 0.65%)</title><rect x="17.6" y="851.0" width="7.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="20.6" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.65%)</title><rect x="17.6" y="835.0" width="7.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.6" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1701397689.accept (2 samples, 0.65%)</title><rect x="17.6" y="819.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.6" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (2 samples, 0.65%)</title><rect x="17.6" y="803.0" width="7.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.6" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.65%)</title><rect x="17.6" y="787.0" width="7.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="20.6" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.65%)</title><rect x="17.6" y="771.0" width="7.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.6" y="782.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (6 samples, 1.94%)</title><rect x="25.3" y="851.0" width="22.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.3" y="862.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1194234896.accept (6 samples, 1.94%)</title><rect x="25.3" y="835.0" width="22.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.3" y="846.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$72 (6 samples, 1.94%)</title><rect x="25.3" y="819.0" width="22.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.3" y="830.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.32%)</title><rect x="25.3" y="803.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="28.3" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.32%)</title><rect x="25.3" y="787.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="28.3" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.32%)</title><rect x="25.3" y="771.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.3" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (5 samples, 1.62%)</title><rect x="29.1" y="803.0" width="19.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="32.1" y="814.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.32%)</title><rect x="29.1" y="787.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.1" y="798.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.29%)</title><rect x="32.9" y="787.0" width="15.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="35.9" y="798.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.32%)</title><rect x="44.4" y="771.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="47.4" y="782.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.32%)</title><rect x="44.4" y="755.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="47.4" y="766.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.32%)</title><rect x="44.4" y="739.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="47.4" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.32%)</title><rect x="44.4" y="723.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="47.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (17 samples, 5.50%)</title><rect x="48.2" y="851.0" width="64.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="51.2" y="862.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (17 samples, 5.50%)</title><rect x="48.2" y="835.0" width="64.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="51.2" y="846.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (13 samples, 4.21%)</title><rect x="48.2" y="819.0" width="49.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="51.2" y="830.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (8 samples, 2.59%)</title><rect x="48.2" y="803.0" width="30.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="51.2" y="814.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (8 samples, 2.59%)</title><rect x="48.2" y="787.0" width="30.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="51.2" y="798.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.maybeThrowAnyException (1 samples, 0.32%)</title><rect x="48.2" y="771.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="51.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.clearErrorsAndMaybeThrowException (1 samples, 0.32%)</title><rect x="48.2" y="755.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.2" y="766.0"></text>
</g>
<g>
<title>java/util/Optional.orElseGet (1 samples, 0.32%)</title><rect x="48.2" y="739.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="51.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$85/1458208694.get (1 samples, 0.32%)</title><rect x="48.2" y="723.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="51.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.recoverableException (1 samples, 0.32%)</title><rect x="48.2" y="707.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="51.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (5 samples, 1.62%)</title><rect x="52.0" y="771.0" width="19.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="55.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.32%)</title><rect x="52.0" y="755.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="55.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 1.29%)</title><rect x="55.8" y="755.0" width="15.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="58.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.32%)</title><rect x="55.8" y="739.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="58.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.32%)</title><rect x="55.8" y="723.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="58.8" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.32%)</title><rect x="59.6" y="739.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="62.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.32%)</title><rect x="59.6" y="723.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="62.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToStagedReceives (1 samples, 0.32%)</title><rect x="59.6" y="707.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="62.6" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.32%)</title><rect x="59.6" y="691.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="62.6" y="702.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.32%)</title><rect x="59.6" y="675.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="62.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.32%)</title><rect x="63.5" y="739.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="66.5" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.32%)</title><rect x="63.5" y="723.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="66.5" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.32%)</title><rect x="63.5" y="707.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="66.5" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.32%)</title><rect x="63.5" y="691.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="66.5" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (1 samples, 0.32%)</title><rect x="63.5" y="675.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="66.5" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.32%)</title><rect x="63.5" y="659.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="66.5" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.32%)</title><rect x="63.5" y="643.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="66.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.nanoseconds (1 samples, 0.32%)</title><rect x="67.3" y="739.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="70.3" y="750.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.32%)</title><rect x="67.3" y="723.0" width="3.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="70.3" y="734.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.32%)</title><rect x="67.3" y="707.0" width="3.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="70.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.32%)</title><rect x="71.1" y="771.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="74.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.32%)</title><rect x="71.1" y="755.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="74.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.32%)</title><rect x="71.1" y="739.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="74.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CountDownLatch.countDown (1 samples, 0.32%)</title><rect x="71.1" y="723.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="74.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (1 samples, 0.32%)</title><rect x="71.1" y="707.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="74.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doReleaseShared (1 samples, 0.32%)</title><rect x="71.1" y="691.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="74.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeThrowInterruptException (1 samples, 0.32%)</title><rect x="74.9" y="771.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="77.9" y="782.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.32%)</title><rect x="74.9" y="755.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="77.9" y="766.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.32%)</title><rect x="74.9" y="739.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="77.9" y="750.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.32%)</title><rect x="74.9" y="723.0" width="3.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="77.9" y="734.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.32%)</title><rect x="74.9" y="707.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="77.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 1.62%)</title><rect x="78.7" y="803.0" width="19.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="81.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 1.62%)</title><rect x="78.7" y="787.0" width="19.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="81.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 1.29%)</title><rect x="78.7" y="771.0" width="15.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="81.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 1.29%)</title><rect x="78.7" y="755.0" width="15.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="81.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.65%)</title><rect x="78.7" y="739.0" width="7.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="81.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (2 samples, 0.65%)</title><rect x="78.7" y="723.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="81.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (2 samples, 0.65%)</title><rect x="78.7" y="707.0" width="7.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="81.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (2 samples, 0.65%)</title><rect x="78.7" y="691.0" width="7.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="81.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (2 samples, 0.65%)</title><rect x="78.7" y="675.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="81.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (2 samples, 0.65%)</title><rect x="78.7" y="659.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="81.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (2 samples, 0.65%)</title><rect x="78.7" y="643.0" width="7.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="81.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (2 samples, 0.65%)</title><rect x="78.7" y="627.0" width="7.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="81.7" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.65%)</title><rect x="86.4" y="739.0" width="7.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="89.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.65%)</title><rect x="86.4" y="723.0" width="7.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="89.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (2 samples, 0.65%)</title><rect x="86.4" y="707.0" width="7.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="89.4" y="718.0"></text>
</g>
<g>
<title>java/util/Optional.of (2 samples, 0.65%)</title><rect x="86.4" y="691.0" width="7.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="89.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.32%)</title><rect x="94.0" y="771.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="97.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.32%)</title><rect x="94.0" y="755.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="97.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.32%)</title><rect x="94.0" y="739.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="97.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.32%)</title><rect x="94.0" y="723.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="97.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.32%)</title><rect x="94.0" y="707.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="97.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.32%)</title><rect x="94.0" y="691.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="97.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.65%)</title><rect x="97.8" y="819.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="100.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.32%)</title><rect x="97.8" y="803.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="100.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.32%)</title><rect x="97.8" y="787.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="100.8" y="798.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.32%)</title><rect x="97.8" y="771.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="100.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$225/30093600.accept (1 samples, 0.32%)</title><rect x="97.8" y="755.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="100.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.32%)</title><rect x="97.8" y="739.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="100.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.32%)</title><rect x="97.8" y="723.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="100.8" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.32%)</title><rect x="101.7" y="803.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="104.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.32%)</title><rect x="101.7" y="787.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="104.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.32%)</title><rect x="101.7" y="771.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="104.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.32%)</title><rect x="105.5" y="819.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="108.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.32%)</title><rect x="105.5" y="803.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="108.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.32%)</title><rect x="109.3" y="819.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="112.3" y="830.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.32%)</title><rect x="109.3" y="803.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="112.3" y="814.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.32%)</title><rect x="109.3" y="787.0" width="3.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="112.3" y="798.0"></text>
</g>
<g>
<title>java/lang/Thread.run (243 samples, 78.64%)</title><rect x="113.1" y="883.0" width="928.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="116.1" y="894.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (243 samples, 78.64%)</title><rect x="113.1" y="867.0" width="928.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="116.1" y="878.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (243 samples, 78.64%)</title><rect x="113.1" y="851.0" width="928.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="116.1" y="862.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/1000935494.run (235 samples, 76.05%)</title><rect x="113.1" y="835.0" width="897.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="116.1" y="846.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/1000935494.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (235 samples, 76.05%)</title><rect x="113.1" y="819.0" width="897.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="116.1" y="830.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (235 samples, 76.05%)</title><rect x="113.1" y="803.0" width="897.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="116.1" y="814.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (229 samples, 74.11%)</title><rect x="113.1" y="787.0" width="874.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="116.1" y="798.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (43 samples, 13.92%)</title><rect x="132.2" y="771.0" width="164.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="135.2" y="782.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (43 samples, 13.92%)</title><rect x="132.2" y="755.0" width="164.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="135.2" y="766.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (43 samples, 13.92%)</title><rect x="132.2" y="739.0" width="164.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="135.2" y="750.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (43 samples, 13.92%)</title><rect x="132.2" y="723.0" width="164.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="135.2" y="734.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (43 samples, 13.92%)</title><rect x="132.2" y="707.0" width="164.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="135.2" y="718.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (43 samples, 13.92%)</title><rect x="132.2" y="691.0" width="164.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="135.2" y="702.0">com/fasterxml/jackson..</text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.32%)</title><rect x="132.2" y="675.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="135.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (17 samples, 5.50%)</title><rect x="136.0" y="675.0" width="64.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="139.0" y="686.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (5 samples, 1.62%)</title><rect x="136.0" y="659.0" width="19.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="139.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (5 samples, 1.62%)</title><rect x="136.0" y="643.0" width="19.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="139.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (5 samples, 1.62%)</title><rect x="136.0" y="627.0" width="19.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="139.0" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 1.62%)</title><rect x="136.0" y="611.0" width="19.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="139.0" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (3 samples, 0.97%)</title><rect x="143.7" y="595.0" width="11.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="146.7" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (12 samples, 3.88%)</title><rect x="155.1" y="659.0" width="45.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="158.1" y="670.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (11 samples, 3.56%)</title><rect x="158.9" y="643.0" width="42.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="161.9" y="654.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 0.97%)</title><rect x="158.9" y="627.0" width="11.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="161.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (3 samples, 0.97%)</title><rect x="158.9" y="611.0" width="11.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="161.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.65%)</title><rect x="170.4" y="627.0" width="7.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="173.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.65%)</title><rect x="170.4" y="611.0" width="7.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="173.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.32%)</title><rect x="174.2" y="595.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="177.2" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (6 samples, 1.94%)</title><rect x="178.0" y="627.0" width="22.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="181.0" y="638.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.32%)</title><rect x="178.0" y="611.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="181.0" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.32%)</title><rect x="178.0" y="595.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="181.0" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.32%)</title><rect x="178.0" y="579.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="181.0" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.32%)</title><rect x="178.0" y="563.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="181.0" y="574.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.32%)</title><rect x="178.0" y="547.0" width="3.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="181.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (2 samples, 0.65%)</title><rect x="181.8" y="611.0" width="7.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="184.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (3 samples, 0.97%)</title><rect x="189.5" y="611.0" width="11.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="192.5" y="622.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.65%)</title><rect x="193.3" y="595.0" width="7.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="196.3" y="606.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (2 samples, 0.65%)</title><rect x="193.3" y="579.0" width="7.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="196.3" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (23 samples, 7.44%)</title><rect x="200.9" y="675.0" width="87.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="203.9" y="686.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.32%)</title><rect x="200.9" y="659.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="203.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (1 samples, 0.32%)</title><rect x="200.9" y="643.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="203.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (1 samples, 0.32%)</title><rect x="200.9" y="627.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="203.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.32%)</title><rect x="200.9" y="611.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="203.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.resetWithEmpty (1 samples, 0.32%)</title><rect x="200.9" y="595.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="203.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.65%)</title><rect x="204.8" y="659.0" width="7.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="207.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.65%)</title><rect x="204.8" y="643.0" width="7.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="207.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.32%)</title><rect x="212.4" y="659.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="215.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 1.29%)</title><rect x="216.2" y="659.0" width="15.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="219.2" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 1.29%)</title><rect x="216.2" y="643.0" width="15.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="219.2" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.32%)</title><rect x="216.2" y="627.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="219.2" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (3 samples, 0.97%)</title><rect x="220.0" y="627.0" width="11.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (3 samples, 0.97%)</title><rect x="220.0" y="611.0" width="11.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="223.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.32%)</title><rect x="227.7" y="595.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="230.7" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (15 samples, 4.85%)</title><rect x="231.5" y="659.0" width="57.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="234.5" y="670.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.29%)</title><rect x="231.5" y="643.0" width="15.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="234.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.97%)</title><rect x="235.3" y="627.0" width="11.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="238.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (11 samples, 3.56%)</title><rect x="246.8" y="643.0" width="42.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="249.8" y="654.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (11 samples, 3.56%)</title><rect x="246.8" y="627.0" width="42.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="249.8" y="638.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (11 samples, 3.56%)</title><rect x="246.8" y="611.0" width="42.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="249.8" y="622.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.65%)</title><rect x="254.4" y="595.0" width="7.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="257.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.65%)</title><rect x="254.4" y="579.0" width="7.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.4" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.65%)</title><rect x="254.4" y="563.0" width="7.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="257.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.65%)</title><rect x="254.4" y="547.0" width="7.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="257.4" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.65%)</title><rect x="254.4" y="531.0" width="7.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="257.4" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.32%)</title><rect x="258.2" y="515.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="261.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.32%)</title><rect x="258.2" y="499.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="261.2" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (1 samples, 0.32%)</title><rect x="258.2" y="483.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="261.2" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.32%)</title><rect x="262.0" y="595.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="265.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.32%)</title><rect x="262.0" y="579.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="265.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.32%)</title><rect x="262.0" y="563.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="265.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.32%)</title><rect x="262.0" y="547.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="265.0" y="558.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.32%)</title><rect x="262.0" y="531.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="265.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (3 samples, 0.97%)</title><rect x="265.9" y="595.0" width="11.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="268.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (3 samples, 0.97%)</title><rect x="265.9" y="579.0" width="11.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="268.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (3 samples, 0.97%)</title><rect x="265.9" y="563.0" width="11.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="268.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (3 samples, 0.97%)</title><rect x="265.9" y="547.0" width="11.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.9" y="558.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (3 samples, 0.97%)</title><rect x="265.9" y="531.0" width="11.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="268.9" y="542.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (2 samples, 0.65%)</title><rect x="269.7" y="515.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="272.7" y="526.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (2 samples, 0.65%)</title><rect x="269.7" y="499.0" width="7.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="272.7" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 0.97%)</title><rect x="277.3" y="595.0" width="11.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="280.3" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.97%)</title><rect x="277.3" y="579.0" width="11.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="280.3" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.97%)</title><rect x="277.3" y="563.0" width="11.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="280.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.65%)</title><rect x="288.8" y="675.0" width="7.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="291.8" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.65%)</title><rect x="288.8" y="659.0" width="7.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="291.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.65%)</title><rect x="288.8" y="643.0" width="7.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="291.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.65%)</title><rect x="288.8" y="627.0" width="7.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="291.8" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.65%)</title><rect x="288.8" y="611.0" width="7.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="291.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.32%)</title><rect x="292.6" y="595.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="295.6" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (166 samples, 53.72%)</title><rect x="296.4" y="771.0" width="633.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="299.4" y="782.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (32 samples, 10.36%)</title><rect x="296.4" y="755.0" width="122.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="299.4" y="766.0">com/linecorp/de..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (30 samples, 9.71%)</title><rect x="304.0" y="739.0" width="114.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="307.0" y="750.0">org/slf4j/MDC...</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (24 samples, 7.77%)</title><rect x="327.0" y="723.0" width="91.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="330.0" y="734.0">ch/qos/logb..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.65%)</title><rect x="342.2" y="707.0" width="7.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="345.2" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.65%)</title><rect x="342.2" y="691.0" width="7.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="345.2" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.65%)</title><rect x="342.2" y="675.0" width="7.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="345.2" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.65%)</title><rect x="342.2" y="659.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="345.2" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (18 samples, 5.83%)</title><rect x="349.9" y="707.0" width="68.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="352.9" y="718.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.remove (7 samples, 2.27%)</title><rect x="391.9" y="691.0" width="26.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="394.9" y="702.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 2.27%)</title><rect x="391.9" y="675.0" width="26.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="394.9" y="686.0">j..</text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.32%)</title><rect x="414.8" y="659.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="417.8" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.97%)</title><rect x="418.6" y="755.0" width="11.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="421.6" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.97%)</title><rect x="418.6" y="739.0" width="11.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="421.6" y="750.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.97%)</title><rect x="418.6" y="723.0" width="11.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="421.6" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (28 samples, 9.06%)</title><rect x="430.1" y="755.0" width="106.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="433.1" y="766.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (28 samples, 9.06%)</title><rect x="430.1" y="739.0" width="106.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="433.1" y="750.0">com/linecorp/..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.97%)</title><rect x="433.9" y="723.0" width="11.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="436.9" y="734.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.65%)</title><rect x="437.7" y="707.0" width="7.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="440.7" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (9 samples, 2.91%)</title><rect x="445.3" y="723.0" width="34.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="448.3" y="734.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (8 samples, 2.59%)</title><rect x="449.2" y="707.0" width="30.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="452.2" y="718.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 1.94%)</title><rect x="456.8" y="691.0" width="22.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="459.8" y="702.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.65%)</title><rect x="468.3" y="675.0" width="7.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="471.3" y="686.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.65%)</title><rect x="468.3" y="659.0" width="7.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="471.3" y="670.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.65%)</title><rect x="468.3" y="643.0" width="7.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="471.3" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.65%)</title><rect x="468.3" y="627.0" width="7.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="471.3" y="638.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.65%)</title><rect x="468.3" y="611.0" width="7.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="471.3" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.32%)</title><rect x="472.1" y="595.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="475.1" y="606.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.32%)</title><rect x="475.9" y="675.0" width="3.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="478.9" y="686.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.32%)</title><rect x="479.7" y="723.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="482.7" y="734.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.32%)</title><rect x="479.7" y="707.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="482.7" y="718.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.32%)</title><rect x="479.7" y="691.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="482.7" y="702.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (14 samples, 4.53%)</title><rect x="483.5" y="723.0" width="53.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="486.5" y="734.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (13 samples, 4.21%)</title><rect x="487.3" y="707.0" width="49.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="490.3" y="718.0">ch/qo..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (13 samples, 4.21%)</title><rect x="487.3" y="691.0" width="49.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="490.3" y="702.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (11 samples, 3.56%)</title><rect x="495.0" y="675.0" width="42.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="498.0" y="686.0">java..</text>
</g>
<g>
<title>java/util/HashMap.putVal (7 samples, 2.27%)</title><rect x="510.3" y="659.0" width="26.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="513.3" y="670.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 0.97%)</title><rect x="514.1" y="643.0" width="11.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="517.1" y="654.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.32%)</title><rect x="521.7" y="627.0" width="3.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="524.7" y="638.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.97%)</title><rect x="525.5" y="643.0" width="11.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="528.5" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (81 samples, 26.21%)</title><rect x="537.0" y="755.0" width="309.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="540.0" y="766.0">com/linecorp/decaton/processor/runtime/Pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (81 samples, 26.21%)</title><rect x="537.0" y="739.0" width="309.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="540.0" y="750.0">com/linecorp/decaton/processor/runtime/Pro..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/460718720.process (69 samples, 22.33%)</title><rect x="556.1" y="723.0" width="263.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="559.1" y="734.0">com/linecorp/decaton/benchmark/Deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (69 samples, 22.33%)</title><rect x="556.1" y="707.0" width="263.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="559.1" y="718.0">com/linecorp/decaton/benchmark/Deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (69 samples, 22.33%)</title><rect x="556.1" y="691.0" width="263.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="559.1" y="702.0">com/linecorp/decaton/benchmark/Reco..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.32%)</title><rect x="556.1" y="675.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="559.1" y="686.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.32%)</title><rect x="556.1" y="659.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="559.1" y="670.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.32%)</title><rect x="556.1" y="643.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="559.1" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.32%)</title><rect x="556.1" y="627.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="559.1" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (66 samples, 21.36%)</title><rect x="559.9" y="675.0" width="252.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="562.9" y="686.0">com/linecorp/decaton/benchmark/Rec..</text>
</g>
<g>
<title>java/lang/Thread.sleep (66 samples, 21.36%)</title><rect x="559.9" y="659.0" width="252.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="562.9" y="670.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (56 samples, 18.12%)</title><rect x="594.3" y="643.0" width="213.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="597.3" y="654.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 1.29%)</title><rect x="632.5" y="627.0" width="15.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="635.5" y="638.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.32%)</title><rect x="647.7" y="627.0" width="3.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="650.7" y="638.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.32%)</title><rect x="647.7" y="611.0" width="3.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="650.7" y="622.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.32%)</title><rect x="651.6" y="627.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="654.6" y="638.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (40 samples, 12.94%)</title><rect x="655.4" y="627.0" width="152.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="658.4" y="638.0">os::sleep(Thread*, ..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.65%)</title><rect x="674.5" y="611.0" width="7.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="677.5" y="622.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.65%)</title><rect x="674.5" y="595.0" width="7.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="677.5" y="606.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.97%)</title><rect x="682.1" y="611.0" width="11.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="685.1" y="622.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (22 samples, 7.12%)</title><rect x="693.6" y="611.0" width="84.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="696.6" y="622.0">__pthread_..</text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.32%)</title><rect x="777.6" y="611.0" width="3.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="780.6" y="622.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (6 samples, 1.94%)</title><rect x="781.4" y="611.0" width="22.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="784.4" y="622.0">o..</text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.32%)</title><rect x="804.3" y="611.0" width="3.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="807.3" y="622.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (1 samples, 0.32%)</title><rect x="808.1" y="643.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="811.1" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.65%)</title><rect x="811.9" y="675.0" width="7.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="814.9" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.32%)</title><rect x="815.8" y="659.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="818.8" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.32%)</title><rect x="815.8" y="643.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="818.8" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.32%)</title><rect x="819.6" y="723.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="822.6" y="734.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.32%)</title><rect x="819.6" y="707.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="822.6" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.97%)</title><rect x="823.4" y="723.0" width="11.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="826.4" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.32%)</title><rect x="831.0" y="707.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="834.0" y="718.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.32%)</title><rect x="831.0" y="691.0" width="3.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="834.0" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.97%)</title><rect x="834.9" y="723.0" width="11.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="837.9" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.32%)</title><rect x="838.7" y="707.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="841.7" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.32%)</title><rect x="838.7" y="691.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="841.7" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.32%)</title><rect x="838.7" y="675.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="841.7" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.32%)</title><rect x="838.7" y="659.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="841.7" y="670.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.32%)</title><rect x="838.7" y="643.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="841.7" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.32%)</title><rect x="838.7" y="627.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="841.7" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.32%)</title><rect x="842.5" y="707.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="845.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (22 samples, 7.12%)</title><rect x="846.3" y="755.0" width="84.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="849.3" y="766.0">java/util/..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.97%)</title><rect x="896.0" y="739.0" width="11.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="899.0" y="750.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.65%)</title><rect x="899.8" y="723.0" width="7.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="902.8" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.97%)</title><rect x="907.4" y="739.0" width="11.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="910.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.97%)</title><rect x="907.4" y="723.0" width="11.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="910.4" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$284/1415964862.accept (1 samples, 0.32%)</title><rect x="907.4" y="707.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="910.4" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$44 (1 samples, 0.32%)</title><rect x="907.4" y="691.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="910.4" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.32%)</title><rect x="907.4" y="675.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="910.4" y="686.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.32%)</title><rect x="907.4" y="659.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="910.4" y="670.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.32%)</title><rect x="907.4" y="643.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="910.4" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.32%)</title><rect x="907.4" y="627.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="910.4" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$285/733062259.accept (2 samples, 0.65%)</title><rect x="911.2" y="707.0" width="7.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="914.2" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$43 (2 samples, 0.65%)</title><rect x="911.2" y="691.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="914.2" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/1080389350.complete (2 samples, 0.65%)</title><rect x="911.2" y="675.0" width="7.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="914.2" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$46 (2 samples, 0.65%)</title><rect x="911.2" y="659.0" width="7.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="914.2" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1590733096.complete (2 samples, 0.65%)</title><rect x="911.2" y="643.0" width="7.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="914.2" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (2 samples, 0.65%)</title><rect x="911.2" y="627.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="914.2" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (2 samples, 0.65%)</title><rect x="911.2" y="611.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="914.2" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 0.65%)</title><rect x="911.2" y="595.0" width="7.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="914.2" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 0.65%)</title><rect x="911.2" y="579.0" width="7.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="914.2" y="590.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.32%)</title><rect x="915.0" y="563.0" width="3.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="918.0" y="574.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (3 samples, 0.97%)</title><rect x="918.9" y="739.0" width="11.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="921.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 4.53%)</title><rect x="930.3" y="771.0" width="53.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="933.3" y="782.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 3.24%)</title><rect x="945.6" y="755.0" width="38.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="948.6" y="766.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 3.24%)</title><rect x="945.6" y="739.0" width="38.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="948.6" y="750.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$284/1415964862.accept (1 samples, 0.32%)</title><rect x="945.6" y="723.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="948.6" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$44 (1 samples, 0.32%)</title><rect x="945.6" y="707.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="948.6" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.32%)</title><rect x="945.6" y="691.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="948.6" y="702.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.32%)</title><rect x="945.6" y="675.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="948.6" y="686.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.32%)</title><rect x="945.6" y="659.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="948.6" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.32%)</title><rect x="945.6" y="643.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="948.6" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.32%)</title><rect x="945.6" y="627.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="948.6" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.32%)</title><rect x="945.6" y="611.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="948.6" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.32%)</title><rect x="945.6" y="595.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="948.6" y="606.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.32%)</title><rect x="945.6" y="579.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="948.6" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$285/733062259.accept (9 samples, 2.91%)</title><rect x="949.4" y="723.0" width="34.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="952.4" y="734.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$43 (9 samples, 2.91%)</title><rect x="949.4" y="707.0" width="34.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="952.4" y="718.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/1080389350.complete (9 samples, 2.91%)</title><rect x="949.4" y="691.0" width="34.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="952.4" y="702.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$46 (9 samples, 2.91%)</title><rect x="949.4" y="675.0" width="34.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="952.4" y="686.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/1590733096.complete (8 samples, 2.59%)</title><rect x="949.4" y="659.0" width="30.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="952.4" y="670.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (8 samples, 2.59%)</title><rect x="949.4" y="643.0" width="30.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="952.4" y="654.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (8 samples, 2.59%)</title><rect x="949.4" y="627.0" width="30.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="952.4" y="638.0">co..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (8 samples, 2.59%)</title><rect x="949.4" y="611.0" width="30.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="952.4" y="622.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (8 samples, 2.59%)</title><rect x="949.4" y="595.0" width="30.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="952.4" y="606.0">ch..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$276/142460742.complete (1 samples, 0.32%)</title><rect x="980.0" y="659.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="983.0" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$null$71 (1 samples, 0.32%)</title><rect x="980.0" y="643.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="983.0" y="654.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.32%)</title><rect x="983.8" y="771.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="986.8" y="782.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.32%)</title><rect x="983.8" y="755.0" width="3.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="986.8" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (6 samples, 1.94%)</title><rect x="987.6" y="787.0" width="22.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="990.6" y="798.0">c..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 0.97%)</title><rect x="1010.5" y="835.0" width="11.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1013.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.97%)</title><rect x="1010.5" y="819.0" width="11.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1013.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.97%)</title><rect x="1010.5" y="803.0" width="11.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1013.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.97%)</title><rect x="1010.5" y="787.0" width="11.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1013.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (5 samples, 1.62%)</title><rect x="1022.0" y="835.0" width="19.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1025.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (5 samples, 1.62%)</title><rect x="1022.0" y="819.0" width="19.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1025.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.32%)</title><rect x="1022.0" y="803.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1025.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.32%)</title><rect x="1022.0" y="787.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1025.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 1.29%)</title><rect x="1025.8" y="803.0" width="15.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1028.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.29%)</title><rect x="1025.8" y="787.0" width="15.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1028.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.29%)</title><rect x="1025.8" y="771.0" width="15.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1028.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.29%)</title><rect x="1025.8" y="755.0" width="15.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1028.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (3 samples, 0.97%)</title><rect x="1041.1" y="883.0" width="11.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1044.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.sessionTimeoutExpired (1 samples, 0.32%)</title><rect x="1048.7" y="867.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1051.7" y="878.0"></text>
</g>
<g>
<title>start_thread (36 samples, 11.65%)</title><rect x="1052.5" y="883.0" width="137.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1055.5" y="894.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (36 samples, 11.65%)</title><rect x="1052.5" y="867.0" width="137.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1055.5" y="878.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (12 samples, 3.88%)</title><rect x="1052.5" y="851.0" width="45.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1055.5" y="862.0">Gang..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (12 samples, 3.88%)</title><rect x="1052.5" y="835.0" width="45.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1055.5" y="846.0">G1Pa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (10 samples, 3.24%)</title><rect x="1052.5" y="819.0" width="38.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1055.5" y="830.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (9 samples, 2.91%)</title><rect x="1052.5" y="803.0" width="34.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1055.5" y="814.0">G1..</text>
</g>
<g>
<title>Atomic::cmpxchg(signed char, signed char volatile*, signed char) (1 samples, 0.32%)</title><rect x="1060.2" y="787.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1063.2" y="798.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (5 samples, 1.62%)</title><rect x="1064.0" y="787.0" width="19.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1067.0" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.32%)</title><rect x="1075.4" y="771.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1078.4" y="782.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_v(oopDesc*, ExtendedOopClosure*) (1 samples, 0.32%)</title><rect x="1079.3" y="771.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1082.3" y="782.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.32%)</title><rect x="1083.1" y="787.0" width="3.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1086.1" y="798.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.32%)</title><rect x="1086.9" y="803.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1089.9" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.32%)</title><rect x="1090.7" y="819.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1093.7" y="830.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.32%)</title><rect x="1090.7" y="803.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1093.7" y="814.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.32%)</title><rect x="1090.7" y="787.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1093.7" y="798.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.32%)</title><rect x="1094.5" y="819.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1097.5" y="830.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.32%)</title><rect x="1094.5" y="803.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1097.5" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.32%)</title><rect x="1094.5" y="787.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1097.5" y="798.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.32%)</title><rect x="1094.5" y="771.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1097.5" y="782.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.32%)</title><rect x="1094.5" y="755.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1097.5" y="766.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.32%)</title><rect x="1094.5" y="739.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1097.5" y="750.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.32%)</title><rect x="1094.5" y="723.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1097.5" y="734.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.32%)</title><rect x="1094.5" y="707.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1097.5" y="718.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.32%)</title><rect x="1094.5" y="691.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1097.5" y="702.0"></text>
</g>
<g>
<title>JavaThread::run() (23 samples, 7.44%)</title><rect x="1098.3" y="851.0" width="87.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1101.3" y="862.0">JavaThread..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (23 samples, 7.44%)</title><rect x="1098.3" y="835.0" width="87.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1101.3" y="846.0">JavaThread..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (23 samples, 7.44%)</title><rect x="1098.3" y="819.0" width="87.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1101.3" y="830.0">CompileBro..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (23 samples, 7.44%)</title><rect x="1098.3" y="803.0" width="87.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1101.3" y="814.0">CompileBro..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (20 samples, 6.47%)</title><rect x="1098.3" y="787.0" width="76.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1101.3" y="798.0">C2Compil..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (20 samples, 6.47%)</title><rect x="1098.3" y="771.0" width="76.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1101.3" y="782.0">Compile:..</text>
</g>
<g>
<title>Compile::Code_Gen() (11 samples, 3.56%)</title><rect x="1098.3" y="755.0" width="42.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1101.3" y="766.0">Comp..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.65%)</title><rect x="1098.3" y="739.0" width="7.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1101.3" y="750.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.32%)</title><rect x="1098.3" y="723.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1101.3" y="734.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.32%)</title><rect x="1102.2" y="723.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1105.2" y="734.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.32%)</title><rect x="1102.2" y="707.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1105.2" y="718.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.32%)</title><rect x="1102.2" y="691.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1105.2" y="702.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.32%)</title><rect x="1102.2" y="675.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1105.2" y="686.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.32%)</title><rect x="1102.2" y="659.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1105.2" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (9 samples, 2.91%)</title><rect x="1106.0" y="739.0" width="34.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1109.0" y="750.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.32%)</title><rect x="1106.0" y="723.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1109.0" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.32%)</title><rect x="1109.8" y="723.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1112.8" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 0.97%)</title><rect x="1113.6" y="723.0" width="11.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1116.6" y="734.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.32%)</title><rect x="1117.4" y="707.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1120.4" y="718.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.32%)</title><rect x="1121.3" y="707.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1124.3" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.32%)</title><rect x="1125.1" y="723.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1128.1" y="734.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.32%)</title><rect x="1125.1" y="707.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1128.1" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.65%)</title><rect x="1128.9" y="723.0" width="7.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.9" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.65%)</title><rect x="1128.9" y="707.0" width="7.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1131.9" y="718.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.32%)</title><rect x="1136.5" y="723.0" width="3.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1139.5" y="734.0"></text>
</g>
<g>
<title>Compile::Optimize() (6 samples, 1.94%)</title><rect x="1140.4" y="755.0" width="22.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1143.4" y="766.0">C..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (4 samples, 1.29%)</title><rect x="1140.4" y="739.0" width="15.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1143.4" y="750.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.32%)</title><rect x="1140.4" y="723.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.4" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.32%)</title><rect x="1144.2" y="723.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.2" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.32%)</title><rect x="1148.0" y="723.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.0" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.32%)</title><rect x="1148.0" y="707.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1151.0" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.32%)</title><rect x="1148.0" y="691.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1151.0" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.32%)</title><rect x="1151.8" y="723.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.8" y="734.0"></text>
</g>
<g>
<title>ProjNode::Opcode() const (1 samples, 0.32%)</title><rect x="1151.8" y="707.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.8" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.32%)</title><rect x="1155.6" y="739.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.6" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.32%)</title><rect x="1155.6" y="723.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.6" y="734.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.32%)</title><rect x="1155.6" y="707.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.6" y="718.0"></text>
</g>
<g>
<title>TypePtr::empty() const (1 samples, 0.32%)</title><rect x="1155.6" y="691.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.6" y="702.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.32%)</title><rect x="1159.4" y="739.0" width="3.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1162.4" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.65%)</title><rect x="1163.3" y="755.0" width="7.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.3" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.65%)</title><rect x="1163.3" y="739.0" width="7.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.65%)</title><rect x="1163.3" y="723.0" width="7.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.65%)</title><rect x="1163.3" y="707.0" width="7.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.65%)</title><rect x="1163.3" y="691.0" width="7.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.65%)</title><rect x="1163.3" y="675.0" width="7.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.3" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.65%)</title><rect x="1163.3" y="659.0" width="7.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.3" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.65%)</title><rect x="1163.3" y="643.0" width="7.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.65%)</title><rect x="1163.3" y="627.0" width="7.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.65%)</title><rect x="1163.3" y="611.0" width="7.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.65%)</title><rect x="1163.3" y="595.0" width="7.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.65%)</title><rect x="1163.3" y="579.0" width="7.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.3" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.65%)</title><rect x="1163.3" y="563.0" width="7.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.3" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.65%)</title><rect x="1163.3" y="547.0" width="7.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.3" y="558.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.32%)</title><rect x="1163.3" y="531.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.3" y="542.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.32%)</title><rect x="1163.3" y="515.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.3" y="526.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.32%)</title><rect x="1163.3" y="499.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.3" y="510.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.32%)</title><rect x="1163.3" y="483.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.3" y="494.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.32%)</title><rect x="1163.3" y="467.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.3" y="478.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.32%)</title><rect x="1163.3" y="451.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1167.1" y="531.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1167.1" y="515.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1167.1" y="499.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1167.1" y="483.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.1" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1167.1" y="467.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.1" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1167.1" y="451.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1167.1" y="435.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1167.1" y="419.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1167.1" y="403.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1167.1" y="387.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.1" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1167.1" y="371.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.1" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1167.1" y="355.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1167.1" y="339.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1167.1" y="323.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1167.1" y="307.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1167.1" y="291.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.1" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1167.1" y="275.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.1" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1167.1" y="259.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1167.1" y="243.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1167.1" y="227.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1167.1" y="211.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1167.1" y="195.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.1" y="206.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.32%)</title><rect x="1167.1" y="179.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.1" y="190.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.32%)</title><rect x="1167.1" y="163.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.1" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.32%)</title><rect x="1167.1" y="147.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.1" y="158.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.32%)</title><rect x="1167.1" y="131.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.1" y="142.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.32%)</title><rect x="1167.1" y="115.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.1" y="126.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call(CallInfo&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.32%)</title><rect x="1167.1" y="99.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.1" y="110.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.32%)</title><rect x="1167.1" y="83.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.1" y="94.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.32%)</title><rect x="1167.1" y="67.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.1" y="78.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.32%)</title><rect x="1167.1" y="51.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.1" y="62.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.32%)</title><rect x="1167.1" y="35.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.1" y="46.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (1 samples, 0.32%)</title><rect x="1170.9" y="755.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.9" y="766.0"></text>
</g>
<g>
<title>TypeTuple::hash() const (1 samples, 0.32%)</title><rect x="1170.9" y="739.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.9" y="750.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 0.97%)</title><rect x="1174.7" y="787.0" width="11.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.7" y="798.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 0.97%)</title><rect x="1174.7" y="771.0" width="11.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.7" y="782.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.97%)</title><rect x="1174.7" y="755.0" width="11.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.7" y="766.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.65%)</title><rect x="1174.7" y="739.0" width="7.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.7" y="750.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.32%)</title><rect x="1174.7" y="723.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.7" y="734.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.32%)</title><rect x="1174.7" y="707.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.7" y="718.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.32%)</title><rect x="1174.7" y="691.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.7" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.32%)</title><rect x="1174.7" y="675.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.7" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.32%)</title><rect x="1174.7" y="659.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.7" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.32%)</title><rect x="1174.7" y="643.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.7" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.32%)</title><rect x="1174.7" y="627.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.7" y="638.0"></text>
</g>
<g>
<title>Instruction::as_Intrinsic() (1 samples, 0.32%)</title><rect x="1174.7" y="611.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.7" y="622.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.32%)</title><rect x="1178.5" y="723.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.5" y="734.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.32%)</title><rect x="1178.5" y="707.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.5" y="718.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.32%)</title><rect x="1178.5" y="691.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.5" y="702.0"></text>
</g>
<g>
<title>LIRGenerator::do_If(If*) (1 samples, 0.32%)</title><rect x="1178.5" y="675.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.5" y="686.0"></text>
</g>
<g>
<title>LIRGenerator::profile_branch(If*, Instruction::Condition) (1 samples, 0.32%)</title><rect x="1178.5" y="659.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.5" y="670.0"></text>
</g>
<g>
<title>LIR_List::append(LIR_Op*) (1 samples, 0.32%)</title><rect x="1178.5" y="643.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.5" y="654.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.32%)</title><rect x="1182.4" y="739.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.4" y="750.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.32%)</title><rect x="1182.4" y="723.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.4" y="734.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.32%)</title><rect x="1182.4" y="707.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.4" y="718.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.32%)</title><rect x="1182.4" y="691.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.4" y="702.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.32%)</title><rect x="1182.4" y="675.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.4" y="686.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.32%)</title><rect x="1186.2" y="851.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.2" y="862.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.32%)</title><rect x="1186.2" y="835.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.2" y="846.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.32%)</title><rect x="1186.2" y="819.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.2" y="830.0"></text>
</g>
<g>
<title>Thread::muxRelease(long volatile*) (1 samples, 0.32%)</title><rect x="1186.2" y="803.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.2" y="814.0"></text>
</g>
</g>
</svg>
