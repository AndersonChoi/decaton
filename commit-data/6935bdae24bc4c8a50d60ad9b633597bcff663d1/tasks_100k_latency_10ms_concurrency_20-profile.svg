<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="485"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="485"> </text>
<g id="frames">
<g>
<title>all (302 samples, 100.00%)</title><rect x="10.0" y="451.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="462.0">all</text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.33%)</title><rect x="10.0" y="435.0" width="3.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>BarrierSet::static_write_ref_array_pre(HeapWord*, unsigned long) (1 samples, 0.33%)</title><rect x="10.0" y="419.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (28 samples, 9.27%)</title><rect x="13.9" y="435.0" width="109.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.9" y="446.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (2 samples, 0.66%)</title><rect x="13.9" y="419.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.9" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (2 samples, 0.66%)</title><rect x="13.9" y="403.0" width="7.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="16.9" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.commitOffsets (2 samples, 0.66%)</title><rect x="13.9" y="387.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.9" y="398.0"></text>
</g>
<g>
<title>java/util/OptionalLong.ifPresent (2 samples, 0.66%)</title><rect x="13.9" y="371.0" width="7.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.9" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$307/98411181.accept (2 samples, 0.66%)</title><rect x="13.9" y="355.0" width="7.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.9" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.lambda$commitOffsets$58 (2 samples, 0.66%)</title><rect x="13.9" y="339.0" width="7.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.9" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/OffsetAndMetadata.&lt;init&gt; (2 samples, 0.66%)</title><rect x="13.9" y="323.0" width="7.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.9" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/OffsetAndMetadata.&lt;init&gt; (2 samples, 0.66%)</title><rect x="13.9" y="307.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.9" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (26 samples, 8.61%)</title><rect x="21.7" y="419.0" width="101.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.7" y="430.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.33%)</title><rect x="21.7" y="403.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.7" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.33%)</title><rect x="21.7" y="387.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="24.7" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$284/100183120.accept (1 samples, 0.33%)</title><rect x="21.7" y="371.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="24.7" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (1 samples, 0.33%)</title><rect x="21.7" y="355.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="24.7" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.33%)</title><rect x="21.7" y="339.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="24.7" y="350.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.33%)</title><rect x="21.7" y="323.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.7" y="334.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (2 samples, 0.66%)</title><rect x="25.6" y="403.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.6" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.33%)</title><rect x="25.6" y="387.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="28.6" y="398.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (1 samples, 0.33%)</title><rect x="25.6" y="371.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="28.6" y="382.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.&lt;init&gt; (1 samples, 0.33%)</title><rect x="25.6" y="355.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.6" y="366.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (1 samples, 0.33%)</title><rect x="29.5" y="387.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="32.5" y="398.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (11 samples, 3.64%)</title><rect x="33.4" y="403.0" width="43.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="36.4" y="414.0">java..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$267/1874281641.accept (10 samples, 3.31%)</title><rect x="37.4" y="387.0" width="39.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="40.4" y="398.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$71 (10 samples, 3.31%)</title><rect x="37.4" y="371.0" width="39.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="40.4" y="382.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (4 samples, 1.32%)</title><rect x="45.2" y="355.0" width="15.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="48.2" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (4 samples, 1.32%)</title><rect x="45.2" y="339.0" width="15.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="48.2" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (4 samples, 1.32%)</title><rect x="45.2" y="323.0" width="15.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="48.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (4 samples, 1.32%)</title><rect x="45.2" y="307.0" width="15.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="48.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 1.32%)</title><rect x="45.2" y="291.0" width="15.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="48.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (4 samples, 1.32%)</title><rect x="45.2" y="275.0" width="15.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="48.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 0.99%)</title><rect x="45.2" y="259.0" width="11.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="48.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 0.99%)</title><rect x="45.2" y="243.0" width="11.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="48.2" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 0.99%)</title><rect x="45.2" y="227.0" width="11.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="48.2" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.33%)</title><rect x="56.9" y="259.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="59.9" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.33%)</title><rect x="56.9" y="243.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="59.9" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.33%)</title><rect x="56.9" y="227.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="59.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.33%)</title><rect x="56.9" y="211.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="59.9" y="222.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 0.99%)</title><rect x="60.8" y="355.0" width="11.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="63.8" y="366.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.99%)</title><rect x="60.8" y="339.0" width="11.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="63.8" y="350.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.33%)</title><rect x="64.7" y="323.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="67.7" y="334.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.33%)</title><rect x="64.7" y="307.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="67.7" y="318.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.33%)</title><rect x="64.7" y="291.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="67.7" y="302.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.33%)</title><rect x="64.7" y="275.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="67.7" y="286.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.33%)</title><rect x="64.7" y="259.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="67.7" y="270.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.33%)</title><rect x="64.7" y="243.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="67.7" y="254.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.33%)</title><rect x="68.6" y="323.0" width="3.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="71.6" y="334.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.33%)</title><rect x="72.5" y="355.0" width="3.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="75.5" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 3.97%)</title><rect x="76.4" y="403.0" width="46.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="79.4" y="414.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 3.97%)</title><rect x="76.4" y="387.0" width="46.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="79.4" y="398.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (6 samples, 1.99%)</title><rect x="76.4" y="371.0" width="23.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="79.4" y="382.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.66%)</title><rect x="76.4" y="355.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="79.4" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.66%)</title><rect x="76.4" y="339.0" width="7.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="79.4" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.33%)</title><rect x="76.4" y="323.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="79.4" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.33%)</title><rect x="76.4" y="307.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="79.4" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.33%)</title><rect x="76.4" y="291.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="79.4" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.33%)</title><rect x="76.4" y="275.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="79.4" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.33%)</title><rect x="76.4" y="259.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="79.4" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.33%)</title><rect x="76.4" y="243.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="79.4" y="254.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.33%)</title><rect x="80.3" y="323.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="83.3" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.requestIterator (1 samples, 0.33%)</title><rect x="80.3" y="307.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="83.3" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.33%)</title><rect x="80.3" y="291.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="83.3" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 1.32%)</title><rect x="84.2" y="355.0" width="15.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="87.2" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.32%)</title><rect x="84.2" y="339.0" width="15.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="87.2" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 1.32%)</title><rect x="84.2" y="323.0" width="15.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="87.2" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 1.32%)</title><rect x="84.2" y="307.0" width="15.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="87.2" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 0.99%)</title><rect x="84.2" y="291.0" width="11.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="87.2" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.33%)</title><rect x="84.2" y="275.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="87.2" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.33%)</title><rect x="84.2" y="259.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="87.2" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.33%)</title><rect x="84.2" y="243.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="87.2" y="254.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.33%)</title><rect x="84.2" y="227.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="87.2" y="238.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.33%)</title><rect x="84.2" y="211.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="87.2" y="222.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.33%)</title><rect x="84.2" y="195.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="87.2" y="206.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.33%)</title><rect x="84.2" y="179.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="87.2" y="190.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (2 samples, 0.66%)</title><rect x="88.1" y="275.0" width="7.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="91.1" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (2 samples, 0.66%)</title><rect x="88.1" y="259.0" width="7.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="91.1" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.33%)</title><rect x="96.0" y="291.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="99.0" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.33%)</title><rect x="96.0" y="275.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="99.0" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.33%)</title><rect x="96.0" y="259.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="99.0" y="270.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.33%)</title><rect x="96.0" y="243.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="99.0" y="254.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (1 samples, 0.33%)</title><rect x="96.0" y="227.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="99.0" y="238.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.33%)</title><rect x="96.0" y="211.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="99.0" y="222.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.33%)</title><rect x="96.0" y="195.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="99.0" y="206.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.33%)</title><rect x="96.0" y="179.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="99.0" y="190.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 0.99%)</title><rect x="99.9" y="371.0" width="11.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="102.9" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (3 samples, 0.99%)</title><rect x="99.9" y="355.0" width="11.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="102.9" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.66%)</title><rect x="99.9" y="339.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="102.9" y="350.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.33%)</title><rect x="99.9" y="323.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="102.9" y="334.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.33%)</title><rect x="99.9" y="307.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="102.9" y="318.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.33%)</title><rect x="99.9" y="291.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="102.9" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.33%)</title><rect x="99.9" y="275.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="102.9" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.33%)</title><rect x="103.8" y="323.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="106.8" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.33%)</title><rect x="103.8" y="307.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="106.8" y="318.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.33%)</title><rect x="103.8" y="291.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="106.8" y="302.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.33%)</title><rect x="103.8" y="275.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="106.8" y="286.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.33%)</title><rect x="103.8" y="259.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="106.8" y="270.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.33%)</title><rect x="103.8" y="243.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="106.8" y="254.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.33%)</title><rect x="103.8" y="227.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="106.8" y="238.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.33%)</title><rect x="103.8" y="211.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="106.8" y="222.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.33%)</title><rect x="103.8" y="195.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="106.8" y="206.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.33%)</title><rect x="107.7" y="339.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="110.7" y="350.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.33%)</title><rect x="107.7" y="323.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="110.7" y="334.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.33%)</title><rect x="107.7" y="307.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="110.7" y="318.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.33%)</title><rect x="107.7" y="291.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="110.7" y="302.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.33%)</title><rect x="107.7" y="275.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="110.7" y="286.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.33%)</title><rect x="107.7" y="259.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="110.7" y="270.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.33%)</title><rect x="107.7" y="243.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="110.7" y="254.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.33%)</title><rect x="107.7" y="227.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="110.7" y="238.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.33%)</title><rect x="107.7" y="211.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="110.7" y="222.0"></text>
</g>
<g>
<title>java/util/stream/Sink.begin (1 samples, 0.33%)</title><rect x="107.7" y="195.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="110.7" y="206.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 0.99%)</title><rect x="111.6" y="371.0" width="11.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="114.6" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.66%)</title><rect x="111.6" y="355.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="114.6" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.66%)</title><rect x="111.6" y="339.0" width="7.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="114.6" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.33%)</title><rect x="111.6" y="323.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="114.6" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesSent (1 samples, 0.33%)</title><rect x="111.6" y="307.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="114.6" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.33%)</title><rect x="111.6" y="291.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="114.6" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.33%)</title><rect x="111.6" y="275.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="114.6" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.33%)</title><rect x="111.6" y="259.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="114.6" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.33%)</title><rect x="115.5" y="323.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="118.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.33%)</title><rect x="115.5" y="307.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="118.5" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.33%)</title><rect x="115.5" y="291.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="118.5" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.33%)</title><rect x="115.5" y="275.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="118.5" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.33%)</title><rect x="115.5" y="259.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="118.5" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.33%)</title><rect x="115.5" y="243.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="118.5" y="254.0"></text>
</g>
<g>
<title>__GI_epoll_wait (1 samples, 0.33%)</title><rect x="115.5" y="227.0" width="3.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="118.5" y="238.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.33%)</title><rect x="119.4" y="355.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="122.4" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.33%)</title><rect x="119.4" y="339.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="122.4" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.33%)</title><rect x="119.4" y="323.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="122.4" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.33%)</title><rect x="119.4" y="307.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="122.4" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.33%)</title><rect x="119.4" y="291.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="122.4" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkSend.&lt;init&gt; (1 samples, 0.33%)</title><rect x="119.4" y="275.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="122.4" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkSend.sizeBuffer (1 samples, 0.33%)</title><rect x="119.4" y="259.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="122.4" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.33%)</title><rect x="119.4" y="243.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="122.4" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.33%)</title><rect x="119.4" y="227.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="122.4" y="238.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.33%)</title><rect x="119.4" y="211.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="122.4" y="222.0"></text>
</g>
<g>
<title>java/lang/Thread.run (227 samples, 75.17%)</title><rect x="123.3" y="435.0" width="887.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="126.3" y="446.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (227 samples, 75.17%)</title><rect x="123.3" y="419.0" width="887.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="126.3" y="430.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (227 samples, 75.17%)</title><rect x="123.3" y="403.0" width="887.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="126.3" y="414.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$272/68061016.run (219 samples, 72.52%)</title><rect x="123.3" y="387.0" width="855.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="126.3" y="398.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$272/68061016.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (219 samples, 72.52%)</title><rect x="123.3" y="371.0" width="855.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="126.3" y="382.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (219 samples, 72.52%)</title><rect x="123.3" y="355.0" width="855.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="126.3" y="366.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (214 samples, 70.86%)</title><rect x="123.3" y="339.0" width="836.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="126.3" y="350.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (36 samples, 11.92%)</title><rect x="170.2" y="323.0" width="140.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="173.2" y="334.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (36 samples, 11.92%)</title><rect x="170.2" y="307.0" width="140.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="173.2" y="318.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (36 samples, 11.92%)</title><rect x="170.2" y="291.0" width="140.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="173.2" y="302.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (36 samples, 11.92%)</title><rect x="170.2" y="275.0" width="140.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="173.2" y="286.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (36 samples, 11.92%)</title><rect x="170.2" y="259.0" width="140.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="173.2" y="270.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (36 samples, 11.92%)</title><rect x="170.2" y="243.0" width="140.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="173.2" y="254.0">com/fasterxml/jack..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (12 samples, 3.97%)</title><rect x="170.2" y="227.0" width="46.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="173.2" y="238.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.33%)</title><rect x="185.8" y="211.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="188.8" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.33%)</title><rect x="185.8" y="195.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="188.8" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.33%)</title><rect x="185.8" y="179.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="188.8" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.33%)</title><rect x="185.8" y="163.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="188.8" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.33%)</title><rect x="185.8" y="147.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="188.8" y="158.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.33%)</title><rect x="185.8" y="131.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="188.8" y="142.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.33%)</title><rect x="185.8" y="115.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="188.8" y="126.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (7 samples, 2.32%)</title><rect x="189.7" y="211.0" width="27.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="192.7" y="222.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (7 samples, 2.32%)</title><rect x="189.7" y="195.0" width="27.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="192.7" y="206.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.66%)</title><rect x="205.4" y="179.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="208.4" y="190.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.33%)</title><rect x="205.4" y="163.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="208.4" y="174.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.33%)</title><rect x="209.3" y="163.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="212.3" y="174.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.33%)</title><rect x="213.2" y="179.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="216.2" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.33%)</title><rect x="213.2" y="163.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="216.2" y="174.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.33%)</title><rect x="213.2" y="147.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="216.2" y="158.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (24 samples, 7.95%)</title><rect x="217.1" y="227.0" width="93.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="220.1" y="238.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.66%)</title><rect x="217.1" y="211.0" width="7.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="220.1" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.33%)</title><rect x="224.9" y="211.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="227.9" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.33%)</title><rect x="224.9" y="195.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="227.9" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.66%)</title><rect x="228.8" y="211.0" width="7.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="231.8" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.66%)</title><rect x="228.8" y="195.0" width="7.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="231.8" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.66%)</title><rect x="228.8" y="179.0" width="7.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="231.8" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.33%)</title><rect x="232.7" y="163.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.7" y="174.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.66%)</title><rect x="236.6" y="211.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="239.6" y="222.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.33%)</title><rect x="236.6" y="195.0" width="3.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="239.6" y="206.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.33%)</title><rect x="236.6" y="179.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="239.6" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.33%)</title><rect x="240.5" y="195.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="243.5" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (16 samples, 5.30%)</title><rect x="244.4" y="211.0" width="62.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="247.4" y="222.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.32%)</title><rect x="244.4" y="195.0" width="15.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="247.4" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.33%)</title><rect x="252.3" y="179.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="255.3" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.33%)</title><rect x="252.3" y="163.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="255.3" y="174.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.33%)</title><rect x="252.3" y="147.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="255.3" y="158.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.33%)</title><rect x="256.2" y="179.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="259.2" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.33%)</title><rect x="260.1" y="195.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="263.1" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (11 samples, 3.64%)</title><rect x="264.0" y="195.0" width="43.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="267.0" y="206.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (11 samples, 3.64%)</title><rect x="264.0" y="179.0" width="43.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="267.0" y="190.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (11 samples, 3.64%)</title><rect x="264.0" y="163.0" width="43.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="267.0" y="174.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 2.32%)</title><rect x="264.0" y="147.0" width="27.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="267.0" y="158.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.99%)</title><rect x="271.8" y="131.0" width="11.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="274.8" y="142.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.99%)</title><rect x="271.8" y="115.0" width="11.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="274.8" y="126.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.99%)</title><rect x="271.8" y="99.0" width="11.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="274.8" y="110.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.99%)</title><rect x="271.8" y="83.0" width="11.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="274.8" y="94.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.66%)</title><rect x="283.5" y="131.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="286.5" y="142.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.33%)</title><rect x="291.3" y="147.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="294.3" y="158.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.33%)</title><rect x="291.3" y="131.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="294.3" y="142.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.33%)</title><rect x="291.3" y="115.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="294.3" y="126.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.33%)</title><rect x="291.3" y="99.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="294.3" y="110.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.33%)</title><rect x="291.3" y="83.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="294.3" y="94.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.33%)</title><rect x="295.2" y="147.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="298.2" y="158.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.33%)</title><rect x="295.2" y="131.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="298.2" y="142.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.33%)</title><rect x="295.2" y="115.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="298.2" y="126.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.33%)</title><rect x="295.2" y="99.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="298.2" y="110.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.33%)</title><rect x="295.2" y="83.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="298.2" y="94.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.33%)</title><rect x="295.2" y="67.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="298.2" y="78.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (1 samples, 0.33%)</title><rect x="295.2" y="51.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="298.2" y="62.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.33%)</title><rect x="299.1" y="147.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="302.1" y="158.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.33%)</title><rect x="299.1" y="131.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="302.1" y="142.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.33%)</title><rect x="299.1" y="115.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="302.1" y="126.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.33%)</title><rect x="303.0" y="147.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="306.0" y="158.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.33%)</title><rect x="303.0" y="131.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="306.0" y="142.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.33%)</title><rect x="303.0" y="115.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="306.0" y="126.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.33%)</title><rect x="307.0" y="211.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="310.0" y="222.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (154 samples, 50.99%)</title><rect x="310.9" y="323.0" width="601.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="313.9" y="334.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.33%)</title><rect x="353.8" y="307.0" width="3.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="356.8" y="318.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.33%)</title><rect x="353.8" y="291.0" width="3.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="356.8" y="302.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (30 samples, 9.93%)</title><rect x="357.7" y="307.0" width="117.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="360.7" y="318.0">com/linecorp/d..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (27 samples, 8.94%)</title><rect x="369.5" y="291.0" width="105.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="372.5" y="302.0">org/slf4j/MDC..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (23 samples, 7.62%)</title><rect x="385.1" y="275.0" width="89.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="388.1" y="286.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (10 samples, 3.31%)</title><rect x="385.1" y="259.0" width="39.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="388.1" y="270.0">ch/..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (10 samples, 3.31%)</title><rect x="385.1" y="243.0" width="39.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="388.1" y="254.0">jav..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 0.99%)</title><rect x="412.5" y="227.0" width="11.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="415.5" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.99%)</title><rect x="412.5" y="211.0" width="11.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="415.5" y="222.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (3 samples, 0.99%)</title><rect x="412.5" y="195.0" width="11.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="415.5" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.33%)</title><rect x="424.2" y="259.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="427.2" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.33%)</title><rect x="424.2" y="243.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="427.2" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.33%)</title><rect x="424.2" y="227.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="427.2" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.33%)</title><rect x="424.2" y="211.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="427.2" y="222.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.33%)</title><rect x="424.2" y="195.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="427.2" y="206.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (12 samples, 3.97%)</title><rect x="428.1" y="259.0" width="46.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="431.1" y="270.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (12 samples, 3.97%)</title><rect x="428.1" y="243.0" width="46.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="431.1" y="254.0">java..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (12 samples, 3.97%)</title><rect x="428.1" y="227.0" width="46.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="431.1" y="238.0">java..</text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.66%)</title><rect x="467.2" y="211.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="470.2" y="222.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.66%)</title><rect x="475.0" y="307.0" width="7.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="478.0" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.33%)</title><rect x="478.9" y="291.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="481.9" y="302.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.33%)</title><rect x="478.9" y="275.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="481.9" y="286.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (24 samples, 7.95%)</title><rect x="482.8" y="307.0" width="93.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="485.8" y="318.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (22 samples, 7.28%)</title><rect x="490.6" y="291.0" width="86.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="493.6" y="302.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (12 samples, 3.97%)</title><rect x="490.6" y="275.0" width="46.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="493.6" y="286.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (10 samples, 3.31%)</title><rect x="490.6" y="259.0" width="39.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="493.6" y="270.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 2.32%)</title><rect x="498.4" y="243.0" width="27.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="501.4" y="254.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 1.66%)</title><rect x="498.4" y="227.0" width="19.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="501.4" y="238.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (5 samples, 1.66%)</title><rect x="498.4" y="211.0" width="19.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="501.4" y="222.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 1.66%)</title><rect x="498.4" y="195.0" width="19.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="501.4" y="206.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.66%)</title><rect x="506.2" y="179.0" width="7.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="509.2" y="190.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.33%)</title><rect x="506.2" y="163.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="509.2" y="174.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.33%)</title><rect x="506.2" y="147.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="509.2" y="158.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.33%)</title><rect x="510.1" y="163.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="513.1" y="174.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.33%)</title><rect x="514.0" y="179.0" width="3.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="517.0" y="190.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.66%)</title><rect x="517.9" y="227.0" width="7.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="520.9" y="238.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.33%)</title><rect x="525.8" y="243.0" width="3.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="528.8" y="254.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.66%)</title><rect x="529.7" y="259.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="532.7" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.33%)</title><rect x="529.7" y="243.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="532.7" y="254.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.33%)</title><rect x="529.7" y="227.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="532.7" y="238.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.33%)</title><rect x="529.7" y="211.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="532.7" y="222.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.33%)</title><rect x="533.6" y="243.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="536.6" y="254.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.33%)</title><rect x="533.6" y="227.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="536.6" y="238.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.33%)</title><rect x="533.6" y="211.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="536.6" y="222.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.33%)</title><rect x="533.6" y="195.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="536.6" y="206.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.33%)</title><rect x="533.6" y="179.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="536.6" y="190.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.33%)</title><rect x="533.6" y="163.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="536.6" y="174.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 0.66%)</title><rect x="537.5" y="275.0" width="7.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="540.5" y="286.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.33%)</title><rect x="537.5" y="259.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="540.5" y="270.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.33%)</title><rect x="537.5" y="243.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="540.5" y="254.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.33%)</title><rect x="541.4" y="259.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="544.4" y="270.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.33%)</title><rect x="541.4" y="243.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="544.4" y="254.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (8 samples, 2.65%)</title><rect x="545.3" y="275.0" width="31.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="548.3" y="286.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (7 samples, 2.32%)</title><rect x="549.2" y="259.0" width="27.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="552.2" y="270.0">c..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (7 samples, 2.32%)</title><rect x="549.2" y="243.0" width="27.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="552.2" y="254.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (7 samples, 2.32%)</title><rect x="549.2" y="227.0" width="27.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="552.2" y="238.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (7 samples, 2.32%)</title><rect x="549.2" y="211.0" width="27.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="552.2" y="222.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.66%)</title><rect x="568.7" y="195.0" width="7.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="571.7" y="206.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (85 samples, 28.15%)</title><rect x="576.6" y="307.0" width="332.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="579.6" y="318.0">com/linecorp/decaton/processor/runtime/Proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (85 samples, 28.15%)</title><rect x="576.6" y="291.0" width="332.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="579.6" y="302.0">com/linecorp/decaton/processor/runtime/Proces..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/460718720.process (77 samples, 25.50%)</title><rect x="580.5" y="275.0" width="300.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="583.5" y="286.0">com/linecorp/decaton/benchmark/DecatonRu..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (77 samples, 25.50%)</title><rect x="580.5" y="259.0" width="300.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="583.5" y="270.0">com/linecorp/decaton/benchmark/DecatonRu..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (77 samples, 25.50%)</title><rect x="580.5" y="243.0" width="300.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="583.5" y="254.0">com/linecorp/decaton/benchmark/Recording..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.66%)</title><rect x="588.3" y="227.0" width="7.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="591.3" y="238.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.66%)</title><rect x="588.3" y="211.0" width="7.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="591.3" y="222.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.66%)</title><rect x="588.3" y="195.0" width="7.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="591.3" y="206.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.66%)</title><rect x="588.3" y="179.0" width="7.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="591.3" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.66%)</title><rect x="588.3" y="163.0" width="7.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="591.3" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (2 samples, 0.66%)</title><rect x="588.3" y="147.0" width="7.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="591.3" y="158.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (72 samples, 23.84%)</title><rect x="596.1" y="227.0" width="281.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="599.1" y="238.0">com/linecorp/decaton/benchmark/Recordi..</text>
</g>
<g>
<title>java/lang/Thread.sleep (69 samples, 22.85%)</title><rect x="600.0" y="211.0" width="269.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="603.0" y="222.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.33%)</title><rect x="619.5" y="195.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="622.5" y="206.0"></text>
</g>
<g>
<title>JVM_Sleep (60 samples, 19.87%)</title><rect x="623.4" y="195.0" width="234.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="626.4" y="206.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.99%)</title><rect x="643.0" y="179.0" width="11.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="646.0" y="190.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.99%)</title><rect x="654.7" y="179.0" width="11.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="657.7" y="190.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.33%)</title><rect x="666.4" y="179.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="669.4" y="190.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.33%)</title><rect x="670.3" y="179.0" width="3.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="673.3" y="190.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 1.99%)</title><rect x="674.2" y="179.0" width="23.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="677.2" y="190.0">_..</text>
</g>
<g>
<title>[vdso] (4 samples, 1.32%)</title><rect x="682.1" y="163.0" width="15.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="685.1" y="174.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.66%)</title><rect x="697.7" y="179.0" width="7.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="700.7" y="190.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (39 samples, 12.91%)</title><rect x="705.5" y="179.0" width="152.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="708.5" y="190.0">os::sleep(Thread*, ..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 1.32%)</title><rect x="717.2" y="163.0" width="15.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="720.2" y="174.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (4 samples, 1.32%)</title><rect x="717.2" y="147.0" width="15.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="720.2" y="158.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.33%)</title><rect x="732.8" y="163.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="735.8" y="174.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.33%)</title><rect x="736.8" y="163.0" width="3.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="739.8" y="174.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.33%)</title><rect x="736.8" y="147.0" width="3.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="739.8" y="158.0"></text>
</g>
<g>
<title>__lll_unlock_wake (6 samples, 1.99%)</title><rect x="740.7" y="163.0" width="23.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="743.7" y="174.0">_..</text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.33%)</title><rect x="764.1" y="163.0" width="3.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="767.1" y="174.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (16 samples, 5.30%)</title><rect x="768.0" y="163.0" width="62.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="771.0" y="174.0">__pthr..</text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.33%)</title><rect x="830.5" y="163.0" width="3.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="833.5" y="174.0"></text>
</g>
<g>
<title>_init (1 samples, 0.33%)</title><rect x="834.4" y="163.0" width="3.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="837.4" y="174.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.99%)</title><rect x="838.3" y="163.0" width="11.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="841.3" y="174.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.66%)</title><rect x="850.1" y="163.0" width="7.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="853.1" y="174.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.33%)</title><rect x="857.9" y="195.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="860.9" y="206.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.33%)</title><rect x="861.8" y="195.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="864.8" y="206.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.33%)</title><rect x="865.7" y="195.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="868.7" y="206.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.66%)</title><rect x="869.6" y="211.0" width="7.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="872.6" y="222.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.33%)</title><rect x="873.5" y="195.0" width="3.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="876.5" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.33%)</title><rect x="877.4" y="227.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="880.4" y="238.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (1 samples, 0.33%)</title><rect x="881.3" y="275.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="884.3" y="286.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.33%)</title><rect x="885.2" y="275.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="888.2" y="286.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.33%)</title><rect x="885.2" y="259.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="888.2" y="270.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.33%)</title><rect x="889.1" y="275.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="892.1" y="286.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.33%)</title><rect x="889.1" y="259.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="892.1" y="270.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.33%)</title><rect x="889.1" y="243.0" width="3.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="892.1" y="254.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.33%)</title><rect x="893.0" y="275.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="896.0" y="286.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.33%)</title><rect x="893.0" y="259.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="896.0" y="270.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.33%)</title><rect x="897.0" y="275.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="900.0" y="286.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.33%)</title><rect x="897.0" y="259.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="900.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (2 samples, 0.66%)</title><rect x="900.9" y="275.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="903.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.33%)</title><rect x="908.7" y="307.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="911.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.33%)</title><rect x="908.7" y="291.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="911.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.33%)</title><rect x="908.7" y="275.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="911.7" y="286.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$294/669537695.accept (1 samples, 0.33%)</title><rect x="908.7" y="259.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="911.7" y="270.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$45 (1 samples, 0.33%)</title><rect x="908.7" y="243.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="911.7" y="254.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$270/303606206.complete (1 samples, 0.33%)</title><rect x="908.7" y="227.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="911.7" y="238.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$5 (1 samples, 0.33%)</title><rect x="908.7" y="211.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="911.7" y="222.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$269/1150841875.complete (1 samples, 0.33%)</title><rect x="908.7" y="195.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="911.7" y="206.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$null$70 (1 samples, 0.33%)</title><rect x="908.7" y="179.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="911.7" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 3.64%)</title><rect x="912.6" y="323.0" width="43.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="915.6" y="334.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 3.64%)</title><rect x="912.6" y="307.0" width="43.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="915.6" y="318.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 3.64%)</title><rect x="912.6" y="291.0" width="43.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="915.6" y="302.0">java..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$294/669537695.accept (11 samples, 3.64%)</title><rect x="912.6" y="275.0" width="43.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="915.6" y="286.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$45 (11 samples, 3.64%)</title><rect x="912.6" y="259.0" width="43.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="915.6" y="270.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$270/303606206.complete (11 samples, 3.64%)</title><rect x="912.6" y="243.0" width="43.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="915.6" y="254.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$5 (11 samples, 3.64%)</title><rect x="912.6" y="227.0" width="43.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="915.6" y="238.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$268/1281193620.complete (2 samples, 0.66%)</title><rect x="912.6" y="211.0" width="7.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="915.6" y="222.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (2 samples, 0.66%)</title><rect x="912.6" y="195.0" width="7.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="915.6" y="206.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (2 samples, 0.66%)</title><rect x="912.6" y="179.0" width="7.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="915.6" y="190.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 0.66%)</title><rect x="912.6" y="163.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="915.6" y="174.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$269/1150841875.complete (9 samples, 2.98%)</title><rect x="920.4" y="211.0" width="35.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="923.4" y="222.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$null$70 (9 samples, 2.98%)</title><rect x="920.4" y="195.0" width="35.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="923.4" y="206.0">com..</text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.33%)</title><rect x="955.6" y="323.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="958.6" y="334.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.33%)</title><rect x="955.6" y="307.0" width="3.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="958.6" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (5 samples, 1.66%)</title><rect x="959.5" y="339.0" width="19.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="962.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.33%)</title><rect x="979.0" y="387.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="982.0" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.33%)</title><rect x="979.0" y="371.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="982.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.33%)</title><rect x="979.0" y="355.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="982.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.33%)</title><rect x="979.0" y="339.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="982.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (7 samples, 2.32%)</title><rect x="982.9" y="387.0" width="27.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="985.9" y="398.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (7 samples, 2.32%)</title><rect x="982.9" y="371.0" width="27.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="985.9" y="382.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 1.66%)</title><rect x="990.7" y="355.0" width="19.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="993.7" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 1.66%)</title><rect x="990.7" y="339.0" width="19.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="993.7" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 1.66%)</title><rect x="990.7" y="323.0" width="19.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="993.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 1.66%)</title><rect x="990.7" y="307.0" width="19.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="993.7" y="318.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.33%)</title><rect x="1010.3" y="435.0" width="3.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1013.3" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (3 samples, 0.99%)</title><rect x="1014.2" y="435.0" width="11.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1017.2" y="446.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.33%)</title><rect x="1014.2" y="419.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1017.2" y="430.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.33%)</title><rect x="1014.2" y="403.0" width="3.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1017.2" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 0.33%)</title><rect x="1014.2" y="387.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1017.2" y="398.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.33%)</title><rect x="1014.2" y="371.0" width="3.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1017.2" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.33%)</title><rect x="1018.1" y="419.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1021.1" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.33%)</title><rect x="1018.1" y="403.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1021.1" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.33%)</title><rect x="1018.1" y="387.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1021.1" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.33%)</title><rect x="1018.1" y="371.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1021.1" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.33%)</title><rect x="1018.1" y="355.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1021.1" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.pollTimeoutExpired (1 samples, 0.33%)</title><rect x="1022.0" y="419.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1025.0" y="430.0"></text>
</g>
<g>
<title>start_thread (42 samples, 13.91%)</title><rect x="1025.9" y="435.0" width="164.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1028.9" y="446.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (42 samples, 13.91%)</title><rect x="1025.9" y="419.0" width="164.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1028.9" y="430.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (15 samples, 4.97%)</title><rect x="1025.9" y="403.0" width="58.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1028.9" y="414.0">GangWo..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (15 samples, 4.97%)</title><rect x="1025.9" y="387.0" width="58.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1028.9" y="398.0">G1ParT..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (12 samples, 3.97%)</title><rect x="1025.9" y="371.0" width="46.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1028.9" y="382.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (12 samples, 3.97%)</title><rect x="1025.9" y="355.0" width="46.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1028.9" y="366.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (9 samples, 2.98%)</title><rect x="1029.8" y="339.0" width="35.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1032.8" y="350.0">G1P..</text>
</g>
<g>
<title>G1ParGCAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, unsigned char) (1 samples, 0.33%)</title><rect x="1045.4" y="323.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1048.4" y="334.0"></text>
</g>
<g>
<title>G1ParGCAllocBuffer::retire(bool, bool) (1 samples, 0.33%)</title><rect x="1045.4" y="307.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1048.4" y="318.0"></text>
</g>
<g>
<title>ParGCAllocBuffer::retire(bool, bool) (1 samples, 0.33%)</title><rect x="1045.4" y="291.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1048.4" y="302.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.33%)</title><rect x="1045.4" y="275.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1048.4" y="286.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (4 samples, 1.32%)</title><rect x="1049.3" y="323.0" width="15.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1052.3" y="334.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (2 samples, 0.66%)</title><rect x="1065.0" y="339.0" width="7.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1068.0" y="350.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (3 samples, 0.99%)</title><rect x="1072.8" y="371.0" width="11.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1075.8" y="382.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (3 samples, 0.99%)</title><rect x="1072.8" y="355.0" width="11.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1075.8" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (3 samples, 0.99%)</title><rect x="1072.8" y="339.0" width="11.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1075.8" y="350.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (3 samples, 0.99%)</title><rect x="1072.8" y="323.0" width="11.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1075.8" y="334.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 0.99%)</title><rect x="1072.8" y="307.0" width="11.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1075.8" y="318.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (3 samples, 0.99%)</title><rect x="1072.8" y="291.0" width="11.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1075.8" y="302.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.99%)</title><rect x="1072.8" y="275.0" width="11.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1075.8" y="286.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (3 samples, 0.99%)</title><rect x="1072.8" y="259.0" width="11.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1075.8" y="270.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (2 samples, 0.66%)</title><rect x="1076.7" y="243.0" width="7.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1079.7" y="254.0"></text>
</g>
<g>
<title>JavaThread::run() (27 samples, 8.94%)</title><rect x="1084.5" y="403.0" width="105.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1087.5" y="414.0">JavaThread::r..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (27 samples, 8.94%)</title><rect x="1084.5" y="387.0" width="105.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1087.5" y="398.0">JavaThread::t..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (27 samples, 8.94%)</title><rect x="1084.5" y="371.0" width="105.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1087.5" y="382.0">CompileBroker..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (27 samples, 8.94%)</title><rect x="1084.5" y="355.0" width="105.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1087.5" y="366.0">CompileBroker..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (24 samples, 7.95%)</title><rect x="1084.5" y="339.0" width="93.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1087.5" y="350.0">C2Compiler:..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (24 samples, 7.95%)</title><rect x="1084.5" y="323.0" width="93.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1087.5" y="334.0">Compile::Co..</text>
</g>
<g>
<title>Compile::Code_Gen() (14 samples, 4.64%)</title><rect x="1084.5" y="307.0" width="54.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1087.5" y="318.0">Compi..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.66%)</title><rect x="1084.5" y="291.0" width="7.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1087.5" y="302.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.66%)</title><rect x="1084.5" y="275.0" width="7.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1087.5" y="286.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.33%)</title><rect x="1092.3" y="291.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1095.3" y="302.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.33%)</title><rect x="1092.3" y="275.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1095.3" y="286.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.33%)</title><rect x="1092.3" y="259.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1095.3" y="270.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.33%)</title><rect x="1092.3" y="243.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1095.3" y="254.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.33%)</title><rect x="1092.3" y="227.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1095.3" y="238.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.33%)</title><rect x="1092.3" y="211.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1095.3" y="222.0"></text>
</g>
<g>
<title>State::_sub_Op_ConL(Node const*) (1 samples, 0.33%)</title><rect x="1092.3" y="195.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1095.3" y="206.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.33%)</title><rect x="1096.2" y="291.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1099.2" y="302.0"></text>
</g>
<g>
<title>PhaseBlockLayout::reorder_traces(int) (1 samples, 0.33%)</title><rect x="1096.2" y="275.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1099.2" y="286.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.66%)</title><rect x="1100.1" y="291.0" width="7.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1103.1" y="302.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.66%)</title><rect x="1100.1" y="275.0" width="7.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1103.1" y="286.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.66%)</title><rect x="1100.1" y="259.0" width="7.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1103.1" y="270.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.33%)</title><rect x="1100.1" y="243.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1103.1" y="254.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.33%)</title><rect x="1100.1" y="227.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1103.1" y="238.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.33%)</title><rect x="1100.1" y="211.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1103.1" y="222.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.33%)</title><rect x="1100.1" y="195.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1103.1" y="206.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.33%)</title><rect x="1100.1" y="179.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1103.1" y="190.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.33%)</title><rect x="1104.0" y="243.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1107.0" y="254.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (8 samples, 2.65%)</title><rect x="1107.9" y="291.0" width="31.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1110.9" y="302.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.33%)</title><rect x="1107.9" y="275.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1110.9" y="286.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.33%)</title><rect x="1111.9" y="275.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1114.9" y="286.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.33%)</title><rect x="1111.9" y="259.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1114.9" y="270.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.33%)</title><rect x="1115.8" y="275.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1118.8" y="286.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.33%)</title><rect x="1119.7" y="275.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1122.7" y="286.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.66%)</title><rect x="1123.6" y="275.0" width="7.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1126.6" y="286.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.33%)</title><rect x="1127.5" y="259.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.5" y="270.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.33%)</title><rect x="1131.4" y="275.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.4" y="286.0"></text>
</g>
<g>
<title>rRegIOper::in_RegMask(int) const (1 samples, 0.33%)</title><rect x="1135.3" y="275.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1138.3" y="286.0"></text>
</g>
<g>
<title>Compile::Optimize() (6 samples, 1.99%)</title><rect x="1139.2" y="307.0" width="23.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.2" y="318.0">C..</text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.33%)</title><rect x="1139.2" y="291.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.2" y="302.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.33%)</title><rect x="1143.1" y="291.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.1" y="302.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.33%)</title><rect x="1143.1" y="275.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1146.1" y="286.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (3 samples, 0.99%)</title><rect x="1147.0" y="291.0" width="11.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.0" y="302.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.66%)</title><rect x="1147.0" y="275.0" width="7.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.0" y="286.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.66%)</title><rect x="1147.0" y="259.0" width="7.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.0" y="270.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.33%)</title><rect x="1150.9" y="243.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.9" y="254.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.33%)</title><rect x="1154.8" y="275.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.8" y="286.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.33%)</title><rect x="1158.7" y="291.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.7" y="302.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.33%)</title><rect x="1158.7" y="275.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.7" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.32%)</title><rect x="1162.6" y="307.0" width="15.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.6" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.32%)</title><rect x="1162.6" y="291.0" width="15.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.32%)</title><rect x="1162.6" y="275.0" width="15.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.32%)</title><rect x="1162.6" y="259.0" width="15.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.32%)</title><rect x="1162.6" y="243.0" width="15.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.66%)</title><rect x="1162.6" y="227.0" width="7.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.6" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.66%)</title><rect x="1162.6" y="211.0" width="7.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.6" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.66%)</title><rect x="1162.6" y="195.0" width="7.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.66%)</title><rect x="1162.6" y="179.0" width="7.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.66%)</title><rect x="1162.6" y="163.0" width="7.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.66%)</title><rect x="1162.6" y="147.0" width="7.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.6" y="158.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.33%)</title><rect x="1166.6" y="131.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.6" y="142.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.33%)</title><rect x="1166.6" y="115.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.6" y="126.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.33%)</title><rect x="1166.6" y="99.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.6" y="110.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.33%)</title><rect x="1166.6" y="83.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.6" y="94.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.33%)</title><rect x="1166.6" y="67.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.6" y="78.0"></text>
</g>
<g>
<title>TypeInstPtr::xdual() const (1 samples, 0.33%)</title><rect x="1166.6" y="51.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.6" y="62.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.33%)</title><rect x="1166.6" y="35.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.6" y="46.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.33%)</title><rect x="1170.5" y="227.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.5" y="238.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.33%)</title><rect x="1170.5" y="211.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.5" y="222.0"></text>
</g>
<g>
<title>GraphKit::maybe_cast_profiled_receiver(Node*, ciKlass*, ciKlass*, bool) (1 samples, 0.33%)</title><rect x="1170.5" y="195.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.5" y="206.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.33%)</title><rect x="1170.5" y="179.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.5" y="190.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.33%)</title><rect x="1170.5" y="163.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.5" y="174.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.33%)</title><rect x="1170.5" y="147.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.5" y="158.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.33%)</title><rect x="1174.4" y="227.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.4" y="238.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.33%)</title><rect x="1174.4" y="211.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.4" y="222.0"></text>
</g>
<g>
<title>PhaseTransform::longcon(long) (1 samples, 0.33%)</title><rect x="1174.4" y="195.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.4" y="206.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 0.99%)</title><rect x="1178.3" y="339.0" width="11.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.3" y="350.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 0.99%)</title><rect x="1178.3" y="323.0" width="11.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.3" y="334.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.99%)</title><rect x="1178.3" y="307.0" width="11.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.3" y="318.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.99%)</title><rect x="1178.3" y="291.0" width="11.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.3" y="302.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.33%)</title><rect x="1178.3" y="275.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.3" y="286.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.33%)</title><rect x="1178.3" y="259.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.3" y="270.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.33%)</title><rect x="1178.3" y="243.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.3" y="254.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.33%)</title><rect x="1178.3" y="227.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.3" y="238.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.33%)</title><rect x="1178.3" y="211.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.3" y="222.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.33%)</title><rect x="1178.3" y="195.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.3" y="206.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.33%)</title><rect x="1178.3" y="179.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.3" y="190.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.33%)</title><rect x="1178.3" y="163.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.3" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.33%)</title><rect x="1178.3" y="147.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.3" y="158.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.33%)</title><rect x="1178.3" y="131.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.3" y="142.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.33%)</title><rect x="1178.3" y="115.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.3" y="126.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.33%)</title><rect x="1178.3" y="99.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.3" y="110.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.33%)</title><rect x="1182.2" y="275.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.2" y="286.0"></text>
</g>
<g>
<title>Compilation::emit_code_epilog(LIR_Assembler*) (1 samples, 0.33%)</title><rect x="1182.2" y="259.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.2" y="270.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_slow_case_stubs() (1 samples, 0.33%)</title><rect x="1182.2" y="243.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.2" y="254.0"></text>
</g>
<g>
<title>ImplicitNullCheckStub::emit_code(LIR_Assembler*) (1 samples, 0.33%)</title><rect x="1182.2" y="227.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.2" y="238.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.33%)</title><rect x="1182.2" y="211.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.2" y="222.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.33%)</title><rect x="1182.2" y="195.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.2" y="206.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (1 samples, 0.33%)</title><rect x="1182.2" y="179.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.2" y="190.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.33%)</title><rect x="1182.2" y="163.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.2" y="174.0"></text>
</g>
<g>
<title>LocationValue::write_on(DebugInfoWriteStream*) (1 samples, 0.33%)</title><rect x="1182.2" y="147.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.2" y="158.0"></text>
</g>
<g>
<title>Location::write_on(DebugInfoWriteStream*) (1 samples, 0.33%)</title><rect x="1182.2" y="131.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.2" y="142.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.33%)</title><rect x="1186.1" y="275.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.1" y="286.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.33%)</title><rect x="1186.1" y="259.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.1" y="270.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.33%)</title><rect x="1186.1" y="243.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.1" y="254.0"></text>
</g>
<g>
<title>MoveResolver::resolve_mappings() (1 samples, 0.33%)</title><rect x="1186.1" y="227.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.1" y="238.0"></text>
</g>
</g>
</svg>
