<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1574" onload="init(evt)" viewBox="0 0 1200 1574" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1557"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1557"> </text>
<g id="frames">
<g>
<title>all (1,159 samples, 100.00%)</title><rect x="10.0" y="1523.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1534.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (291 samples, 25.11%)</title><rect x="10.0" y="1507.0" width="296.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1518.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (289 samples, 24.94%)</title><rect x="10.0" y="1491.0" width="294.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1502.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (5 samples, 0.43%)</title><rect x="10.0" y="1475.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (5 samples, 0.43%)</title><rect x="10.0" y="1459.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1221516237.accept (4 samples, 0.35%)</title><rect x="10.0" y="1443.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (4 samples, 0.35%)</title><rect x="10.0" y="1427.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.35%)</title><rect x="10.0" y="1411.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.35%)</title><rect x="10.0" y="1395.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.09%)</title><rect x="13.1" y="1379.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.1" y="1390.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.09%)</title><rect x="13.1" y="1363.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.1" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.09%)</title><rect x="13.1" y="1347.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.1" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.09%)</title><rect x="13.1" y="1331.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.1" y="1342.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="14.1" y="1443.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.1" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (4 samples, 0.35%)</title><rect x="15.1" y="1475.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.1" y="1486.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (4 samples, 0.35%)</title><rect x="15.1" y="1459.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.1" y="1470.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.35%)</title><rect x="15.1" y="1443.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.1" y="1454.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.35%)</title><rect x="15.1" y="1427.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.1" y="1438.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (4 samples, 0.35%)</title><rect x="15.1" y="1411.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.1" y="1422.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (4 samples, 0.35%)</title><rect x="15.1" y="1395.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.1" y="1406.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.26%)</title><rect x="15.1" y="1379.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.1" y="1390.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="15.1" y="1363.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.1" y="1374.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.characteristics (1 samples, 0.09%)</title><rect x="15.1" y="1347.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.1" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="16.1" y="1363.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.1" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="16.1" y="1347.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.1" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="16.1" y="1331.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.1" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="16.1" y="1315.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.1" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$181/1057743585.get (1 samples, 0.09%)</title><rect x="16.1" y="1299.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.1" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="17.1" y="1363.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.1" y="1374.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="17.1" y="1347.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="20.1" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.09%)</title><rect x="18.1" y="1379.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.1" y="1390.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.09%)</title><rect x="18.1" y="1363.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="21.1" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="18.1" y="1347.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.1" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.09%)</title><rect x="18.1" y="1331.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.1" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="18.1" y="1315.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.1" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (2 samples, 0.17%)</title><rect x="19.2" y="1475.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.2" y="1486.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (2 samples, 0.17%)</title><rect x="19.2" y="1459.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.2" y="1470.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.characteristics (1 samples, 0.09%)</title><rect x="19.2" y="1443.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.2" y="1454.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="20.2" y="1443.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.2" y="1454.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="20.2" y="1427.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.2" y="1438.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="20.2" y="1411.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.2" y="1422.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="20.2" y="1395.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.2" y="1406.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="20.2" y="1379.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.2" y="1390.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="20.2" y="1363.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="23.2" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="20.2" y="1347.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.2" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="20.2" y="1331.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="23.2" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="20.2" y="1315.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="23.2" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$181/1057743585.get (1 samples, 0.09%)</title><rect x="20.2" y="1299.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="23.2" y="1310.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (223 samples, 19.24%)</title><rect x="21.2" y="1475.0" width="227.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="24.2" y="1486.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1223954879.accept (211 samples, 18.21%)</title><rect x="22.2" y="1459.0" width="214.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.2" y="1470.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$71 (209 samples, 18.03%)</title><rect x="24.3" y="1443.0" width="212.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.3" y="1454.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (172 samples, 14.84%)</title><rect x="30.4" y="1427.0" width="175.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="33.4" y="1438.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (172 samples, 14.84%)</title><rect x="30.4" y="1411.0" width="175.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="33.4" y="1422.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (172 samples, 14.84%)</title><rect x="30.4" y="1395.0" width="175.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="33.4" y="1406.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (172 samples, 14.84%)</title><rect x="30.4" y="1379.0" width="175.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="33.4" y="1390.0">java/util/concurrent/Ex..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (172 samples, 14.84%)</title><rect x="30.4" y="1363.0" width="175.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="33.4" y="1374.0">java/util/concurrent/Th..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (172 samples, 14.84%)</title><rect x="30.4" y="1347.0" width="175.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="33.4" y="1358.0">java/util/concurrent/Li..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (124 samples, 10.70%)</title><rect x="30.4" y="1331.0" width="126.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="33.4" y="1342.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (23 samples, 1.98%)</title><rect x="30.4" y="1315.0" width="23.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="33.4" y="1326.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (23 samples, 1.98%)</title><rect x="30.4" y="1299.0" width="23.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="33.4" y="1310.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (15 samples, 1.29%)</title><rect x="38.5" y="1283.0" width="15.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="41.5" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (15 samples, 1.29%)</title><rect x="38.5" y="1267.0" width="15.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="41.5" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (9 samples, 0.78%)</title><rect x="53.8" y="1315.0" width="9.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="56.8" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (9 samples, 0.78%)</title><rect x="53.8" y="1299.0" width="9.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="56.8" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.17%)</title><rect x="54.8" y="1283.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="57.8" y="1294.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.17%)</title><rect x="54.8" y="1267.0" width="2.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="57.8" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (6 samples, 0.52%)</title><rect x="56.8" y="1283.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="59.8" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (92 samples, 7.94%)</title><rect x="62.9" y="1315.0" width="93.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="65.9" y="1326.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (92 samples, 7.94%)</title><rect x="62.9" y="1299.0" width="93.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="65.9" y="1310.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (90 samples, 7.77%)</title><rect x="62.9" y="1283.0" width="91.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="65.9" y="1294.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (88 samples, 7.59%)</title><rect x="62.9" y="1267.0" width="89.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="65.9" y="1278.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (86 samples, 7.42%)</title><rect x="65.0" y="1251.0" width="87.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="68.0" y="1262.0">sun/misc/U..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="68.0" y="1235.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="71.0" y="1246.0"></text>
</g>
<g>
<title>Unsafe_Unpark (75 samples, 6.47%)</title><rect x="69.1" y="1235.0" width="76.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="72.1" y="1246.0">Unsafe_U..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="70.1" y="1219.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="73.1" y="1230.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.17%)</title><rect x="71.1" y="1219.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="74.1" y="1230.0"></text>
</g>
<g>
<title>__pthread_cond_signal (48 samples, 4.14%)</title><rect x="73.1" y="1219.0" width="48.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="76.1" y="1230.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (8 samples, 0.69%)</title><rect x="122.0" y="1219.0" width="8.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="125.0" y="1230.0"></text>
</g>
<g>
<title>pthread_mutex_lock (15 samples, 1.29%)</title><rect x="130.1" y="1219.0" width="15.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="133.1" y="1230.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.26%)</title><rect x="145.4" y="1235.0" width="3.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="148.4" y="1246.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.26%)</title><rect x="148.5" y="1235.0" width="3.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="151.5" y="1246.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.09%)</title><rect x="151.5" y="1235.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="154.5" y="1246.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (2 samples, 0.17%)</title><rect x="152.5" y="1267.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="155.5" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.17%)</title><rect x="154.6" y="1283.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="157.6" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (41 samples, 3.54%)</title><rect x="156.6" y="1331.0" width="41.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="159.6" y="1342.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (41 samples, 3.54%)</title><rect x="156.6" y="1315.0" width="41.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="159.6" y="1326.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (41 samples, 3.54%)</title><rect x="156.6" y="1299.0" width="41.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="159.6" y="1310.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.35%)</title><rect x="198.4" y="1331.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="201.4" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (4 samples, 0.35%)</title><rect x="198.4" y="1315.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="201.4" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.35%)</title><rect x="198.4" y="1299.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="201.4" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.26%)</title><rect x="202.4" y="1331.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="205.4" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.26%)</title><rect x="202.4" y="1315.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="205.4" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="202.4" y="1299.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="205.4" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.09%)</title><rect x="202.4" y="1283.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="205.4" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.17%)</title><rect x="203.4" y="1299.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="206.4" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.09%)</title><rect x="204.5" y="1283.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="207.5" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (29 samples, 2.50%)</title><rect x="205.5" y="1427.0" width="29.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="208.5" y="1438.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (29 samples, 2.50%)</title><rect x="205.5" y="1411.0" width="29.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="208.5" y="1422.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 0.43%)</title><rect x="225.8" y="1395.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="228.8" y="1406.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 0.43%)</title><rect x="225.8" y="1379.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.8" y="1390.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (5 samples, 0.43%)</title><rect x="225.8" y="1363.0" width="5.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="228.8" y="1374.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.43%)</title><rect x="225.8" y="1347.0" width="5.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="228.8" y="1358.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="229.9" y="1331.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="232.9" y="1342.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="229.9" y="1315.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="232.9" y="1326.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="229.9" y="1299.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="232.9" y="1310.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="229.9" y="1283.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="232.9" y="1294.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="230.9" y="1395.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="233.9" y="1406.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.26%)</title><rect x="231.9" y="1395.0" width="3.1" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="234.9" y="1406.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="235.0" y="1427.0" width="2.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="238.0" y="1438.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.26%)</title><rect x="237.0" y="1459.0" width="3.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="240.0" y="1470.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.09%)</title><rect x="240.1" y="1459.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="243.1" y="1470.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.09%)</title><rect x="240.1" y="1443.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="243.1" y="1454.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="240.1" y="1427.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="243.1" y="1438.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="240.1" y="1411.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="243.1" y="1422.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.09%)</title><rect x="240.1" y="1395.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="243.1" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (7 samples, 0.60%)</title><rect x="241.1" y="1459.0" width="7.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="244.1" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (7 samples, 0.60%)</title><rect x="241.1" y="1443.0" width="7.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="244.1" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.60%)</title><rect x="241.1" y="1427.0" width="7.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="244.1" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.60%)</title><rect x="241.1" y="1411.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="244.1" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (55 samples, 4.75%)</title><rect x="248.2" y="1475.0" width="56.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="251.2" y="1486.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (55 samples, 4.75%)</title><rect x="248.2" y="1459.0" width="56.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="251.2" y="1470.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (38 samples, 3.28%)</title><rect x="248.2" y="1443.0" width="38.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="251.2" y="1454.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (3 samples, 0.26%)</title><rect x="248.2" y="1427.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="251.2" y="1438.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.09%)</title><rect x="248.2" y="1411.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="251.2" y="1422.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 0.09%)</title><rect x="249.3" y="1411.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="252.3" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.09%)</title><rect x="250.3" y="1411.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="253.3" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.09%)</title><rect x="250.3" y="1395.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="253.3" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (35 samples, 3.02%)</title><rect x="251.3" y="1427.0" width="35.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="254.3" y="1438.0">org..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="251.3" y="1411.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="254.3" y="1422.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="251.3" y="1395.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="254.3" y="1406.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.09%)</title><rect x="251.3" y="1379.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="254.3" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (34 samples, 2.93%)</title><rect x="252.3" y="1411.0" width="34.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="255.3" y="1422.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (27 samples, 2.33%)</title><rect x="252.3" y="1395.0" width="27.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="255.3" y="1406.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (27 samples, 2.33%)</title><rect x="252.3" y="1379.0" width="27.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="255.3" y="1390.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (12 samples, 1.04%)</title><rect x="253.3" y="1363.0" width="12.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="256.3" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (5 samples, 0.43%)</title><rect x="253.3" y="1347.0" width="5.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="256.3" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (5 samples, 0.43%)</title><rect x="253.3" y="1331.0" width="5.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="256.3" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (5 samples, 0.43%)</title><rect x="253.3" y="1315.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="256.3" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (5 samples, 0.43%)</title><rect x="253.3" y="1299.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="256.3" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (5 samples, 0.43%)</title><rect x="253.3" y="1283.0" width="5.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="256.3" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (5 samples, 0.43%)</title><rect x="253.3" y="1267.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="256.3" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (5 samples, 0.43%)</title><rect x="253.3" y="1251.0" width="5.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="256.3" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (7 samples, 0.60%)</title><rect x="258.4" y="1347.0" width="7.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="261.4" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (7 samples, 0.60%)</title><rect x="258.4" y="1331.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="261.4" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (12 samples, 1.04%)</title><rect x="265.5" y="1363.0" width="12.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="268.5" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (12 samples, 1.04%)</title><rect x="265.5" y="1347.0" width="12.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="268.5" y="1358.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="265.5" y="1331.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="268.5" y="1342.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="265.5" y="1315.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="268.5" y="1326.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.09%)</title><rect x="265.5" y="1299.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="268.5" y="1310.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_region_work(MemRegion) (1 samples, 0.09%)</title><rect x="265.5" y="1283.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="268.5" y="1294.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::invalidate(MemRegion, bool) (1 samples, 0.09%)</title><rect x="265.5" y="1267.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="268.5" y="1278.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.09%)</title><rect x="265.5" y="1251.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="268.5" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (11 samples, 0.95%)</title><rect x="266.6" y="1331.0" width="11.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="269.6" y="1342.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (11 samples, 0.95%)</title><rect x="266.6" y="1315.0" width="11.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="269.6" y="1326.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (8 samples, 0.69%)</title><rect x="268.6" y="1299.0" width="8.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="271.6" y="1310.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="274.7" y="1283.0" width="2.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="277.7" y="1294.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="276.7" y="1299.0" width="1.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="279.7" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.17%)</title><rect x="277.8" y="1363.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="280.8" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (4 samples, 0.35%)</title><rect x="279.8" y="1395.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="282.8" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (4 samples, 0.35%)</title><rect x="279.8" y="1379.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="282.8" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (2 samples, 0.17%)</title><rect x="279.8" y="1363.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.8" y="1374.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (2 samples, 0.17%)</title><rect x="279.8" y="1347.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="282.8" y="1358.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (2 samples, 0.17%)</title><rect x="279.8" y="1331.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="282.8" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="281.8" y="1363.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="284.8" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="281.8" y="1347.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="284.8" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="281.8" y="1331.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="284.8" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="281.8" y="1315.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="284.8" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="282.9" y="1315.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="285.9" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.17%)</title><rect x="283.9" y="1395.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="286.9" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.17%)</title><rect x="283.9" y="1379.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="286.9" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (1 samples, 0.09%)</title><rect x="283.9" y="1363.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="286.9" y="1374.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="283.9" y="1347.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="286.9" y="1358.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="283.9" y="1331.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="286.9" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="284.9" y="1363.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="287.9" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="284.9" y="1347.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="287.9" y="1358.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="284.9" y="1331.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="287.9" y="1342.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="284.9" y="1315.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="287.9" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.09%)</title><rect x="285.9" y="1395.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="288.9" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.contains (1 samples, 0.09%)</title><rect x="285.9" y="1379.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="288.9" y="1390.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.09%)</title><rect x="285.9" y="1363.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="288.9" y="1374.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="285.9" y="1347.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="288.9" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.09%)</title><rect x="285.9" y="1331.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="288.9" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (8 samples, 0.69%)</title><rect x="286.9" y="1443.0" width="8.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="289.9" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (8 samples, 0.69%)</title><rect x="286.9" y="1427.0" width="8.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="289.9" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (4 samples, 0.35%)</title><rect x="286.9" y="1411.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="289.9" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.17%)</title><rect x="286.9" y="1395.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="289.9" y="1406.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.17%)</title><rect x="286.9" y="1379.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="289.9" y="1390.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (2 samples, 0.17%)</title><rect x="286.9" y="1363.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="289.9" y="1374.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.09%)</title><rect x="286.9" y="1347.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="289.9" y="1358.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeySet.iterator (1 samples, 0.09%)</title><rect x="286.9" y="1331.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="289.9" y="1342.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.09%)</title><rect x="287.9" y="1347.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="290.9" y="1358.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.hasNext (1 samples, 0.09%)</title><rect x="287.9" y="1331.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="290.9" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.17%)</title><rect x="289.0" y="1395.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="292.0" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.17%)</title><rect x="289.0" y="1379.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="292.0" y="1390.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.characteristics (1 samples, 0.09%)</title><rect x="289.0" y="1363.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="292.0" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="290.0" y="1363.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="293.0" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="290.0" y="1347.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="293.0" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="290.0" y="1331.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="293.0" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="290.0" y="1315.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="293.0" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="290.0" y="1299.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="293.0" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="290.0" y="1283.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="293.0" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="290.0" y="1267.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="293.0" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.09%)</title><rect x="290.0" y="1251.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="293.0" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="290.0" y="1235.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="293.0" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$55/1667148529.get (1 samples, 0.09%)</title><rect x="290.0" y="1219.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="293.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (4 samples, 0.35%)</title><rect x="291.0" y="1411.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="294.0" y="1422.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (4 samples, 0.35%)</title><rect x="291.0" y="1395.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="294.0" y="1406.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.35%)</title><rect x="291.0" y="1379.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="294.0" y="1390.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (3 samples, 0.26%)</title><rect x="292.0" y="1363.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="295.0" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.17%)</title><rect x="293.0" y="1347.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="296.0" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="294.1" y="1331.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="297.1" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="294.1" y="1315.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="297.1" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.09%)</title><rect x="294.1" y="1299.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="297.1" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.09%)</title><rect x="294.1" y="1283.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="297.1" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 0.35%)</title><rect x="295.1" y="1443.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="298.1" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.35%)</title><rect x="295.1" y="1427.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="298.1" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.35%)</title><rect x="295.1" y="1411.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="298.1" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (4 samples, 0.35%)</title><rect x="295.1" y="1395.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="298.1" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (4 samples, 0.35%)</title><rect x="295.1" y="1379.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="298.1" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (4 samples, 0.35%)</title><rect x="295.1" y="1363.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="298.1" y="1374.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (4 samples, 0.35%)</title><rect x="295.1" y="1347.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="298.1" y="1358.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.35%)</title><rect x="295.1" y="1331.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="298.1" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.26%)</title><rect x="299.1" y="1443.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="302.1" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.26%)</title><rect x="299.1" y="1427.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="302.1" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.26%)</title><rect x="299.1" y="1411.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="302.1" y="1422.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="300.2" y="1395.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="303.2" y="1406.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="300.2" y="1379.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="303.2" y="1390.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="300.2" y="1363.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="303.2" y="1374.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.09%)</title><rect x="300.2" y="1347.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="303.2" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.09%)</title><rect x="301.2" y="1395.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="304.2" y="1406.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="301.2" y="1379.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="304.2" y="1390.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="301.2" y="1363.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="304.2" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="301.2" y="1347.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="304.2" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="301.2" y="1331.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="304.2" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="301.2" y="1315.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="304.2" y="1326.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="301.2" y="1299.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="304.2" y="1310.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.09%)</title><rect x="301.2" y="1283.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="304.2" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="301.2" y="1267.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="304.2" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="301.2" y="1251.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="304.2" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="301.2" y="1235.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="304.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$258/284978700.test (1 samples, 0.09%)</title><rect x="301.2" y="1219.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="304.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 0.17%)</title><rect x="302.2" y="1443.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="305.2" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="302.2" y="1427.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="305.2" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="302.2" y="1411.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="305.2" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="303.2" y="1395.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="306.2" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="303.2" y="1379.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="306.2" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/MetricConfig.quota (1 samples, 0.09%)</title><rect x="303.2" y="1363.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="306.2" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="304.2" y="1491.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="307.2" y="1502.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.09%)</title><rect x="305.3" y="1491.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="308.3" y="1502.0"></text>
</g>
<g>
<title>java/lang/Thread.run (777 samples, 67.04%)</title><rect x="306.3" y="1507.0" width="791.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="309.3" y="1518.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (777 samples, 67.04%)</title><rect x="306.3" y="1491.0" width="791.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="309.3" y="1502.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (777 samples, 67.04%)</title><rect x="306.3" y="1475.0" width="791.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="309.3" y="1486.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/1325189724.run (530 samples, 45.73%)</title><rect x="306.3" y="1459.0" width="539.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="309.3" y="1470.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/1325189724..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (530 samples, 45.73%)</title><rect x="306.3" y="1443.0" width="539.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="309.3" y="1454.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (529 samples, 45.64%)</title><rect x="307.3" y="1427.0" width="538.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="310.3" y="1438.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (524 samples, 45.21%)</title><rect x="307.3" y="1411.0" width="533.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="310.3" y="1422.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="318.5" y="1395.0" width="1.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="321.5" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (198 samples, 17.08%)</title><rect x="319.5" y="1395.0" width="201.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="322.5" y="1406.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (198 samples, 17.08%)</title><rect x="319.5" y="1379.0" width="201.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="322.5" y="1390.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (198 samples, 17.08%)</title><rect x="319.5" y="1363.0" width="201.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="322.5" y="1374.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="319.5" y="1347.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="322.5" y="1358.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="319.5" y="1331.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="322.5" y="1342.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="319.5" y="1315.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="322.5" y="1326.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="319.5" y="1299.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="322.5" y="1310.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="319.5" y="1283.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="322.5" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (197 samples, 17.00%)</title><rect x="320.5" y="1347.0" width="200.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="323.5" y="1358.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (197 samples, 17.00%)</title><rect x="320.5" y="1331.0" width="200.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="323.5" y="1342.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (197 samples, 17.00%)</title><rect x="320.5" y="1315.0" width="200.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="323.5" y="1326.0">com/fasterxml/jackson/data..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (68 samples, 5.87%)</title><rect x="320.5" y="1299.0" width="69.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="323.5" y="1310.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (39 samples, 3.36%)</title><rect x="320.5" y="1283.0" width="39.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="323.5" y="1294.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (37 samples, 3.19%)</title><rect x="320.5" y="1267.0" width="37.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="323.5" y="1278.0">com..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="339.9" y="1251.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="342.9" y="1262.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="339.9" y="1235.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="342.9" y="1246.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="340.9" y="1251.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="343.9" y="1262.0"></text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.78%)</title><rect x="341.9" y="1251.0" width="9.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="344.9" y="1262.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.43%)</title><rect x="346.0" y="1235.0" width="5.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="349.0" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (2 samples, 0.17%)</title><rect x="351.1" y="1251.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="354.1" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (5 samples, 0.43%)</title><rect x="353.1" y="1251.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="356.1" y="1262.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.43%)</title><rect x="353.1" y="1235.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="356.1" y="1246.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 0.43%)</title><rect x="353.1" y="1219.0" width="5.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="356.1" y="1230.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.43%)</title><rect x="353.1" y="1203.0" width="5.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="356.1" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (5 samples, 0.43%)</title><rect x="353.1" y="1187.0" width="5.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="356.1" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (2 samples, 0.17%)</title><rect x="358.2" y="1267.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="361.2" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.09%)</title><rect x="358.2" y="1251.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="361.2" y="1262.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.09%)</title><rect x="359.2" y="1251.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="362.2" y="1262.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.09%)</title><rect x="359.2" y="1235.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="362.2" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (29 samples, 2.50%)</title><rect x="360.2" y="1283.0" width="29.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="363.2" y="1294.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="361.3" y="1267.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="364.3" y="1278.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="361.3" y="1251.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="364.3" y="1262.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="361.3" y="1235.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="364.3" y="1246.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="361.3" y="1219.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="364.3" y="1230.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="361.3" y="1203.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="364.3" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (2 samples, 0.17%)</title><rect x="362.3" y="1267.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="365.3" y="1278.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.17%)</title><rect x="362.3" y="1251.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="365.3" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (25 samples, 2.16%)</title><rect x="364.3" y="1267.0" width="25.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="367.3" y="1278.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.17%)</title><rect x="364.3" y="1251.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="367.3" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.17%)</title><rect x="364.3" y="1235.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="367.3" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (4 samples, 0.35%)</title><rect x="366.3" y="1251.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="369.3" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (4 samples, 0.35%)</title><rect x="366.3" y="1235.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="369.3" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (4 samples, 0.35%)</title><rect x="366.3" y="1219.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="369.3" y="1230.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (4 samples, 0.35%)</title><rect x="366.3" y="1203.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="369.3" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.17%)</title><rect x="366.3" y="1187.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="369.3" y="1198.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.17%)</title><rect x="368.4" y="1187.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="371.4" y="1198.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.17%)</title><rect x="368.4" y="1171.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="371.4" y="1182.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="369.4" y="1155.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="372.4" y="1166.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="369.4" y="1139.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="372.4" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.09%)</title><rect x="369.4" y="1123.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="372.4" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (19 samples, 1.64%)</title><rect x="370.4" y="1251.0" width="19.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="373.4" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (115 samples, 9.92%)</title><rect x="389.8" y="1299.0" width="117.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="392.8" y="1310.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (5 samples, 0.43%)</title><rect x="389.8" y="1283.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="392.8" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (5 samples, 0.43%)</title><rect x="389.8" y="1267.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="392.8" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (2 samples, 0.17%)</title><rect x="390.8" y="1251.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="393.8" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.09%)</title><rect x="391.8" y="1235.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="394.8" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (2 samples, 0.17%)</title><rect x="392.8" y="1251.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="395.8" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (8 samples, 0.69%)</title><rect x="394.8" y="1283.0" width="8.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="397.8" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (8 samples, 0.69%)</title><rect x="394.8" y="1267.0" width="8.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="397.8" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (2 samples, 0.17%)</title><rect x="401.0" y="1251.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="404.0" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (9 samples, 0.78%)</title><rect x="403.0" y="1283.0" width="9.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="406.0" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (9 samples, 0.78%)</title><rect x="403.0" y="1267.0" width="9.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="406.0" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (6 samples, 0.52%)</title><rect x="403.0" y="1251.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="406.0" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.17%)</title><rect x="407.1" y="1235.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="410.1" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (3 samples, 0.26%)</title><rect x="409.1" y="1251.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="412.1" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (9 samples, 0.78%)</title><rect x="412.2" y="1283.0" width="9.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="415.2" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (9 samples, 0.78%)</title><rect x="412.2" y="1267.0" width="9.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="415.2" y="1278.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="414.2" y="1251.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="417.2" y="1262.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="414.2" y="1235.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="417.2" y="1246.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="414.2" y="1219.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="417.2" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="415.2" y="1251.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="418.2" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (5 samples, 0.43%)</title><rect x="416.2" y="1251.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="419.2" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (5 samples, 0.43%)</title><rect x="416.2" y="1235.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="419.2" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (5 samples, 0.43%)</title><rect x="416.2" y="1219.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="419.2" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (84 samples, 7.25%)</title><rect x="421.3" y="1283.0" width="85.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="424.3" y="1294.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (29 samples, 2.50%)</title><rect x="422.3" y="1267.0" width="29.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="425.3" y="1278.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (17 samples, 1.47%)</title><rect x="422.3" y="1251.0" width="17.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="425.3" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (17 samples, 1.47%)</title><rect x="422.3" y="1235.0" width="17.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="425.3" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (17 samples, 1.47%)</title><rect x="422.3" y="1219.0" width="17.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="425.3" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (17 samples, 1.47%)</title><rect x="422.3" y="1203.0" width="17.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="425.3" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (6 samples, 0.52%)</title><rect x="433.5" y="1187.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="436.5" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (11 samples, 0.95%)</title><rect x="439.6" y="1251.0" width="11.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="442.6" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (7 samples, 0.60%)</title><rect x="439.6" y="1235.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="442.6" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.09%)</title><rect x="445.8" y="1219.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="448.8" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (4 samples, 0.35%)</title><rect x="446.8" y="1235.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="449.8" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (4 samples, 0.35%)</title><rect x="446.8" y="1219.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="449.8" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.17%)</title><rect x="448.8" y="1203.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="451.8" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (2 samples, 0.17%)</title><rect x="448.8" y="1187.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="451.8" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="450.8" y="1251.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="453.8" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="450.8" y="1235.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="453.8" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (54 samples, 4.66%)</title><rect x="451.9" y="1267.0" width="54.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="454.9" y="1278.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (54 samples, 4.66%)</title><rect x="451.9" y="1251.0" width="54.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="454.9" y="1262.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (54 samples, 4.66%)</title><rect x="451.9" y="1235.0" width="54.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="454.9" y="1246.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (18 samples, 1.55%)</title><rect x="455.9" y="1219.0" width="18.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="458.9" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (4 samples, 0.35%)</title><rect x="457.0" y="1203.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="460.0" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.17%)</title><rect x="461.0" y="1203.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="464.0" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.35%)</title><rect x="463.1" y="1203.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="466.1" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.35%)</title><rect x="463.1" y="1187.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="466.1" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.35%)</title><rect x="463.1" y="1171.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="466.1" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.17%)</title><rect x="463.1" y="1155.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="466.1" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.17%)</title><rect x="465.1" y="1155.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="468.1" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 0.35%)</title><rect x="467.1" y="1203.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="470.1" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (4 samples, 0.35%)</title><rect x="467.1" y="1187.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="470.1" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (4 samples, 0.35%)</title><rect x="467.1" y="1171.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="470.1" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.17%)</title><rect x="471.2" y="1203.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="474.2" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.17%)</title><rect x="471.2" y="1187.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="474.2" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.09%)</title><rect x="473.2" y="1203.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="476.2" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (12 samples, 1.04%)</title><rect x="474.3" y="1219.0" width="12.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="477.3" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (10 samples, 0.86%)</title><rect x="476.3" y="1203.0" width="10.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="479.3" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (10 samples, 0.86%)</title><rect x="476.3" y="1187.0" width="10.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="479.3" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (10 samples, 0.86%)</title><rect x="476.3" y="1171.0" width="10.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="479.3" y="1182.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (10 samples, 0.86%)</title><rect x="476.3" y="1155.0" width="10.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="479.3" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 0.35%)</title><rect x="486.5" y="1219.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="489.5" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (9 samples, 0.78%)</title><rect x="490.6" y="1219.0" width="9.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="493.6" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (9 samples, 0.78%)</title><rect x="490.6" y="1203.0" width="9.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="493.6" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (9 samples, 0.78%)</title><rect x="490.6" y="1187.0" width="9.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="493.6" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (9 samples, 0.78%)</title><rect x="490.6" y="1171.0" width="9.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="493.6" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="490.6" y="1155.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="493.6" y="1166.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (8 samples, 0.69%)</title><rect x="491.6" y="1155.0" width="8.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="494.6" y="1166.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (8 samples, 0.69%)</title><rect x="491.6" y="1139.0" width="8.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="494.6" y="1150.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (8 samples, 0.69%)</title><rect x="491.6" y="1123.0" width="8.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="494.6" y="1134.0"></text>
</g>
<g>
<title>sun/reflect/misc/ReflectUtil.isVMAnonymousClass (1 samples, 0.09%)</title><rect x="498.7" y="1107.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="501.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/Class.getName (1 samples, 0.09%)</title><rect x="498.7" y="1091.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="501.7" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="498.7" y="1075.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="501.7" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="498.7" y="1059.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="501.7" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="498.7" y="1043.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="501.7" y="1054.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.09%)</title><rect x="498.7" y="1027.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="501.7" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (4 samples, 0.35%)</title><rect x="499.7" y="1219.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="502.7" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.35%)</title><rect x="499.7" y="1203.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="502.7" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.35%)</title><rect x="499.7" y="1187.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="502.7" y="1198.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="502.8" y="1171.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="505.8" y="1182.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.09%)</title><rect x="502.8" y="1155.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="505.8" y="1166.0"></text>
</g>
<g>
<title>ObjArrayKlass::array_klass_impl(bool, int, Thread*) (1 samples, 0.09%)</title><rect x="502.8" y="1139.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="505.8" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (3 samples, 0.26%)</title><rect x="503.8" y="1219.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="506.8" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (3 samples, 0.26%)</title><rect x="503.8" y="1203.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="506.8" y="1214.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.17%)</title><rect x="504.8" y="1187.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="507.8" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (14 samples, 1.21%)</title><rect x="506.8" y="1299.0" width="14.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="509.8" y="1310.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (14 samples, 1.21%)</title><rect x="506.8" y="1283.0" width="14.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="509.8" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (14 samples, 1.21%)</title><rect x="506.8" y="1267.0" width="14.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="509.8" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (3 samples, 0.26%)</title><rect x="508.9" y="1251.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="511.9" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (9 samples, 0.78%)</title><rect x="511.9" y="1251.0" width="9.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="514.9" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (9 samples, 0.78%)</title><rect x="511.9" y="1235.0" width="9.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="514.9" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (280 samples, 24.16%)</title><rect x="521.1" y="1395.0" width="285.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="524.1" y="1406.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (37 samples, 3.19%)</title><rect x="523.1" y="1379.0" width="37.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="526.1" y="1390.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (1 samples, 0.09%)</title><rect x="523.1" y="1363.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="526.1" y="1374.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (36 samples, 3.11%)</title><rect x="524.2" y="1363.0" width="36.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="527.2" y="1374.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (36 samples, 3.11%)</title><rect x="524.2" y="1347.0" width="36.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="527.2" y="1358.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.17%)</title><rect x="526.2" y="1331.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="529.2" y="1342.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.17%)</title><rect x="526.2" y="1315.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="529.2" y="1326.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.17%)</title><rect x="526.2" y="1299.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="529.2" y="1310.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.17%)</title><rect x="526.2" y="1283.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="529.2" y="1294.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.17%)</title><rect x="528.2" y="1331.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="531.2" y="1342.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.17%)</title><rect x="528.2" y="1315.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="531.2" y="1326.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.17%)</title><rect x="528.2" y="1299.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="531.2" y="1310.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.17%)</title><rect x="528.2" y="1283.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="531.2" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.09%)</title><rect x="529.2" y="1267.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="532.2" y="1278.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (30 samples, 2.59%)</title><rect x="530.3" y="1331.0" width="30.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="533.3" y="1342.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (23 samples, 1.98%)</title><rect x="537.4" y="1315.0" width="23.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="540.4" y="1326.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 0.26%)</title><rect x="557.7" y="1299.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="560.7" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (10 samples, 0.86%)</title><rect x="560.8" y="1379.0" width="10.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="563.8" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.69%)</title><rect x="562.8" y="1363.0" width="8.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="565.8" y="1374.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (8 samples, 0.69%)</title><rect x="562.8" y="1347.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="565.8" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (145 samples, 12.51%)</title><rect x="571.0" y="1379.0" width="147.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="574.0" y="1390.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (145 samples, 12.51%)</title><rect x="571.0" y="1363.0" width="147.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="574.0" y="1374.0">com/linecorp/decato..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="580.1" y="1347.0" width="1.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="583.1" y="1358.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="580.1" y="1331.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="583.1" y="1342.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.69%)</title><rect x="581.2" y="1347.0" width="8.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="584.2" y="1358.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.60%)</title><rect x="582.2" y="1331.0" width="7.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="585.2" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (58 samples, 5.00%)</title><rect x="589.3" y="1347.0" width="59.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="592.3" y="1358.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (37 samples, 3.19%)</title><rect x="601.5" y="1331.0" width="37.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="604.5" y="1342.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (24 samples, 2.07%)</title><rect x="606.6" y="1315.0" width="24.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="609.6" y="1326.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (11 samples, 0.95%)</title><rect x="613.7" y="1299.0" width="11.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="616.7" y="1310.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (11 samples, 0.95%)</title><rect x="613.7" y="1283.0" width="11.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="616.7" y="1294.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (11 samples, 0.95%)</title><rect x="613.7" y="1267.0" width="11.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="616.7" y="1278.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.09%)</title><rect x="613.7" y="1251.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="616.7" y="1262.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (9 samples, 0.78%)</title><rect x="614.8" y="1251.0" width="9.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="617.8" y="1262.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="614.8" y="1235.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="617.8" y="1246.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (6 samples, 0.52%)</title><rect x="615.8" y="1235.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="618.8" y="1246.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (6 samples, 0.52%)</title><rect x="615.8" y="1219.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="618.8" y="1230.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (6 samples, 0.52%)</title><rect x="615.8" y="1203.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="618.8" y="1214.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="615.8" y="1187.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="618.8" y="1198.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="615.8" y="1171.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="618.8" y="1182.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (2 samples, 0.17%)</title><rect x="616.8" y="1187.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="619.8" y="1198.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (3 samples, 0.26%)</title><rect x="618.8" y="1187.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="621.8" y="1198.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="621.9" y="1235.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="624.9" y="1246.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="621.9" y="1219.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="624.9" y="1230.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="621.9" y="1203.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="624.9" y="1214.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="622.9" y="1235.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="625.9" y="1246.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.09%)</title><rect x="623.9" y="1251.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="626.9" y="1262.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.52%)</title><rect x="624.9" y="1299.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="627.9" y="1310.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (8 samples, 0.69%)</title><rect x="631.1" y="1315.0" width="8.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="634.1" y="1326.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.09%)</title><rect x="639.2" y="1331.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="642.2" y="1342.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="639.2" y="1315.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="642.2" y="1326.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (8 samples, 0.69%)</title><rect x="640.2" y="1331.0" width="8.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="643.2" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="648.4" y="1347.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="651.4" y="1358.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (8 samples, 0.69%)</title><rect x="649.4" y="1347.0" width="8.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="652.4" y="1358.0"></text>
</g>
<g>
<title>java/lang/Long.toString (8 samples, 0.69%)</title><rect x="649.4" y="1331.0" width="8.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="652.4" y="1342.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="649.4" y="1315.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="652.4" y="1326.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray(BasicType, int, Thread*) (1 samples, 0.09%)</title><rect x="649.4" y="1299.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="652.4" y="1310.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (7 samples, 0.60%)</title><rect x="650.4" y="1315.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="653.4" y="1326.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (60 samples, 5.18%)</title><rect x="657.5" y="1347.0" width="61.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="660.5" y="1358.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (59 samples, 5.09%)</title><rect x="658.5" y="1331.0" width="60.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="661.5" y="1342.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.35%)</title><rect x="658.5" y="1315.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="661.5" y="1326.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.35%)</title><rect x="658.5" y="1299.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="661.5" y="1310.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.35%)</title><rect x="658.5" y="1283.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="661.5" y="1294.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.35%)</title><rect x="658.5" y="1267.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="661.5" y="1278.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.17%)</title><rect x="662.6" y="1315.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="665.6" y="1326.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.17%)</title><rect x="662.6" y="1299.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="665.6" y="1310.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.17%)</title><rect x="662.6" y="1283.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="665.6" y="1294.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.17%)</title><rect x="662.6" y="1267.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="665.6" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="663.6" y="1251.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="666.6" y="1262.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (53 samples, 4.57%)</title><rect x="664.7" y="1315.0" width="53.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="667.7" y="1326.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (50 samples, 4.31%)</title><rect x="667.7" y="1299.0" width="50.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="670.7" y="1310.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (29 samples, 2.50%)</title><rect x="689.1" y="1283.0" width="29.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="692.1" y="1294.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.09%)</title><rect x="703.3" y="1267.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="706.3" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (9 samples, 0.78%)</title><rect x="704.4" y="1267.0" width="9.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="707.4" y="1278.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="712.5" y="1251.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="715.5" y="1262.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="712.5" y="1235.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="715.5" y="1246.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="712.5" y="1219.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="715.5" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="712.5" y="1203.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="715.5" y="1214.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="712.5" y="1187.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="715.5" y="1198.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 0.43%)</title><rect x="713.5" y="1267.0" width="5.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="716.5" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (68 samples, 5.87%)</title><rect x="718.6" y="1379.0" width="69.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="721.6" y="1390.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (68 samples, 5.87%)</title><rect x="718.6" y="1363.0" width="69.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="721.6" y="1374.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1487619603.process (33 samples, 2.85%)</title><rect x="720.6" y="1347.0" width="33.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="723.6" y="1358.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (33 samples, 2.85%)</title><rect x="720.6" y="1331.0" width="33.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="723.6" y="1342.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (28 samples, 2.42%)</title><rect x="721.7" y="1315.0" width="28.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="724.7" y="1326.0">co..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.17%)</title><rect x="722.7" y="1299.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="725.7" y="1310.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.17%)</title><rect x="722.7" y="1283.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="725.7" y="1294.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.17%)</title><rect x="722.7" y="1267.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="725.7" y="1278.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.17%)</title><rect x="722.7" y="1251.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="725.7" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.17%)</title><rect x="722.7" y="1235.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="725.7" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.09%)</title><rect x="723.7" y="1219.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="726.7" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (10 samples, 0.86%)</title><rect x="724.7" y="1299.0" width="10.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="727.7" y="1310.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.69%)</title><rect x="726.8" y="1283.0" width="8.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="729.8" y="1294.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.52%)</title><rect x="728.8" y="1267.0" width="6.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="731.8" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.17%)</title><rect x="734.9" y="1299.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="737.9" y="1310.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (13 samples, 1.12%)</title><rect x="736.9" y="1299.0" width="13.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="739.9" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (4 samples, 0.35%)</title><rect x="750.2" y="1315.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="753.2" y="1326.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.26%)</title><rect x="751.2" y="1299.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="754.2" y="1310.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.26%)</title><rect x="751.2" y="1283.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="754.2" y="1294.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.26%)</title><rect x="751.2" y="1267.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="754.2" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (6 samples, 0.52%)</title><rect x="754.2" y="1347.0" width="6.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="757.2" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.26%)</title><rect x="760.4" y="1347.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="763.4" y="1358.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.26%)</title><rect x="760.4" y="1331.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="763.4" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.loggingExceptions (2 samples, 0.17%)</title><rect x="763.4" y="1347.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="766.4" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$281/14316228.get (2 samples, 0.17%)</title><rect x="763.4" y="1331.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="766.4" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.lambda$pushDownStream$66 (2 samples, 0.17%)</title><rect x="763.4" y="1315.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="766.4" y="1326.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1016925085.linkToTargetMethod (2 samples, 0.17%)</title><rect x="765.4" y="1347.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="768.4" y="1358.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (2 samples, 0.17%)</title><rect x="765.4" y="1331.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="768.4" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$283/1886250991.get$Lambda (2 samples, 0.17%)</title><rect x="765.4" y="1315.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="768.4" y="1326.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="767.5" y="1347.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="770.5" y="1358.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="767.5" y="1331.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="770.5" y="1342.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 0.69%)</title><rect x="768.5" y="1347.0" width="8.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="771.5" y="1358.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (7 samples, 0.60%)</title><rect x="769.5" y="1331.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="772.5" y="1342.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.17%)</title><rect x="769.5" y="1315.0" width="2.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="772.5" y="1326.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (5 samples, 0.43%)</title><rect x="771.6" y="1315.0" width="5.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="774.6" y="1326.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (4 samples, 0.35%)</title><rect x="776.6" y="1347.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="779.6" y="1358.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.26%)</title><rect x="777.7" y="1331.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="780.7" y="1342.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (7 samples, 0.60%)</title><rect x="780.7" y="1347.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="783.7" y="1358.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.09%)</title><rect x="786.8" y="1331.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="789.8" y="1342.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.09%)</title><rect x="786.8" y="1315.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="789.8" y="1326.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="786.8" y="1299.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="789.8" y="1310.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="786.8" y="1283.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="789.8" y="1294.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="786.8" y="1267.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="789.8" y="1278.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="786.8" y="1251.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="789.8" y="1262.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="786.8" y="1235.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="789.8" y="1246.0"></text>
</g>
<g>
<title>VMThread::execute(VM_Operation*) (1 samples, 0.09%)</title><rect x="786.8" y="1219.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="789.8" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.09%)</title><rect x="787.8" y="1379.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="790.8" y="1390.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="787.8" y="1363.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="790.8" y="1374.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="787.8" y="1347.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="790.8" y="1358.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="787.8" y="1331.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="790.8" y="1342.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1512769297.linkToTargetMethod (1 samples, 0.09%)</title><rect x="788.9" y="1379.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="791.9" y="1390.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/399931359.invokeStatic_L3_L (1 samples, 0.09%)</title><rect x="788.9" y="1363.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="791.9" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$287/218329328.get$Lambda (1 samples, 0.09%)</title><rect x="788.9" y="1347.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="791.9" y="1358.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="788.9" y="1331.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="791.9" y="1342.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="788.9" y="1315.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="791.9" y="1326.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="788.9" y="1299.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="791.9" y="1310.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="788.9" y="1283.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="791.9" y="1294.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.09%)</title><rect x="788.9" y="1267.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="791.9" y="1278.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="788.9" y="1251.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="791.9" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (16 samples, 1.38%)</title><rect x="789.9" y="1379.0" width="16.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="792.9" y="1390.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.26%)</title><rect x="794.0" y="1363.0" width="3.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="797.0" y="1374.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="795.0" y="1347.0" width="2.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="798.0" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 0.69%)</title><rect x="797.0" y="1363.0" width="8.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="800.0" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.69%)</title><rect x="797.0" y="1347.0" width="8.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="800.0" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$291/1312782211.accept (8 samples, 0.69%)</title><rect x="797.0" y="1331.0" width="8.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="800.0" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$45 (8 samples, 0.69%)</title><rect x="797.0" y="1315.0" width="8.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="800.0" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/1219200556.complete (8 samples, 0.69%)</title><rect x="797.0" y="1299.0" width="8.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="800.0" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$5 (8 samples, 0.69%)</title><rect x="797.0" y="1283.0" width="8.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="800.0" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/456944376.complete (8 samples, 0.69%)</title><rect x="797.0" y="1267.0" width="8.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="800.0" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (8 samples, 0.69%)</title><rect x="797.0" y="1251.0" width="8.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="800.0" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (8 samples, 0.69%)</title><rect x="797.0" y="1235.0" width="8.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="800.0" y="1246.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (8 samples, 0.69%)</title><rect x="797.0" y="1219.0" width="8.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="800.0" y="1230.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (8 samples, 0.69%)</title><rect x="797.0" y="1203.0" width="8.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="800.0" y="1214.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.17%)</title><rect x="803.1" y="1187.0" width="2.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="806.1" y="1198.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="803.1" y="1171.0" width="2.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="806.1" y="1182.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="805.2" y="1363.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="808.2" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (28 samples, 2.42%)</title><rect x="806.2" y="1395.0" width="28.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="809.2" y="1406.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (27 samples, 2.33%)</title><rect x="807.2" y="1379.0" width="27.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="810.2" y="1390.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (27 samples, 2.33%)</title><rect x="807.2" y="1363.0" width="27.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="810.2" y="1374.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$291/1312782211.accept (27 samples, 2.33%)</title><rect x="807.2" y="1347.0" width="27.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="810.2" y="1358.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$45 (27 samples, 2.33%)</title><rect x="807.2" y="1331.0" width="27.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="810.2" y="1342.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/1219200556.complete (27 samples, 2.33%)</title><rect x="807.2" y="1315.0" width="27.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="810.2" y="1326.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$5 (27 samples, 2.33%)</title><rect x="807.2" y="1299.0" width="27.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="810.2" y="1310.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/456944376.complete (24 samples, 2.07%)</title><rect x="807.2" y="1283.0" width="24.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="810.2" y="1294.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (24 samples, 2.07%)</title><rect x="807.2" y="1267.0" width="24.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="810.2" y="1278.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (24 samples, 2.07%)</title><rect x="807.2" y="1251.0" width="24.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="810.2" y="1262.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (24 samples, 2.07%)</title><rect x="807.2" y="1235.0" width="24.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="810.2" y="1246.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (24 samples, 2.07%)</title><rect x="807.2" y="1219.0" width="24.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="810.2" y="1230.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$276/787011348.complete (3 samples, 0.26%)</title><rect x="831.6" y="1283.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="834.6" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$null$70 (3 samples, 0.26%)</title><rect x="831.6" y="1267.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="834.6" y="1278.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.52%)</title><rect x="834.7" y="1395.0" width="6.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="837.7" y="1406.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.52%)</title><rect x="834.7" y="1379.0" width="6.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="837.7" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="840.8" y="1411.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="843.8" y="1422.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.09%)</title><rect x="840.8" y="1395.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="843.8" y="1406.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.09%)</title><rect x="840.8" y="1379.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="843.8" y="1390.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="840.8" y="1363.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="843.8" y="1374.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="840.8" y="1347.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="843.8" y="1358.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="840.8" y="1331.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="843.8" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (4 samples, 0.35%)</title><rect x="841.8" y="1411.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="844.8" y="1422.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="844.9" y="1395.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="847.9" y="1406.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="844.9" y="1379.0" width="1.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="847.9" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (7 samples, 0.60%)</title><rect x="845.9" y="1459.0" width="7.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="848.9" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.60%)</title><rect x="845.9" y="1443.0" width="7.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="848.9" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.60%)</title><rect x="845.9" y="1427.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="848.9" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.60%)</title><rect x="845.9" y="1411.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="848.9" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (3 samples, 0.26%)</title><rect x="849.9" y="1395.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="852.9" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (240 samples, 20.71%)</title><rect x="853.0" y="1459.0" width="244.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="856.0" y="1470.0">java/util/concurrent/ThreadPoolE..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (238 samples, 20.53%)</title><rect x="855.0" y="1443.0" width="242.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="858.0" y="1454.0">java/util/concurrent/LinkedBlock..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (218 samples, 18.81%)</title><rect x="856.1" y="1427.0" width="221.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="859.1" y="1438.0">java/util/concurrent/locks/Ab..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (25 samples, 2.16%)</title><rect x="864.2" y="1411.0" width="25.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="867.2" y="1422.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (8 samples, 0.69%)</title><rect x="889.7" y="1411.0" width="8.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="892.7" y="1422.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="889.7" y="1395.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="892.7" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.60%)</title><rect x="890.7" y="1395.0" width="7.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="893.7" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.60%)</title><rect x="890.7" y="1379.0" width="7.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="893.7" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.60%)</title><rect x="890.7" y="1363.0" width="7.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="893.7" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (177 samples, 15.27%)</title><rect x="897.8" y="1411.0" width="180.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="900.8" y="1422.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (175 samples, 15.10%)</title><rect x="899.8" y="1395.0" width="178.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="902.8" y="1406.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.17%)</title><rect x="910.0" y="1379.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="913.0" y="1390.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.17%)</title><rect x="912.1" y="1379.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="915.1" y="1390.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (4 samples, 0.35%)</title><rect x="914.1" y="1379.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="917.1" y="1390.0"></text>
</g>
<g>
<title>Unsafe_Park (150 samples, 12.94%)</title><rect x="918.2" y="1379.0" width="152.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="921.2" y="1390.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="926.3" y="1363.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="929.3" y="1374.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (18 samples, 1.55%)</title><rect x="927.3" y="1363.0" width="18.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="930.3" y="1374.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (9 samples, 0.78%)</title><rect x="931.4" y="1347.0" width="9.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="934.4" y="1358.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.35%)</title><rect x="931.4" y="1331.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="934.4" y="1342.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.17%)</title><rect x="933.4" y="1315.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="936.4" y="1326.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.17%)</title><rect x="935.5" y="1331.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="938.5" y="1342.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.26%)</title><rect x="937.5" y="1331.0" width="3.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="940.5" y="1342.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="940.6" y="1347.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="943.6" y="1358.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (4 samples, 0.35%)</title><rect x="941.6" y="1347.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="944.6" y="1358.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.17%)</title><rect x="945.7" y="1363.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="948.7" y="1374.0"></text>
</g>
<g>
<title>__lll_lock_wait (8 samples, 0.69%)</title><rect x="947.7" y="1363.0" width="8.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="950.7" y="1374.0"></text>
</g>
<g>
<title>__lll_unlock_wake (35 samples, 3.02%)</title><rect x="955.8" y="1363.0" width="35.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="958.8" y="1374.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (50 samples, 4.31%)</title><rect x="991.5" y="1363.0" width="50.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="994.5" y="1374.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.43%)</title><rect x="1042.4" y="1363.0" width="5.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1045.4" y="1374.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.09%)</title><rect x="1047.5" y="1363.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1050.5" y="1374.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.17%)</title><rect x="1048.5" y="1363.0" width="2.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1051.5" y="1374.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.35%)</title><rect x="1050.5" y="1363.0" width="4.1" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1053.5" y="1374.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (7 samples, 0.60%)</title><rect x="1054.6" y="1363.0" width="7.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1057.6" y="1374.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.09%)</title><rect x="1061.7" y="1363.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1064.7" y="1374.0"></text>
</g>
<g>
<title>_init (2 samples, 0.17%)</title><rect x="1062.7" y="1363.0" width="2.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1065.7" y="1374.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (5 samples, 0.43%)</title><rect x="1064.8" y="1363.0" width="5.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1067.8" y="1374.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1069.9" y="1363.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1072.9" y="1374.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (6 samples, 0.52%)</title><rect x="1070.9" y="1379.0" width="6.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1073.9" y="1390.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.09%)</title><rect x="1077.0" y="1379.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1080.0" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (19 samples, 1.64%)</title><rect x="1078.0" y="1427.0" width="19.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1081.0" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (19 samples, 1.64%)</title><rect x="1078.0" y="1411.0" width="19.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1081.0" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (19 samples, 1.64%)</title><rect x="1078.0" y="1395.0" width="19.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1081.0" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (19 samples, 1.64%)</title><rect x="1078.0" y="1379.0" width="19.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1081.0" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.09%)</title><rect x="1096.3" y="1363.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1099.3" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.17%)</title><rect x="1097.4" y="1507.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1100.4" y="1518.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.09%)</title><rect x="1097.4" y="1491.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1100.4" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="1098.4" y="1491.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1101.4" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="1098.4" y="1475.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1101.4" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.09%)</title><rect x="1098.4" y="1459.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1101.4" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.09%)</title><rect x="1098.4" y="1443.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1101.4" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.09%)</title><rect x="1098.4" y="1427.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1101.4" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.09%)</title><rect x="1098.4" y="1411.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1101.4" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.09%)</title><rect x="1098.4" y="1395.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1101.4" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.09%)</title><rect x="1098.4" y="1379.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1101.4" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/LogContext$LocationAwareKafkaLogger.debug (1 samples, 0.09%)</title><rect x="1098.4" y="1363.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1101.4" y="1374.0"></text>
</g>
<g>
<title>start_thread (89 samples, 7.68%)</title><rect x="1099.4" y="1507.0" width="90.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1102.4" y="1518.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (89 samples, 7.68%)</title><rect x="1099.4" y="1491.0" width="90.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1102.4" y="1502.0">java_start..</text>
</g>
<g>
<title>GangWorker::loop() (24 samples, 2.07%)</title><rect x="1099.4" y="1475.0" width="24.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1102.4" y="1486.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (7 samples, 0.60%)</title><rect x="1099.4" y="1459.0" width="7.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1102.4" y="1470.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.60%)</title><rect x="1099.4" y="1443.0" width="7.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1102.4" y="1454.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (4 samples, 0.35%)</title><rect x="1099.4" y="1427.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1102.4" y="1438.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.26%)</title><rect x="1103.5" y="1427.0" width="3.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1106.5" y="1438.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (17 samples, 1.47%)</title><rect x="1106.5" y="1459.0" width="17.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1109.5" y="1470.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.43%)</title><rect x="1107.5" y="1443.0" width="5.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1110.5" y="1454.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.43%)</title><rect x="1107.5" y="1427.0" width="5.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1110.5" y="1438.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (5 samples, 0.43%)</title><rect x="1112.6" y="1443.0" width="5.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1115.6" y="1454.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.09%)</title><rect x="1112.6" y="1427.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1115.6" y="1438.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.09%)</title><rect x="1112.6" y="1411.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1115.6" y="1422.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.35%)</title><rect x="1113.6" y="1427.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1116.6" y="1438.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.17%)</title><rect x="1113.6" y="1411.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1116.6" y="1422.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.09%)</title><rect x="1114.7" y="1395.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1117.7" y="1406.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.09%)</title><rect x="1114.7" y="1379.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1117.7" y="1390.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.17%)</title><rect x="1115.7" y="1411.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1118.7" y="1422.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1116.7" y="1395.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1119.7" y="1406.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, CLDClosure*, RegisterMap const*, bool) (1 samples, 0.09%)</title><rect x="1116.7" y="1379.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1119.7" y="1390.0"></text>
</g>
<g>
<title>Method::mask_for(int, InterpreterOopMap*) (1 samples, 0.09%)</title><rect x="1116.7" y="1363.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1119.7" y="1374.0"></text>
</g>
<g>
<title>InstanceKlass::mask_for(methodHandle, int, InterpreterOopMap*) (1 samples, 0.09%)</title><rect x="1116.7" y="1347.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1119.7" y="1358.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (6 samples, 0.52%)</title><rect x="1117.7" y="1443.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1120.7" y="1454.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (6 samples, 0.52%)</title><rect x="1117.7" y="1427.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1120.7" y="1438.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (6 samples, 0.52%)</title><rect x="1117.7" y="1411.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1120.7" y="1422.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (6 samples, 0.52%)</title><rect x="1117.7" y="1395.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1120.7" y="1406.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (6 samples, 0.52%)</title><rect x="1117.7" y="1379.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1120.7" y="1390.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (6 samples, 0.52%)</title><rect x="1117.7" y="1363.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1120.7" y="1374.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (4 samples, 0.35%)</title><rect x="1119.7" y="1347.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1122.7" y="1358.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.09%)</title><rect x="1120.8" y="1331.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1123.8" y="1342.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.09%)</title><rect x="1121.8" y="1331.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1124.8" y="1342.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.09%)</title><rect x="1121.8" y="1315.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1124.8" y="1326.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.09%)</title><rect x="1122.8" y="1331.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1125.8" y="1342.0"></text>
</g>
<g>
<title>JavaThread::run() (62 samples, 5.35%)</title><rect x="1123.8" y="1475.0" width="63.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1126.8" y="1486.0">JavaThr..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (62 samples, 5.35%)</title><rect x="1123.8" y="1459.0" width="63.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1126.8" y="1470.0">JavaThr..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (62 samples, 5.35%)</title><rect x="1123.8" y="1443.0" width="63.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1126.8" y="1454.0">Compile..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (62 samples, 5.35%)</title><rect x="1123.8" y="1427.0" width="63.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1126.8" y="1438.0">Compile..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (61 samples, 5.26%)</title><rect x="1123.8" y="1411.0" width="62.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.8" y="1422.0">C2Comp..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (61 samples, 5.26%)</title><rect x="1123.8" y="1395.0" width="62.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1126.8" y="1406.0">Compil..</text>
</g>
<g>
<title>Compile::Code_Gen() (34 samples, 2.93%)</title><rect x="1123.8" y="1379.0" width="34.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1126.8" y="1390.0">Co..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.17%)</title><rect x="1123.8" y="1363.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1126.8" y="1374.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.17%)</title><rect x="1123.8" y="1347.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1126.8" y="1358.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.17%)</title><rect x="1123.8" y="1331.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1126.8" y="1342.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.09%)</title><rect x="1124.8" y="1315.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1127.8" y="1326.0"></text>
</g>
<g>
<title>compN_rReg_imm_klassNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.09%)</title><rect x="1124.8" y="1299.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1127.8" y="1310.0"></text>
</g>
<g>
<title>MacroAssembler::cmp_narrow_klass(RegisterImpl*, Klass*) (1 samples, 0.09%)</title><rect x="1124.8" y="1283.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1127.8" y="1294.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::maybe_find_index(Metadata*) (1 samples, 0.09%)</title><rect x="1124.8" y="1267.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1127.8" y="1278.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::maybe_initialize() (1 samples, 0.09%)</title><rect x="1124.8" y="1251.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1127.8" y="1262.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.09%)</title><rect x="1124.8" y="1235.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1127.8" y="1246.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1124.8" y="1219.0" width="1.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1127.8" y="1230.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.09%)</title><rect x="1125.9" y="1363.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1128.9" y="1374.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.09%)</title><rect x="1125.9" y="1347.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1128.9" y="1358.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.09%)</title><rect x="1126.9" y="1363.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1129.9" y="1374.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.09%)</title><rect x="1126.9" y="1347.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.9" y="1358.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.09%)</title><rect x="1126.9" y="1331.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1129.9" y="1342.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.35%)</title><rect x="1127.9" y="1363.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.9" y="1374.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.35%)</title><rect x="1127.9" y="1347.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.9" y="1358.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.09%)</title><rect x="1127.9" y="1331.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.9" y="1342.0"></text>
</g>
<g>
<title>PhaseCFG::latency_from_uses(Node*) (1 samples, 0.09%)</title><rect x="1127.9" y="1315.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.9" y="1326.0"></text>
</g>
<g>
<title>CallStaticJavaDirectNode::pipeline() const (1 samples, 0.09%)</title><rect x="1127.9" y="1299.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.9" y="1310.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1128.9" y="1331.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1131.9" y="1342.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1129.9" y="1331.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1132.9" y="1342.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.09%)</title><rect x="1129.9" y="1315.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1132.9" y="1326.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1130.9" y="1331.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1133.9" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (26 samples, 2.24%)</title><rect x="1132.0" y="1363.0" width="26.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.0" y="1374.0">P..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.09%)</title><rect x="1132.0" y="1347.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1135.0" y="1358.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.09%)</title><rect x="1133.0" y="1347.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.0" y="1358.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 0.35%)</title><rect x="1134.0" y="1347.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1137.0" y="1358.0"></text>
</g>
<g>
<title>PhaseChaitin::split_DEF(Node*, Block*, int, unsigned int, Node**, Node**, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.09%)</title><rect x="1137.1" y="1331.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1140.1" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (1 samples, 0.09%)</title><rect x="1137.1" y="1315.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1140.1" y="1326.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.09%)</title><rect x="1137.1" y="1299.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.1" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 0.52%)</title><rect x="1138.1" y="1347.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1141.1" y="1358.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1142.1" y="1331.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.1" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.09%)</title><rect x="1143.2" y="1331.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1146.2" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.09%)</title><rect x="1144.2" y="1347.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.2" y="1358.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.17%)</title><rect x="1145.2" y="1347.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.2" y="1358.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.09%)</title><rect x="1146.2" y="1331.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.2" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.09%)</title><rect x="1147.2" y="1347.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.2" y="1358.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 0.26%)</title><rect x="1148.3" y="1347.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.3" y="1358.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.09%)</title><rect x="1149.3" y="1331.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.3" y="1342.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.09%)</title><rect x="1149.3" y="1315.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.3" y="1326.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (1 samples, 0.09%)</title><rect x="1149.3" y="1299.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.3" y="1310.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.09%)</title><rect x="1150.3" y="1331.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.3" y="1342.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.09%)</title><rect x="1150.3" y="1315.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.3" y="1326.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.09%)</title><rect x="1150.3" y="1299.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.3" y="1310.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1150.3" y="1283.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.3" y="1294.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.09%)</title><rect x="1151.3" y="1347.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.3" y="1358.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.09%)</title><rect x="1152.3" y="1347.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.3" y="1358.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.09%)</title><rect x="1153.3" y="1347.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1156.3" y="1358.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.17%)</title><rect x="1154.4" y="1347.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.4" y="1358.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1156.4" y="1347.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1159.4" y="1358.0"></text>
</g>
<g>
<title>orL_rReg_castP2X_0Node::two_adr() const (1 samples, 0.09%)</title><rect x="1157.4" y="1347.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.4" y="1358.0"></text>
</g>
<g>
<title>Compile::Init(int) (1 samples, 0.09%)</title><rect x="1158.4" y="1379.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.4" y="1390.0"></text>
</g>
<g>
<title>bool ciMethod::has_option_value&lt;unsigned long&gt;(char const*, unsigned long&amp;) (1 samples, 0.09%)</title><rect x="1158.4" y="1363.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.4" y="1374.0"></text>
</g>
<g>
<title>Compile::Optimize() (21 samples, 1.81%)</title><rect x="1159.5" y="1379.0" width="21.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.5" y="1390.0">C..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.09%)</title><rect x="1159.5" y="1363.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.5" y="1374.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1159.5" y="1347.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.5" y="1358.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1159.5" y="1331.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.5" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1159.5" y="1315.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.5" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.09%)</title><rect x="1160.5" y="1363.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.5" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.09%)</title><rect x="1160.5" y="1347.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.5" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1160.5" y="1331.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.5" y="1342.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.09%)</title><rect x="1161.5" y="1363.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.5" y="1374.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1161.5" y="1347.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.5" y="1358.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (11 samples, 0.95%)</title><rect x="1162.5" y="1363.0" width="11.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.5" y="1374.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.17%)</title><rect x="1162.5" y="1347.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.5" y="1358.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.17%)</title><rect x="1164.5" y="1347.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.5" y="1358.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 0.52%)</title><rect x="1166.6" y="1347.0" width="6.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.6" y="1358.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 0.26%)</title><rect x="1169.6" y="1331.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.6" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 0.26%)</title><rect x="1169.6" y="1315.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.6" y="1326.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1172.7" y="1347.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.7" y="1358.0"></text>
</g>
<g>
<title>TypeTuple::singleton() const (1 samples, 0.09%)</title><rect x="1172.7" y="1331.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.7" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.35%)</title><rect x="1173.7" y="1363.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.7" y="1374.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.35%)</title><rect x="1173.7" y="1347.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.7" y="1358.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1173.7" y="1331.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.7" y="1342.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.09%)</title><rect x="1173.7" y="1315.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.7" y="1326.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1174.7" y="1331.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.7" y="1342.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1175.7" y="1331.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.7" y="1342.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.17%)</title><rect x="1175.7" y="1315.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.7" y="1326.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1175.7" y="1299.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.7" y="1310.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1175.7" y="1283.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.7" y="1294.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1175.7" y="1267.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.7" y="1278.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1175.7" y="1251.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.7" y="1262.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1175.7" y="1235.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.7" y="1246.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1175.7" y="1219.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.7" y="1230.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1175.7" y="1203.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.7" y="1214.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1175.7" y="1187.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.7" y="1198.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1175.7" y="1171.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.7" y="1182.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1175.7" y="1155.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.7" y="1166.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1175.7" y="1139.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.7" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1175.7" y="1123.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.7" y="1134.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1175.7" y="1107.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.7" y="1118.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1175.7" y="1091.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.7" y="1102.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1176.8" y="1203.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.8" y="1214.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1176.8" y="1187.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.8" y="1198.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.09%)</title><rect x="1177.8" y="1363.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.8" y="1374.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.09%)</title><rect x="1177.8" y="1347.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.8" y="1358.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1177.8" y="1331.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.8" y="1342.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1177.8" y="1315.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.8" y="1326.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.17%)</title><rect x="1178.8" y="1363.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.8" y="1374.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.09%)</title><rect x="1178.8" y="1347.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.8" y="1358.0"></text>
</g>
<g>
<title>PhaseMacroExpand::initialize_object(AllocateNode*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1178.8" y="1331.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.8" y="1342.0"></text>
</g>
<g>
<title>InitializeNode::complete_stores(Node*, Node*, Node*, long, Node*, PhaseGVN*) (1 samples, 0.09%)</title><rect x="1178.8" y="1315.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.8" y="1326.0"></text>
</g>
<g>
<title>ClearArrayNode::clear_memory(Node*, Node*, Node*, long, long, PhaseGVN*) (1 samples, 0.09%)</title><rect x="1178.8" y="1299.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.8" y="1310.0"></text>
</g>
<g>
<title>ClearArrayNode::clear_memory(Node*, Node*, Node*, long, Node*, PhaseGVN*) (1 samples, 0.09%)</title><rect x="1178.8" y="1283.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.8" y="1294.0"></text>
</g>
<g>
<title>PhaseTransform::zerocon(BasicType) (1 samples, 0.09%)</title><rect x="1178.8" y="1267.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.8" y="1278.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.09%)</title><rect x="1178.8" y="1251.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.8" y="1262.0"></text>
</g>
<g>
<title>ConNode::make(Compile*, Type const*) (1 samples, 0.09%)</title><rect x="1178.8" y="1235.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.8" y="1246.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_lock_node(LockNode*) (1 samples, 0.09%)</title><rect x="1179.8" y="1347.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.8" y="1358.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.09%)</title><rect x="1179.8" y="1331.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.8" y="1342.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1179.8" y="1315.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.8" y="1326.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1179.8" y="1299.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.8" y="1310.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.35%)</title><rect x="1180.8" y="1379.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.8" y="1390.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.35%)</title><rect x="1180.8" y="1363.0" width="4.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.8" y="1374.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.35%)</title><rect x="1180.8" y="1347.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.8" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.35%)</title><rect x="1180.8" y="1331.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.8" y="1342.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.35%)</title><rect x="1180.8" y="1315.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.8" y="1326.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1180.8" y="1299.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.8" y="1310.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1180.8" y="1283.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.8" y="1294.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1180.8" y="1267.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.8" y="1278.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1180.8" y="1251.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.8" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1180.8" y="1235.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.8" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1180.8" y="1219.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.8" y="1230.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.8" y="1203.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.8" y="1214.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.8" y="1187.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.8" y="1198.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.8" y="1171.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.8" y="1182.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.8" y="1155.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.8" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.8" y="1139.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.8" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.8" y="1123.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.8" y="1134.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.8" y="1107.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.8" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.8" y="1091.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.8" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.8" y="1075.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.8" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.8" y="1059.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.8" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.8" y="1043.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.8" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.8" y="1027.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.8" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.8" y="1011.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.8" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.8" y="995.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.8" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.8" y="979.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.8" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.8" y="963.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.8" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.8" y="947.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.8" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.8" y="931.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.8" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.8" y="915.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.8" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.8" y="899.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.8" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.8" y="883.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.8" y="867.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.8" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.8" y="851.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.8" y="835.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.8" y="819.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.8" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.8" y="803.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.8" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.8" y="787.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.8" y="771.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.8" y="755.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.8" y="739.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.8" y="723.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.8" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.8" y="707.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.8" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.8" y="691.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.8" y="675.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.8" y="659.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.8" y="643.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.8" y="627.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.8" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.8" y="611.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.8" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.8" y="595.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.8" y="579.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.8" y="563.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.8" y="547.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.8" y="531.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.8" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.8" y="515.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.8" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.8" y="499.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.8" y="483.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.8" y="467.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.8" y="451.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.8" y="435.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.8" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.8" y="419.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.8" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.8" y="403.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.8" y="387.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.8" y="371.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.8" y="355.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.8" y="339.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.8" y="350.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1180.8" y="323.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.8" y="334.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1180.8" y="307.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.8" y="318.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1180.8" y="291.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.8" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1180.8" y="275.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.8" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1180.8" y="259.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.8" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1180.8" y="243.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.8" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1180.8" y="227.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.8" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1180.8" y="211.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.8" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="1180.8" y="195.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.8" y="206.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1180.8" y="179.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.8" y="190.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1180.8" y="163.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.8" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1180.8" y="147.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.8" y="158.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1180.8" y="131.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.8" y="142.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.09%)</title><rect x="1180.8" y="115.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.8" y="126.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call(CallInfo&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.09%)</title><rect x="1180.8" y="99.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.8" y="110.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.09%)</title><rect x="1180.8" y="83.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.8" y="94.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="1180.8" y="67.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.8" y="78.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="1180.8" y="51.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.8" y="62.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::push(Metadata* const&amp;) (1 samples, 0.09%)</title><rect x="1180.8" y="35.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.8" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1181.9" y="1203.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.9" y="1214.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1181.9" y="1187.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.9" y="1198.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.09%)</title><rect x="1181.9" y="1171.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.9" y="1182.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.09%)</title><rect x="1181.9" y="1155.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.9" y="1166.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1181.9" y="1139.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.9" y="1150.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.09%)</title><rect x="1181.9" y="1123.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.9" y="1134.0"></text>
</g>
<g>
<title>TypeNarrowPtr::eq(Type const*) const (1 samples, 0.09%)</title><rect x="1181.9" y="1107.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.9" y="1118.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.9" y="1283.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.9" y="1294.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.9" y="1267.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.9" y="1278.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.9" y="1251.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.9" y="1262.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.9" y="1235.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.9" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.9" y="1219.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.9" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.9" y="1203.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.9" y="1214.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.9" y="1187.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.9" y="1198.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1182.9" y="1171.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.9" y="1182.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1182.9" y="1155.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.9" y="1166.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1182.9" y="1139.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.9" y="1150.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1182.9" y="1123.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.9" y="1134.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.09%)</title><rect x="1182.9" y="1107.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.9" y="1118.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call(CallInfo&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.09%)</title><rect x="1182.9" y="1091.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.9" y="1102.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_special_method(CallInfo&amp;, methodHandle, KlassHandle, KlassHandle, bool, Thread*) (1 samples, 0.09%)</title><rect x="1182.9" y="1075.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.9" y="1086.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.09%)</title><rect x="1183.9" y="1299.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.9" y="1310.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.09%)</title><rect x="1183.9" y="1283.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.9" y="1294.0"></text>
</g>
<g>
<title>GraphKit::maybe_cast_profiled_receiver(Node*, ciKlass*, ciKlass*, bool) (1 samples, 0.09%)</title><rect x="1183.9" y="1267.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.9" y="1278.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.09%)</title><rect x="1183.9" y="1251.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.9" y="1262.0"></text>
</g>
<g>
<title>TypeOopPtr::singleton() const (1 samples, 0.09%)</title><rect x="1183.9" y="1235.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.9" y="1246.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (1 samples, 0.09%)</title><rect x="1184.9" y="1379.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.9" y="1390.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1184.9" y="1363.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.9" y="1374.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.09%)</title><rect x="1184.9" y="1347.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.9" y="1358.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1185.9" y="1411.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.9" y="1422.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.09%)</title><rect x="1185.9" y="1395.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.9" y="1406.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.09%)</title><rect x="1185.9" y="1379.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.9" y="1390.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.09%)</title><rect x="1185.9" y="1363.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.9" y="1374.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.09%)</title><rect x="1185.9" y="1347.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.9" y="1358.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.09%)</title><rect x="1185.9" y="1331.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.9" y="1342.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.09%)</title><rect x="1185.9" y="1315.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.9" y="1326.0"></text>
</g>
<g>
<title>LIRGenerator::do_Invoke(Invoke*) (1 samples, 0.09%)</title><rect x="1185.9" y="1299.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.9" y="1310.0"></text>
</g>
<g>
<title>LIRGenerator::state_for(Instruction*, ValueStack*, bool) (1 samples, 0.09%)</title><rect x="1185.9" y="1283.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.9" y="1294.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.09%)</title><rect x="1185.9" y="1267.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.9" y="1278.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.09%)</title><rect x="1185.9" y="1251.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.9" y="1262.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.26%)</title><rect x="1186.9" y="1475.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.9" y="1486.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.26%)</title><rect x="1186.9" y="1459.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.9" y="1470.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (3 samples, 0.26%)</title><rect x="1186.9" y="1443.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.9" y="1454.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.09%)</title><rect x="1189.0" y="1427.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.0" y="1438.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.09%)</title><rect x="1189.0" y="1411.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.0" y="1422.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1189.0" y="1395.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.0" y="1406.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1189.0" y="1379.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.0" y="1390.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="1189.0" y="1363.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.0" y="1374.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="1189.0" y="1347.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.0" y="1358.0"></text>
</g>
</g>
</svg>
