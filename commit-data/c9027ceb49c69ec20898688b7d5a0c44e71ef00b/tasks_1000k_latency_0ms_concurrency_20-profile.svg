<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1238" onload="init(evt)" viewBox="0 0 1200 1238" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1221"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1221"> </text>
<g id="frames">
<g>
<title>all (1,212 samples, 100.00%)</title><rect x="10.0" y="1187.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1198.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (274 samples, 22.61%)</title><rect x="10.0" y="1171.0" width="266.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1182.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (273 samples, 22.52%)</title><rect x="10.0" y="1155.0" width="265.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1166.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (6 samples, 0.50%)</title><rect x="10.0" y="1139.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (6 samples, 0.50%)</title><rect x="10.0" y="1123.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$264/1818528943.accept (5 samples, 0.41%)</title><rect x="11.0" y="1107.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.0" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (5 samples, 0.41%)</title><rect x="11.0" y="1091.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.33%)</title><rect x="11.9" y="1075.0" width="3.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.9" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.25%)</title><rect x="12.9" y="1059.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.9" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (5 samples, 0.41%)</title><rect x="15.8" y="1139.0" width="4.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="18.8" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (5 samples, 0.41%)</title><rect x="15.8" y="1123.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="18.8" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.characteristics (1 samples, 0.08%)</title><rect x="15.8" y="1107.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.8" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.33%)</title><rect x="16.8" y="1107.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.8" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.33%)</title><rect x="16.8" y="1091.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.8" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (4 samples, 0.33%)</title><rect x="16.8" y="1075.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.8" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.25%)</title><rect x="17.8" y="1059.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.8" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.25%)</title><rect x="17.8" y="1043.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.8" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.17%)</title><rect x="17.8" y="1027.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.8" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="18.8" y="1011.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.8" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="19.7" y="1027.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.7" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="19.7" y="1011.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="22.7" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="19.7" y="995.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="22.7" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.08%)</title><rect x="20.7" y="1139.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.7" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.08%)</title><rect x="20.7" y="1123.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="23.7" y="1134.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (195 samples, 16.09%)</title><rect x="21.7" y="1139.0" width="189.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.7" y="1150.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/1316174601.accept (183 samples, 15.10%)</title><rect x="22.7" y="1123.0" width="178.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="25.7" y="1134.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$72 (183 samples, 15.10%)</title><rect x="22.7" y="1107.0" width="178.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.7" y="1118.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (130 samples, 10.73%)</title><rect x="24.6" y="1091.0" width="126.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="27.6" y="1102.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (130 samples, 10.73%)</title><rect x="24.6" y="1075.0" width="126.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.6" y="1086.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (130 samples, 10.73%)</title><rect x="24.6" y="1059.0" width="126.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="27.6" y="1070.0">com/linecorp/dec..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.17%)</title><rect x="33.4" y="1043.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="36.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (117 samples, 9.65%)</title><rect x="35.3" y="1043.0" width="113.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="38.3" y="1054.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (117 samples, 9.65%)</title><rect x="35.3" y="1027.0" width="113.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="38.3" y="1038.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (117 samples, 9.65%)</title><rect x="35.3" y="1011.0" width="113.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="38.3" y="1022.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (86 samples, 7.10%)</title><rect x="35.3" y="995.0" width="83.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="38.3" y="1006.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (86 samples, 7.10%)</title><rect x="35.3" y="979.0" width="83.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="38.3" y="990.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (86 samples, 7.10%)</title><rect x="35.3" y="963.0" width="83.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="38.3" y="974.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (86 samples, 7.10%)</title><rect x="35.3" y="947.0" width="83.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="38.3" y="958.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (86 samples, 7.10%)</title><rect x="35.3" y="931.0" width="83.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="38.3" y="942.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (57 samples, 4.70%)</title><rect x="63.5" y="915.0" width="55.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="66.5" y="926.0">sun/m..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="66.5" y="899.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="69.5" y="910.0"></text>
</g>
<g>
<title>Unsafe_Unpark (47 samples, 3.88%)</title><rect x="67.4" y="899.0" width="45.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="70.4" y="910.0">Unsa..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.17%)</title><rect x="67.4" y="883.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="70.4" y="894.0"></text>
</g>
<g>
<title>Parker::unpark() (3 samples, 0.25%)</title><rect x="69.4" y="883.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="72.4" y="894.0"></text>
</g>
<g>
<title>__pthread_cond_signal (29 samples, 2.39%)</title><rect x="72.3" y="883.0" width="28.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="75.3" y="894.0">__..</text>
</g>
<g>
<title>_init (1 samples, 0.08%)</title><rect x="100.5" y="883.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="103.5" y="894.0"></text>
</g>
<g>
<title>pthread_mutex_lock (12 samples, 0.99%)</title><rect x="101.5" y="883.0" width="11.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="104.5" y="894.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.25%)</title><rect x="113.2" y="899.0" width="2.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="116.2" y="910.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.17%)</title><rect x="116.1" y="899.0" width="2.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="119.1" y="910.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.08%)</title><rect x="118.1" y="899.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="121.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.08%)</title><rect x="119.0" y="995.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="122.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.08%)</title><rect x="119.0" y="979.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="122.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.08%)</title><rect x="119.0" y="963.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="122.0" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (30 samples, 2.48%)</title><rect x="120.0" y="995.0" width="29.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="123.0" y="1006.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (30 samples, 2.48%)</title><rect x="120.0" y="979.0" width="29.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="123.0" y="990.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (30 samples, 2.48%)</title><rect x="120.0" y="963.0" width="29.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="123.0" y="974.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (30 samples, 2.48%)</title><rect x="120.0" y="947.0" width="29.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="123.0" y="958.0">ja..</text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="149.2" y="1043.0" width="2.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="152.2" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (3 samples, 0.25%)</title><rect x="151.2" y="1091.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="154.2" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.25%)</title><rect x="151.2" y="1075.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="154.2" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.25%)</title><rect x="151.2" y="1059.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="154.2" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (48 samples, 3.96%)</title><rect x="154.1" y="1091.0" width="46.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="157.1" y="1102.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (48 samples, 3.96%)</title><rect x="154.1" y="1075.0" width="46.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="157.1" y="1086.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (17 samples, 1.40%)</title><rect x="180.4" y="1059.0" width="16.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="183.4" y="1070.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (7 samples, 0.58%)</title><rect x="184.3" y="1043.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="187.3" y="1054.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (7 samples, 0.58%)</title><rect x="184.3" y="1027.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="187.3" y="1038.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 0.58%)</title><rect x="184.3" y="1011.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="187.3" y="1022.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.25%)</title><rect x="188.2" y="995.0" width="2.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="191.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.50%)</title><rect x="191.1" y="1043.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="194.1" y="1054.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="196.9" y="1059.0" width="1.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="199.9" y="1070.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.25%)</title><rect x="197.9" y="1059.0" width="2.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="200.9" y="1070.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.17%)</title><rect x="200.8" y="1123.0" width="2.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="203.8" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.08%)</title><rect x="202.8" y="1123.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="205.8" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.08%)</title><rect x="202.8" y="1107.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="205.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (2 samples, 0.17%)</title><rect x="203.7" y="1123.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="206.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (2 samples, 0.17%)</title><rect x="203.7" y="1107.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="206.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (2 samples, 0.17%)</title><rect x="203.7" y="1091.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="206.7" y="1102.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="204.7" y="1075.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="207.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.33%)</title><rect x="205.7" y="1123.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="208.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.33%)</title><rect x="205.7" y="1107.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="208.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.33%)</title><rect x="205.7" y="1091.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="208.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.33%)</title><rect x="205.7" y="1075.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="208.7" y="1086.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.08%)</title><rect x="208.6" y="1059.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="211.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (2 samples, 0.17%)</title><rect x="209.6" y="1123.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="212.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.17%)</title><rect x="209.6" y="1107.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="212.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (66 samples, 5.45%)</title><rect x="211.5" y="1139.0" width="64.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="214.5" y="1150.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (66 samples, 5.45%)</title><rect x="211.5" y="1123.0" width="64.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="214.5" y="1134.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquireAndEnsureOpen (1 samples, 0.08%)</title><rect x="211.5" y="1107.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="214.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (36 samples, 2.97%)</title><rect x="212.5" y="1107.0" width="35.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="215.5" y="1118.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (35 samples, 2.89%)</title><rect x="213.5" y="1091.0" width="34.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="216.5" y="1102.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (35 samples, 2.89%)</title><rect x="213.5" y="1075.0" width="34.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="216.5" y="1086.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (32 samples, 2.64%)</title><rect x="213.5" y="1059.0" width="31.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="216.5" y="1070.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (32 samples, 2.64%)</title><rect x="213.5" y="1043.0" width="31.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="216.5" y="1054.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (17 samples, 1.40%)</title><rect x="216.4" y="1027.0" width="16.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="219.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (7 samples, 0.58%)</title><rect x="226.1" y="1011.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="229.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (7 samples, 0.58%)</title><rect x="226.1" y="995.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="229.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (7 samples, 0.58%)</title><rect x="226.1" y="979.0" width="6.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="229.1" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (7 samples, 0.58%)</title><rect x="226.1" y="963.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="229.1" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (7 samples, 0.58%)</title><rect x="226.1" y="947.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="229.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (7 samples, 0.58%)</title><rect x="226.1" y="931.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="229.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (7 samples, 0.58%)</title><rect x="226.1" y="915.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="229.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (12 samples, 0.99%)</title><rect x="233.0" y="1027.0" width="11.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="236.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (12 samples, 0.99%)</title><rect x="233.0" y="1011.0" width="11.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="236.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (6 samples, 0.50%)</title><rect x="233.0" y="995.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.0" y="1006.0"></text>
</g>
<g>
<title>java/util/Optional.of (6 samples, 0.50%)</title><rect x="233.0" y="979.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="236.0" y="990.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="237.8" y="963.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="240.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (6 samples, 0.50%)</title><rect x="238.8" y="995.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="241.8" y="1006.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (6 samples, 0.50%)</title><rect x="238.8" y="979.0" width="5.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="241.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.17%)</title><rect x="244.6" y="1059.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="247.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.17%)</title><rect x="244.6" y="1043.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="247.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.08%)</title><rect x="244.6" y="1027.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="247.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="244.6" y="1011.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="247.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="245.6" y="1027.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="248.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="245.6" y="1011.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="248.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="245.6" y="995.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="248.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.08%)</title><rect x="246.6" y="1059.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="249.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (12 samples, 0.99%)</title><rect x="247.6" y="1107.0" width="11.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="250.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (9 samples, 0.74%)</title><rect x="247.6" y="1091.0" width="8.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="250.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (7 samples, 0.58%)</title><rect x="247.6" y="1075.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="250.6" y="1086.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.08%)</title><rect x="248.5" y="1059.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="251.5" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.08%)</title><rect x="248.5" y="1043.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="251.5" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.08%)</title><rect x="248.5" y="1027.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="251.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.08%)</title><rect x="248.5" y="1011.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="251.5" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="249.5" y="1059.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="252.5" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="249.5" y="1043.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="252.5" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="249.5" y="1027.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="252.5" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="249.5" y="1011.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="252.5" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="249.5" y="995.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="252.5" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="249.5" y="979.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="252.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (3 samples, 0.25%)</title><rect x="250.5" y="1059.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="253.5" y="1070.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (3 samples, 0.25%)</title><rect x="250.5" y="1043.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="253.5" y="1054.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (3 samples, 0.25%)</title><rect x="250.5" y="1027.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="253.5" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (1 samples, 0.08%)</title><rect x="250.5" y="1011.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="253.5" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (1 samples, 0.08%)</title><rect x="250.5" y="995.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="253.5" y="1006.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.17%)</title><rect x="251.5" y="1011.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="254.5" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.17%)</title><rect x="251.5" y="995.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="254.5" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="251.5" y="979.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="254.5" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.08%)</title><rect x="251.5" y="963.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="254.5" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.08%)</title><rect x="252.4" y="979.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="255.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.08%)</title><rect x="253.4" y="1059.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="256.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.08%)</title><rect x="253.4" y="1043.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="256.4" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="253.4" y="1027.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="256.4" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="253.4" y="1011.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="256.4" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.08%)</title><rect x="253.4" y="995.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="256.4" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.08%)</title><rect x="253.4" y="979.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="256.4" y="990.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.08%)</title><rect x="253.4" y="963.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="256.4" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.08%)</title><rect x="253.4" y="947.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="256.4" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="253.4" y="931.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="256.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.17%)</title><rect x="254.4" y="1075.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="257.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (2 samples, 0.17%)</title><rect x="254.4" y="1059.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="257.4" y="1070.0"></text>
</g>
<g>
<title>java/util/Collection.stream (2 samples, 0.17%)</title><rect x="254.4" y="1043.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="257.4" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (2 samples, 0.17%)</title><rect x="254.4" y="1027.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.4" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (2 samples, 0.17%)</title><rect x="254.4" y="1011.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="257.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (3 samples, 0.25%)</title><rect x="256.3" y="1091.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="259.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (3 samples, 0.25%)</title><rect x="256.3" y="1075.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="259.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (3 samples, 0.25%)</title><rect x="256.3" y="1059.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="259.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (3 samples, 0.25%)</title><rect x="256.3" y="1043.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="259.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (3 samples, 0.25%)</title><rect x="256.3" y="1027.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="259.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (3 samples, 0.25%)</title><rect x="256.3" y="1011.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="259.3" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.25%)</title><rect x="256.3" y="995.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="259.3" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.25%)</title><rect x="256.3" y="979.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="259.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.08%)</title><rect x="259.2" y="1107.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="262.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.hasInFlightRequests (1 samples, 0.08%)</title><rect x="259.2" y="1091.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="262.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.isEmpty (1 samples, 0.08%)</title><rect x="259.2" y="1075.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="262.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (6 samples, 0.50%)</title><rect x="260.2" y="1107.0" width="5.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="263.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (5 samples, 0.41%)</title><rect x="260.2" y="1091.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="263.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (5 samples, 0.41%)</title><rect x="260.2" y="1075.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="263.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (5 samples, 0.41%)</title><rect x="260.2" y="1059.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="263.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.maybeRegisterConnectionMetrics (1 samples, 0.08%)</title><rect x="260.2" y="1043.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="263.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (4 samples, 0.33%)</title><rect x="261.2" y="1043.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="264.2" y="1054.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.08%)</title><rect x="261.2" y="1027.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="264.2" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.08%)</title><rect x="261.2" y="1011.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="264.2" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="261.2" y="995.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="264.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (3 samples, 0.25%)</title><rect x="262.2" y="1027.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="265.2" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="262.2" y="1011.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="265.2" y="1022.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="262.2" y="995.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="265.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.17%)</title><rect x="263.1" y="1011.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="266.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.17%)</title><rect x="263.1" y="995.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="266.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.17%)</title><rect x="263.1" y="979.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="266.1" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.17%)</title><rect x="263.1" y="963.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="266.1" y="974.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="263.1" y="947.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="266.1" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.08%)</title><rect x="264.1" y="947.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="267.1" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.08%)</title><rect x="264.1" y="931.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="267.1" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.08%)</title><rect x="264.1" y="915.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="267.1" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.08%)</title><rect x="264.1" y="899.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="267.1" y="910.0"></text>
</g>
<g>
<title>__read (1 samples, 0.08%)</title><rect x="264.1" y="883.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="267.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.08%)</title><rect x="265.1" y="1091.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="268.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.08%)</title><rect x="265.1" y="1075.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="268.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="265.1" y="1059.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="268.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="265.1" y="1043.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="268.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.08%)</title><rect x="265.1" y="1027.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="268.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.08%)</title><rect x="265.1" y="1011.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="268.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.08%)</title><rect x="265.1" y="995.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="268.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (7 samples, 0.58%)</title><rect x="266.1" y="1107.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="269.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (7 samples, 0.58%)</title><rect x="266.1" y="1091.0" width="6.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="269.1" y="1102.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.25%)</title><rect x="267.0" y="1075.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="270.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$256/1133137377.accept (3 samples, 0.25%)</title><rect x="267.0" y="1059.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="270.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (3 samples, 0.25%)</title><rect x="267.0" y="1043.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="270.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.17%)</title><rect x="267.0" y="1027.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="270.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (2 samples, 0.17%)</title><rect x="267.0" y="1011.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="270.0" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="267.0" y="995.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="270.0" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="267.0" y="979.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="270.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.08%)</title><rect x="268.0" y="995.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="271.0" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="268.0" y="979.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="271.0" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="268.0" y="963.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="271.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.08%)</title><rect x="269.0" y="1027.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="272.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.08%)</title><rect x="269.0" y="1011.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="272.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.08%)</title><rect x="269.0" y="995.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="272.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.25%)</title><rect x="270.0" y="1075.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="273.0" y="1086.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.08%)</title><rect x="270.9" y="1059.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="273.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.08%)</title><rect x="271.9" y="1059.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="274.9" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="271.9" y="1043.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="274.9" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="271.9" y="1027.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="274.9" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="271.9" y="1011.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="274.9" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="271.9" y="995.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="274.9" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="271.9" y="979.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="274.9" y="990.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="271.9" y="963.0" width="1.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="274.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (2 samples, 0.17%)</title><rect x="272.9" y="1107.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="275.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="272.9" y="1091.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="275.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="272.9" y="1075.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="275.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="272.9" y="1059.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="275.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (2 samples, 0.17%)</title><rect x="272.9" y="1043.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="275.9" y="1054.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedValueIterator.next (1 samples, 0.08%)</title><rect x="273.8" y="1027.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="276.8" y="1038.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.08%)</title><rect x="273.8" y="1011.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="276.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.08%)</title><rect x="274.8" y="1107.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="277.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="274.8" y="1091.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="277.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="274.8" y="1075.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="277.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="274.8" y="1059.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="277.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="274.8" y="1043.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="277.8" y="1054.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="274.8" y="1027.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="277.8" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.08%)</title><rect x="275.8" y="1155.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="278.8" y="1166.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.08%)</title><rect x="275.8" y="1139.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="278.8" y="1150.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.08%)</title><rect x="275.8" y="1123.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="278.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/Thread.run (828 samples, 68.32%)</title><rect x="276.8" y="1171.0" width="806.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="279.8" y="1182.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (827 samples, 68.23%)</title><rect x="277.7" y="1155.0" width="805.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="280.7" y="1166.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (827 samples, 68.23%)</title><rect x="277.7" y="1139.0" width="805.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="280.7" y="1150.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/65034601.run (578 samples, 47.69%)</title><rect x="279.7" y="1123.0" width="562.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="282.7" y="1134.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$279/65034601.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56 (578 samples, 47.69%)</title><rect x="279.7" y="1107.0" width="562.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.7" y="1118.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$56</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (577 samples, 47.61%)</title><rect x="280.7" y="1091.0" width="561.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="283.7" y="1102.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (563 samples, 46.45%)</title><rect x="280.7" y="1075.0" width="548.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="283.7" y="1086.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="290.4" y="1059.0" width="1.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="293.4" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.schedule (2 samples, 0.17%)</title><rect x="292.3" y="1059.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="295.3" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler.waitOnScheduledTime (2 samples, 0.17%)</title><rect x="292.3" y="1043.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="295.3" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ExecutionScheduler$$Lambda$197/1814896437.get (2 samples, 0.17%)</title><rect x="292.3" y="1027.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="295.3" y="1038.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.17%)</title><rect x="292.3" y="1011.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="295.3" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="292.3" y="995.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="295.3" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.17%)</title><rect x="292.3" y="979.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="295.3" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.17%)</title><rect x="292.3" y="963.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="295.3" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="293.3" y="947.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="296.3" y="958.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="293.3" y="931.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="296.3" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (181 samples, 14.93%)</title><rect x="294.3" y="1059.0" width="176.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="297.3" y="1070.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/867148091.extract (181 samples, 14.93%)</title><rect x="294.3" y="1043.0" width="176.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="297.3" y="1054.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (181 samples, 14.93%)</title><rect x="294.3" y="1027.0" width="176.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="297.3" y="1038.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (181 samples, 14.93%)</title><rect x="294.3" y="1011.0" width="176.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="297.3" y="1022.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (181 samples, 14.93%)</title><rect x="294.3" y="995.0" width="176.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="297.3" y="1006.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (181 samples, 14.93%)</title><rect x="294.3" y="979.0" width="176.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="297.3" y="990.0">com/fasterxml/jackson/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (67 samples, 5.53%)</title><rect x="294.3" y="963.0" width="65.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="297.3" y="974.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (37 samples, 3.05%)</title><rect x="294.3" y="947.0" width="36.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="297.3" y="958.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (37 samples, 3.05%)</title><rect x="294.3" y="931.0" width="36.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="297.3" y="942.0">com..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.33%)</title><rect x="321.6" y="915.0" width="3.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="324.6" y="926.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.25%)</title><rect x="322.5" y="899.0" width="2.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="325.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (5 samples, 0.41%)</title><rect x="325.4" y="915.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="328.4" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.41%)</title><rect x="325.4" y="899.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="328.4" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 0.41%)</title><rect x="325.4" y="883.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="328.4" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.41%)</title><rect x="325.4" y="867.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="328.4" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (5 samples, 0.41%)</title><rect x="325.4" y="851.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="328.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (30 samples, 2.48%)</title><rect x="330.3" y="947.0" width="29.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="333.3" y="958.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="330.3" y="931.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="333.3" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="330.3" y="915.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="333.3" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="330.3" y="899.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="333.3" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="330.3" y="883.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="333.3" y="894.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="330.3" y="867.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="333.3" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="330.3" y="851.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="333.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (4 samples, 0.33%)</title><rect x="331.3" y="931.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="334.3" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (25 samples, 2.06%)</title><rect x="335.2" y="931.0" width="24.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="338.2" y="942.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 0.25%)</title><rect x="338.1" y="915.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="341.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (12 samples, 0.99%)</title><rect x="341.0" y="915.0" width="11.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="344.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (12 samples, 0.99%)</title><rect x="341.0" y="899.0" width="11.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="344.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (3 samples, 0.25%)</title><rect x="343.0" y="883.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="346.0" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.25%)</title><rect x="343.0" y="867.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="346.0" y="878.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.25%)</title><rect x="343.0" y="851.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="346.0" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.17%)</title><rect x="343.0" y="835.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="346.0" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="343.0" y="819.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="346.0" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="343.0" y="803.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="346.0" y="814.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="343.0" y="787.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="346.0" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="343.0" y="771.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="346.0" y="782.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="343.0" y="755.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="346.0" y="766.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.08%)</title><rect x="343.0" y="739.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="346.0" y="750.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.08%)</title><rect x="343.0" y="723.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="346.0" y="734.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.08%)</title><rect x="343.9" y="819.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="346.9" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.08%)</title><rect x="344.9" y="835.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="347.9" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (4 samples, 0.33%)</title><rect x="345.9" y="883.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="348.9" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.08%)</title><rect x="348.8" y="867.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="351.8" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (3 samples, 0.25%)</title><rect x="349.8" y="883.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="352.8" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="351.7" y="867.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="354.7" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="351.7" y="851.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="354.7" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="351.7" y="835.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="354.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (6 samples, 0.50%)</title><rect x="352.7" y="915.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="355.7" y="926.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.08%)</title><rect x="358.5" y="915.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="361.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (101 samples, 8.33%)</title><rect x="359.5" y="963.0" width="98.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="362.5" y="974.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.17%)</title><rect x="359.5" y="947.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="362.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (2 samples, 0.17%)</title><rect x="359.5" y="931.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="362.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (1 samples, 0.08%)</title><rect x="359.5" y="915.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="362.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (1 samples, 0.08%)</title><rect x="360.5" y="915.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="363.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (7 samples, 0.58%)</title><rect x="361.5" y="947.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="364.5" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.58%)</title><rect x="361.5" y="931.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="364.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="364.4" y="915.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="367.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (2 samples, 0.17%)</title><rect x="365.4" y="915.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="368.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (1 samples, 0.08%)</title><rect x="367.3" y="915.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="370.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (10 samples, 0.83%)</title><rect x="368.3" y="947.0" width="9.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="371.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 0.58%)</title><rect x="368.3" y="931.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="371.3" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (7 samples, 0.58%)</title><rect x="368.3" y="915.0" width="6.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="371.3" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (5 samples, 0.41%)</title><rect x="370.2" y="899.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="373.2" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="373.2" y="883.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="376.2" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="373.2" y="867.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="376.2" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="373.2" y="851.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="376.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="374.1" y="883.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="377.1" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (3 samples, 0.25%)</title><rect x="375.1" y="931.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="378.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (10 samples, 0.83%)</title><rect x="378.0" y="947.0" width="9.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="381.0" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (10 samples, 0.83%)</title><rect x="378.0" y="931.0" width="9.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="381.0" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="379.0" y="915.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="382.0" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.17%)</title><rect x="379.0" y="899.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="382.0" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.17%)</title><rect x="379.0" y="883.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="382.0" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="380.0" y="867.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="383.0" y="878.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="380.0" y="851.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="383.0" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="380.9" y="915.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="383.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (6 samples, 0.50%)</title><rect x="381.9" y="915.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="384.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (6 samples, 0.50%)</title><rect x="381.9" y="899.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="384.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (6 samples, 0.50%)</title><rect x="381.9" y="883.0" width="5.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="384.9" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (72 samples, 5.94%)</title><rect x="387.8" y="947.0" width="70.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="390.8" y="958.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (19 samples, 1.57%)</title><rect x="388.7" y="931.0" width="18.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="391.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.08%)</title><rect x="395.5" y="915.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="398.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.25%)</title><rect x="396.5" y="915.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="399.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.25%)</title><rect x="396.5" y="899.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="399.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.25%)</title><rect x="396.5" y="883.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="399.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.17%)</title><rect x="399.4" y="915.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="402.4" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.17%)</title><rect x="399.4" y="899.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="402.4" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (6 samples, 0.50%)</title><rect x="401.4" y="915.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="404.4" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (52 samples, 4.29%)</title><rect x="407.2" y="931.0" width="50.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="410.2" y="942.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (50 samples, 4.13%)</title><rect x="409.2" y="915.0" width="48.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="412.2" y="926.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (50 samples, 4.13%)</title><rect x="409.2" y="899.0" width="48.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="412.2" y="910.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (20 samples, 1.65%)</title><rect x="413.1" y="883.0" width="19.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="416.1" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.08%)</title><rect x="415.0" y="867.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="418.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (11 samples, 0.91%)</title><rect x="416.0" y="867.0" width="10.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="419.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (11 samples, 0.91%)</title><rect x="416.0" y="851.0" width="10.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="419.0" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (11 samples, 0.91%)</title><rect x="416.0" y="835.0" width="10.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="419.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (7 samples, 0.58%)</title><rect x="419.9" y="819.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="422.9" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (5 samples, 0.41%)</title><rect x="421.8" y="803.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="424.8" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.08%)</title><rect x="425.7" y="787.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="428.7" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (1 samples, 0.08%)</title><rect x="425.7" y="771.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="428.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (5 samples, 0.41%)</title><rect x="426.7" y="867.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="429.7" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (5 samples, 0.41%)</title><rect x="426.7" y="851.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="429.7" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.25%)</title><rect x="428.6" y="835.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="431.6" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.08%)</title><rect x="431.6" y="867.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="434.6" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (9 samples, 0.74%)</title><rect x="432.5" y="883.0" width="8.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="435.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (6 samples, 0.50%)</title><rect x="435.5" y="867.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="438.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.50%)</title><rect x="435.5" y="851.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="438.5" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.50%)</title><rect x="435.5" y="835.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="438.5" y="846.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (6 samples, 0.50%)</title><rect x="435.5" y="819.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="438.5" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (11 samples, 0.91%)</title><rect x="441.3" y="883.0" width="10.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="444.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (11 samples, 0.91%)</title><rect x="441.3" y="867.0" width="10.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="444.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (11 samples, 0.91%)</title><rect x="441.3" y="851.0" width="10.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="444.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (11 samples, 0.91%)</title><rect x="441.3" y="835.0" width="10.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="444.3" y="846.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (11 samples, 0.91%)</title><rect x="441.3" y="819.0" width="10.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="444.3" y="830.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (11 samples, 0.91%)</title><rect x="441.3" y="803.0" width="10.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="444.3" y="814.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (3 samples, 0.25%)</title><rect x="449.1" y="787.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="452.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 0.25%)</title><rect x="452.0" y="883.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="455.0" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.25%)</title><rect x="452.0" y="867.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="455.0" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.25%)</title><rect x="452.0" y="851.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="455.0" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (3 samples, 0.25%)</title><rect x="454.9" y="883.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="457.9" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (3 samples, 0.25%)</title><rect x="454.9" y="867.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="457.9" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (13 samples, 1.07%)</title><rect x="457.9" y="963.0" width="12.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="460.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (13 samples, 1.07%)</title><rect x="457.9" y="947.0" width="12.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="460.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (13 samples, 1.07%)</title><rect x="457.9" y="931.0" width="12.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="460.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.08%)</title><rect x="458.8" y="915.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="461.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (2 samples, 0.17%)</title><rect x="459.8" y="915.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="462.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (4 samples, 0.33%)</title><rect x="461.7" y="915.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="464.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (5 samples, 0.41%)</title><rect x="465.6" y="915.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="468.6" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.41%)</title><rect x="465.6" y="899.0" width="4.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="468.6" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (330 samples, 27.23%)</title><rect x="470.5" y="1059.0" width="321.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="473.5" y="1070.0">com/linecorp/decaton/processor/runtime/Proc..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.08%)</title><rect x="471.5" y="1043.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="474.5" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.taskData (2 samples, 0.17%)</title><rect x="472.5" y="1043.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="475.5" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="473.4" y="1027.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="476.4" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (56 samples, 4.62%)</title><rect x="474.4" y="1043.0" width="54.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="477.4" y="1054.0">com/l..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (56 samples, 4.62%)</title><rect x="474.4" y="1027.0" width="54.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="477.4" y="1038.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (55 samples, 4.54%)</title><rect x="475.4" y="1011.0" width="53.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="478.4" y="1022.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.41%)</title><rect x="475.4" y="995.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="478.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.41%)</title><rect x="475.4" y="979.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="478.4" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.41%)</title><rect x="475.4" y="963.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="478.4" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.41%)</title><rect x="475.4" y="947.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="478.4" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.17%)</title><rect x="480.2" y="995.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="483.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.17%)</title><rect x="480.2" y="979.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="483.2" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.17%)</title><rect x="480.2" y="963.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="483.2" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.17%)</title><rect x="480.2" y="947.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="483.2" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.08%)</title><rect x="481.2" y="931.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="484.2" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (48 samples, 3.96%)</title><rect x="482.2" y="995.0" width="46.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="485.2" y="1006.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (41 samples, 3.38%)</title><rect x="489.0" y="979.0" width="39.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="492.0" y="990.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (9 samples, 0.74%)</title><rect x="520.2" y="963.0" width="8.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="523.2" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (11 samples, 0.91%)</title><rect x="528.9" y="1043.0" width="10.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="531.9" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (9 samples, 0.74%)</title><rect x="530.9" y="1027.0" width="8.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="533.9" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (9 samples, 0.74%)</title><rect x="530.9" y="1011.0" width="8.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="533.9" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (156 samples, 12.87%)</title><rect x="539.6" y="1043.0" width="151.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="542.6" y="1054.0">com/linecorp/decato..</text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="541.6" y="1027.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="544.6" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="542.6" y="1027.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="545.6" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="542.6" y="1011.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="545.6" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="542.6" y="995.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="545.6" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="542.6" y="979.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="545.6" y="990.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="542.6" y="963.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="545.6" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="542.6" y="947.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="545.6" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (152 samples, 12.54%)</title><rect x="543.5" y="1027.0" width="148.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="546.5" y="1038.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (57 samples, 4.70%)</title><rect x="550.3" y="1011.0" width="55.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="553.3" y="1022.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (54 samples, 4.46%)</title><rect x="551.3" y="995.0" width="52.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="554.3" y="1006.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (41 samples, 3.38%)</title><rect x="558.1" y="979.0" width="40.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="561.1" y="990.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (26 samples, 2.15%)</title><rect x="563.0" y="963.0" width="25.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="566.0" y="974.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (26 samples, 2.15%)</title><rect x="563.0" y="947.0" width="25.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="566.0" y="958.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (26 samples, 2.15%)</title><rect x="563.0" y="931.0" width="25.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="566.0" y="942.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (15 samples, 1.24%)</title><rect x="569.8" y="915.0" width="14.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="572.8" y="926.0"></text>
</g>
<g>
<title>CodeBlob::is_nmethod() const (1 samples, 0.08%)</title><rect x="569.8" y="899.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="572.8" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (6 samples, 0.50%)</title><rect x="570.8" y="899.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="573.8" y="910.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.08%)</title><rect x="570.8" y="883.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="573.8" y="894.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="571.8" y="883.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="574.8" y="894.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (2 samples, 0.17%)</title><rect x="572.7" y="883.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="575.7" y="894.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.17%)</title><rect x="574.7" y="883.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="577.7" y="894.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.17%)</title><rect x="574.7" y="867.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="577.7" y="878.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (2 samples, 0.17%)</title><rect x="574.7" y="851.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="577.7" y="862.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (8 samples, 0.66%)</title><rect x="576.6" y="899.0" width="7.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="579.6" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (5 samples, 0.41%)</title><rect x="579.6" y="883.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="582.6" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (2 samples, 0.17%)</title><rect x="579.6" y="867.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="582.6" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (2 samples, 0.17%)</title><rect x="579.6" y="851.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="582.6" y="862.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="579.6" y="835.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="582.6" y="846.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.08%)</title><rect x="579.6" y="819.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="582.6" y="830.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.08%)</title><rect x="580.5" y="835.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="583.5" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (2 samples, 0.17%)</title><rect x="581.5" y="867.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="584.5" y="878.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.08%)</title><rect x="583.4" y="867.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="586.4" y="878.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.33%)</title><rect x="584.4" y="915.0" width="3.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="587.4" y="926.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.33%)</title><rect x="588.3" y="963.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="591.3" y="974.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.33%)</title><rect x="592.2" y="963.0" width="3.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="595.2" y="974.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="596.1" y="963.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="599.1" y="974.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="597.1" y="963.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="600.1" y="974.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.17%)</title><rect x="598.1" y="979.0" width="1.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="601.1" y="990.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.33%)</title><rect x="600.0" y="979.0" width="3.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="603.0" y="990.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.17%)</title><rect x="603.9" y="995.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="606.9" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="603.9" y="979.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="606.9" y="990.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="603.9" y="963.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="606.9" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="603.9" y="947.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="606.9" y="958.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="604.9" y="979.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="607.9" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="604.9" y="963.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="607.9" y="974.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (14 samples, 1.16%)</title><rect x="605.8" y="1011.0" width="13.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="608.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/Long.toString (14 samples, 1.16%)</title><rect x="605.8" y="995.0" width="13.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="608.8" y="1006.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="605.8" y="979.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="608.8" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="605.8" y="963.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="608.8" y="974.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (13 samples, 1.07%)</title><rect x="606.8" y="979.0" width="12.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="609.8" y="990.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (74 samples, 6.11%)</title><rect x="619.5" y="1011.0" width="72.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="622.5" y="1022.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (72 samples, 5.94%)</title><rect x="621.4" y="995.0" width="70.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="624.4" y="1006.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (6 samples, 0.50%)</title><rect x="621.4" y="979.0" width="5.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="624.4" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (6 samples, 0.50%)</title><rect x="621.4" y="963.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="624.4" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (6 samples, 0.50%)</title><rect x="621.4" y="947.0" width="5.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="624.4" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.50%)</title><rect x="621.4" y="931.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="624.4" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (66 samples, 5.45%)</title><rect x="627.3" y="979.0" width="64.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="630.3" y="990.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (61 samples, 5.03%)</title><rect x="632.1" y="963.0" width="59.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="635.1" y="974.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (31 samples, 2.56%)</title><rect x="661.3" y="947.0" width="30.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="664.3" y="958.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.25%)</title><rect x="676.9" y="931.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="679.9" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (9 samples, 0.74%)</title><rect x="679.8" y="931.0" width="8.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="682.8" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="686.7" y="915.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="689.7" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="687.6" y="915.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="690.6" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="687.6" y="899.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="690.6" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="687.6" y="883.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="690.6" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="687.6" y="867.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="690.6" y="878.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.25%)</title><rect x="688.6" y="931.0" width="2.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="691.6" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (75 samples, 6.19%)</title><rect x="691.5" y="1043.0" width="73.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="694.5" y="1054.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (74 samples, 6.11%)</title><rect x="692.5" y="1027.0" width="72.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="695.5" y="1038.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1724566529.process (30 samples, 2.48%)</title><rect x="696.4" y="1011.0" width="29.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="699.4" y="1022.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (29 samples, 2.39%)</title><rect x="696.4" y="995.0" width="28.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="699.4" y="1006.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (24 samples, 1.98%)</title><rect x="698.3" y="979.0" width="23.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="701.3" y="990.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.25%)</title><rect x="701.3" y="963.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="704.3" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.25%)</title><rect x="701.3" y="947.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="704.3" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.25%)</title><rect x="701.3" y="931.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="704.3" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.25%)</title><rect x="701.3" y="915.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="704.3" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (3 samples, 0.25%)</title><rect x="701.3" y="899.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="704.3" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.08%)</title><rect x="703.2" y="883.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="706.2" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (9 samples, 0.74%)</title><rect x="704.2" y="963.0" width="8.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="707.2" y="974.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.66%)</title><rect x="705.1" y="947.0" width="7.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="708.1" y="958.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.58%)</title><rect x="706.1" y="931.0" width="6.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="709.1" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (9 samples, 0.74%)</title><rect x="712.9" y="963.0" width="8.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="715.9" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="720.7" y="947.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="723.7" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="720.7" y="931.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="723.7" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.25%)</title><rect x="721.7" y="979.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="724.7" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.25%)</title><rect x="721.7" y="963.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="724.7" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.25%)</title><rect x="721.7" y="947.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="724.7" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.25%)</title><rect x="721.7" y="931.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="724.7" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.25%)</title><rect x="721.7" y="915.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="724.7" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="724.6" y="995.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="727.6" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (10 samples, 0.83%)</title><rect x="725.6" y="1011.0" width="9.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="728.6" y="1022.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.50%)</title><rect x="729.5" y="995.0" width="5.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="732.5" y="1006.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.50%)</title><rect x="729.5" y="979.0" width="5.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="732.5" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="735.3" y="1011.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="738.3" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.08%)</title><rect x="735.3" y="995.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="738.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1016925085.linkToTargetMethod (2 samples, 0.17%)</title><rect x="736.3" y="1011.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="739.3" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1991294891.invokeStatic_LL_L (2 samples, 0.17%)</title><rect x="736.3" y="995.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="739.3" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$283/2121123214.get$Lambda (2 samples, 0.17%)</title><rect x="736.3" y="979.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="739.3" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (15 samples, 1.24%)</title><rect x="738.3" y="1011.0" width="14.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="741.3" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (12 samples, 0.99%)</title><rect x="741.2" y="995.0" width="11.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="744.2" y="1006.0"></text>
</g>
<g>
<title>itable stub (5 samples, 0.41%)</title><rect x="744.1" y="979.0" width="4.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="747.1" y="990.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (4 samples, 0.33%)</title><rect x="749.0" y="979.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="752.0" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.08%)</title><rect x="752.9" y="1011.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="755.9" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.08%)</title><rect x="752.9" y="995.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="755.9" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (11 samples, 0.91%)</title><rect x="753.8" y="1011.0" width="10.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="756.8" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="762.6" y="995.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="765.6" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="762.6" y="979.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="765.6" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="762.6" y="963.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="765.6" y="974.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (1 samples, 0.08%)</title><rect x="762.6" y="947.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="765.6" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.08%)</title><rect x="763.6" y="995.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="766.6" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (7 samples, 0.58%)</title><rect x="764.5" y="1043.0" width="6.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="767.5" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.elapsedNanos (5 samples, 0.41%)</title><rect x="764.5" y="1027.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="767.5" y="1038.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.17%)</title><rect x="765.5" y="1011.0" width="2.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="768.5" y="1022.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="765.5" y="995.0" width="2.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="768.5" y="1006.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.17%)</title><rect x="767.5" y="1011.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="770.5" y="1022.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.17%)</title><rect x="769.4" y="1027.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="772.4" y="1038.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.17%)</title><rect x="769.4" y="1011.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="772.4" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.08%)</title><rect x="771.4" y="1043.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="774.4" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.&lt;init&gt; (1 samples, 0.08%)</title><rect x="771.4" y="1027.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="774.4" y="1038.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Counter.increment (2 samples, 0.17%)</title><rect x="772.3" y="1043.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="775.3" y="1054.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter.increment (2 samples, 0.17%)</title><rect x="772.3" y="1027.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="775.3" y="1038.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.08%)</title><rect x="772.3" y="1011.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="775.3" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1448354802.linkToTargetMethod (1 samples, 0.08%)</title><rect x="773.3" y="1011.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="776.3" y="1022.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1014275600.invokeStatic_D_L (1 samples, 0.08%)</title><rect x="773.3" y="995.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="776.3" y="1006.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter$$Lambda$278/1136954294.get$Lambda (1 samples, 0.08%)</title><rect x="773.3" y="979.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="776.3" y="990.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.08%)</title><rect x="774.3" y="1043.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="777.3" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1172131546.linkToTargetMethod (1 samples, 0.08%)</title><rect x="774.3" y="1027.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="777.3" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (1 samples, 0.08%)</title><rect x="774.3" y="1011.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="777.3" y="1022.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer$$Lambda$262/714751299.get$Lambda (1 samples, 0.08%)</title><rect x="774.3" y="995.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="777.3" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (17 samples, 1.40%)</title><rect x="775.2" y="1043.0" width="16.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="778.2" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (15 samples, 1.24%)</title><rect x="777.2" y="1027.0" width="14.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="780.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (15 samples, 1.24%)</title><rect x="777.2" y="1011.0" width="14.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="780.2" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$286/796468672.accept (15 samples, 1.24%)</title><rect x="777.2" y="995.0" width="14.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="780.2" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$43 (15 samples, 1.24%)</title><rect x="777.2" y="979.0" width="14.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="780.2" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/1589300683.complete (15 samples, 1.24%)</title><rect x="777.2" y="963.0" width="14.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="780.2" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$46 (15 samples, 1.24%)</title><rect x="777.2" y="947.0" width="14.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="780.2" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/286341734.complete (15 samples, 1.24%)</title><rect x="777.2" y="931.0" width="14.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="780.2" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (15 samples, 1.24%)</title><rect x="777.2" y="915.0" width="14.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="780.2" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (15 samples, 1.24%)</title><rect x="777.2" y="899.0" width="14.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="780.2" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (15 samples, 1.24%)</title><rect x="777.2" y="883.0" width="14.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="780.2" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (15 samples, 1.24%)</title><rect x="777.2" y="867.0" width="14.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="780.2" y="878.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.50%)</title><rect x="785.0" y="851.0" width="5.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="788.0" y="862.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.50%)</title><rect x="785.0" y="835.0" width="5.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="788.0" y="846.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="790.8" y="851.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="793.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (29 samples, 2.39%)</title><rect x="791.8" y="1059.0" width="28.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="794.8" y="1070.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (29 samples, 2.39%)</title><rect x="791.8" y="1043.0" width="28.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="794.8" y="1054.0">ja..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="791.8" y="1027.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="794.8" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="791.8" y="1011.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="794.8" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="791.8" y="995.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="794.8" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="791.8" y="979.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="794.8" y="990.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="791.8" y="963.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="794.8" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="791.8" y="947.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="794.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (28 samples, 2.31%)</title><rect x="792.8" y="1027.0" width="27.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="795.8" y="1038.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$286/796468672.accept (28 samples, 2.31%)</title><rect x="792.8" y="1011.0" width="27.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="795.8" y="1022.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$43 (28 samples, 2.31%)</title><rect x="792.8" y="995.0" width="27.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="795.8" y="1006.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion$$Lambda$277/1589300683.complete (28 samples, 2.31%)</title><rect x="792.8" y="979.0" width="27.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="795.8" y="990.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/DeferredCompletion.lambda$combine$46 (28 samples, 2.31%)</title><rect x="792.8" y="963.0" width="27.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="795.8" y="974.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$275/286341734.complete (23 samples, 1.90%)</title><rect x="792.8" y="947.0" width="22.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="795.8" y="958.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$53 (23 samples, 1.90%)</title><rect x="792.8" y="931.0" width="22.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="795.8" y="942.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (23 samples, 1.90%)</title><rect x="792.8" y="915.0" width="22.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="795.8" y="926.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (23 samples, 1.90%)</title><rect x="792.8" y="899.0" width="22.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="795.8" y="910.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (23 samples, 1.90%)</title><rect x="792.8" y="883.0" width="22.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="795.8" y="894.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (23 samples, 1.90%)</title><rect x="792.8" y="867.0" width="22.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="795.8" y="878.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$276/276410178.complete (5 samples, 0.41%)</title><rect x="815.2" y="947.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="818.2" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$null$71 (5 samples, 0.41%)</title><rect x="815.2" y="931.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="818.2" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.08%)</title><rect x="819.1" y="915.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="822.1" y="926.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.74%)</title><rect x="820.0" y="1059.0" width="8.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="823.0" y="1070.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.74%)</title><rect x="820.0" y="1043.0" width="8.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="823.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.08%)</title><rect x="828.8" y="1075.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="831.8" y="1086.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.08%)</title><rect x="828.8" y="1059.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="831.8" y="1070.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.08%)</title><rect x="828.8" y="1043.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="831.8" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="828.8" y="1027.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="831.8" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="828.8" y="1011.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="831.8" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="828.8" y="995.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="831.8" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (13 samples, 1.07%)</title><rect x="829.8" y="1075.0" width="12.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="832.8" y="1086.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.58%)</title><rect x="832.7" y="1059.0" width="6.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="835.7" y="1070.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.58%)</title><rect x="832.7" y="1043.0" width="6.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="835.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.25%)</title><rect x="839.5" y="1059.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="842.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 0.25%)</title><rect x="842.4" y="1123.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="845.4" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.25%)</title><rect x="842.4" y="1107.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="845.4" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.25%)</title><rect x="842.4" y="1091.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="845.4" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.25%)</title><rect x="842.4" y="1075.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="845.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (244 samples, 20.13%)</title><rect x="845.3" y="1123.0" width="237.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="848.3" y="1134.0">java/util/concurrent/ThreadPool..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (240 samples, 19.80%)</title><rect x="849.2" y="1107.0" width="233.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="852.2" y="1118.0">java/util/concurrent/LinkedBloc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (220 samples, 18.15%)</title><rect x="849.2" y="1091.0" width="214.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="852.2" y="1102.0">java/util/concurrent/locks/A..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (18 samples, 1.49%)</title><rect x="859.0" y="1075.0" width="17.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="862.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (16 samples, 1.32%)</title><rect x="876.5" y="1075.0" width="15.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="879.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (16 samples, 1.32%)</title><rect x="876.5" y="1059.0" width="15.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="879.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (16 samples, 1.32%)</title><rect x="876.5" y="1043.0" width="15.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="879.5" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (16 samples, 1.32%)</title><rect x="876.5" y="1027.0" width="15.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="879.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (175 samples, 14.44%)</title><rect x="892.1" y="1075.0" width="170.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="895.1" y="1086.0">java/util/concurrent/l..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (173 samples, 14.27%)</title><rect x="894.0" y="1059.0" width="168.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="897.0" y="1070.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="901.8" y="1043.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="904.8" y="1054.0"></text>
</g>
<g>
<title>Unsafe_Park (160 samples, 13.20%)</title><rect x="902.8" y="1043.0" width="155.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="905.8" y="1054.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="909.6" y="1027.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="912.6" y="1038.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (2 samples, 0.17%)</title><rect x="910.6" y="1027.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="913.6" y="1038.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (26 samples, 2.15%)</title><rect x="912.5" y="1027.0" width="25.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="915.5" y="1038.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (10 samples, 0.83%)</title><rect x="919.3" y="1011.0" width="9.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="922.3" y="1022.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.33%)</title><rect x="922.3" y="995.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="925.3" y="1006.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.17%)</title><rect x="924.2" y="979.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="927.2" y="990.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.08%)</title><rect x="926.2" y="995.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="929.2" y="1006.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.17%)</title><rect x="927.1" y="995.0" width="2.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="930.1" y="1006.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.17%)</title><rect x="929.1" y="1011.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="932.1" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (7 samples, 0.58%)</title><rect x="931.0" y="1011.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="934.0" y="1022.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.08%)</title><rect x="936.9" y="995.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="939.9" y="1006.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="936.9" y="979.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="939.9" y="990.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="936.9" y="963.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="939.9" y="974.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.08%)</title><rect x="936.9" y="947.0" width="0.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="939.9" y="958.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="937.8" y="1027.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="940.8" y="1038.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.25%)</title><rect x="938.8" y="1027.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="941.8" y="1038.0"></text>
</g>
<g>
<title>__lll_lock_wait (7 samples, 0.58%)</title><rect x="941.7" y="1027.0" width="6.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="944.7" y="1038.0"></text>
</g>
<g>
<title>__lll_unlock_wake (29 samples, 2.39%)</title><rect x="948.5" y="1027.0" width="28.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="951.5" y="1038.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (56 samples, 4.62%)</title><rect x="976.8" y="1027.0" width="54.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="979.8" y="1038.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.41%)</title><rect x="1031.3" y="1027.0" width="4.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1034.3" y="1038.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (3 samples, 0.25%)</title><rect x="1036.2" y="1027.0" width="2.9" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1039.2" y="1038.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.17%)</title><rect x="1039.1" y="1027.0" width="1.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1042.1" y="1038.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.25%)</title><rect x="1041.0" y="1027.0" width="3.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1044.0" y="1038.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.41%)</title><rect x="1044.0" y="1027.0" width="4.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1047.0" y="1038.0"></text>
</g>
<g>
<title>_init (3 samples, 0.25%)</title><rect x="1048.8" y="1027.0" width="2.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1051.8" y="1038.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (5 samples, 0.41%)</title><rect x="1051.7" y="1027.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1054.7" y="1038.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.17%)</title><rect x="1056.6" y="1027.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1059.6" y="1038.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.33%)</title><rect x="1058.6" y="1043.0" width="3.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1061.6" y="1054.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.08%)</title><rect x="1062.5" y="1075.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1065.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.17%)</title><rect x="1063.4" y="1091.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1066.4" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (18 samples, 1.49%)</title><rect x="1065.4" y="1091.0" width="17.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1068.4" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (18 samples, 1.49%)</title><rect x="1065.4" y="1075.0" width="17.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1068.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (18 samples, 1.49%)</title><rect x="1065.4" y="1059.0" width="17.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1068.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (18 samples, 1.49%)</title><rect x="1065.4" y="1043.0" width="17.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1068.4" y="1054.0"></text>
</g>
<g>
<title>msort_with_tmp.part.0 (1 samples, 0.08%)</title><rect x="1082.9" y="1171.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1085.9" y="1182.0"></text>
</g>
<g>
<title>edge_order(CFGEdge**, CFGEdge**) (1 samples, 0.08%)</title><rect x="1082.9" y="1155.0" width="1.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1085.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.08%)</title><rect x="1083.9" y="1171.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1086.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.sendHeartbeatRequest (1 samples, 0.08%)</title><rect x="1083.9" y="1155.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1086.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.compose (1 samples, 0.08%)</title><rect x="1083.9" y="1139.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1086.9" y="1150.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.08%)</title><rect x="1083.9" y="1123.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1086.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="1084.9" y="1171.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1087.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="1084.9" y="1155.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1087.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.08%)</title><rect x="1084.9" y="1139.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1087.9" y="1150.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (1 samples, 0.08%)</title><rect x="1084.9" y="1123.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1087.9" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.08%)</title><rect x="1084.9" y="1107.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1087.9" y="1118.0"></text>
</g>
<g>
<title>start_thread (107 samples, 8.83%)</title><rect x="1085.8" y="1171.0" width="104.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1088.8" y="1182.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (107 samples, 8.83%)</title><rect x="1085.8" y="1155.0" width="104.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1088.8" y="1166.0">java_start(T..</text>
</g>
<g>
<title>GangWorker::loop() (24 samples, 1.98%)</title><rect x="1085.8" y="1139.0" width="23.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1088.8" y="1150.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (5 samples, 0.41%)</title><rect x="1085.8" y="1123.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1088.8" y="1134.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.41%)</title><rect x="1085.8" y="1107.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1088.8" y="1118.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.08%)</title><rect x="1085.8" y="1091.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1088.8" y="1102.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.33%)</title><rect x="1086.8" y="1091.0" width="3.9" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1089.8" y="1102.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (19 samples, 1.57%)</title><rect x="1090.7" y="1123.0" width="18.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1093.7" y="1134.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.08%)</title><rect x="1090.7" y="1107.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1093.7" y="1118.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.17%)</title><rect x="1091.7" y="1107.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1094.7" y="1118.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.08%)</title><rect x="1091.7" y="1091.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1094.7" y="1102.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.08%)</title><rect x="1091.7" y="1075.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1094.7" y="1086.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.08%)</title><rect x="1092.6" y="1091.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1095.6" y="1102.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (9 samples, 0.74%)</title><rect x="1093.6" y="1107.0" width="8.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1096.6" y="1118.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.41%)</title><rect x="1093.6" y="1091.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1096.6" y="1102.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.17%)</title><rect x="1093.6" y="1075.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1096.6" y="1086.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.17%)</title><rect x="1093.6" y="1059.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1096.6" y="1070.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.08%)</title><rect x="1094.6" y="1043.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1097.6" y="1054.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (3 samples, 0.25%)</title><rect x="1095.6" y="1075.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1098.6" y="1086.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (3 samples, 0.25%)</title><rect x="1095.6" y="1059.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1098.6" y="1070.0"></text>
</g>
<g>
<title>JNIHandleBlock::oops_do(OopClosure*) (1 samples, 0.08%)</title><rect x="1096.5" y="1043.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1099.5" y="1054.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.08%)</title><rect x="1097.5" y="1043.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1100.5" y="1054.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**), OopClosure*) (1 samples, 0.08%)</title><rect x="1097.5" y="1027.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1100.5" y="1038.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.33%)</title><rect x="1098.5" y="1091.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1101.5" y="1102.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.25%)</title><rect x="1098.5" y="1075.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1101.5" y="1086.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.08%)</title><rect x="1101.4" y="1075.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1104.4" y="1086.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.08%)</title><rect x="1101.4" y="1059.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1104.4" y="1070.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (7 samples, 0.58%)</title><rect x="1102.4" y="1107.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1105.4" y="1118.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (7 samples, 0.58%)</title><rect x="1102.4" y="1091.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1105.4" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (5 samples, 0.41%)</title><rect x="1102.4" y="1075.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1105.4" y="1086.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (5 samples, 0.41%)</title><rect x="1102.4" y="1059.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1105.4" y="1070.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.33%)</title><rect x="1103.3" y="1043.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1106.3" y="1054.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (4 samples, 0.33%)</title><rect x="1103.3" y="1027.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1106.3" y="1038.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.17%)</title><rect x="1105.3" y="1011.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1108.3" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.08%)</title><rect x="1106.3" y="995.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1109.3" y="1006.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, int) (1 samples, 0.08%)</title><rect x="1106.3" y="979.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1109.3" y="990.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.17%)</title><rect x="1107.2" y="1075.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1110.2" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (2 samples, 0.17%)</title><rect x="1107.2" y="1059.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1110.2" y="1070.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (2 samples, 0.17%)</title><rect x="1107.2" y="1043.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1110.2" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::push_dirty_cards_region(HeapRegion*) (1 samples, 0.08%)</title><rect x="1107.2" y="1027.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1110.2" y="1038.0"></text>
</g>
<g>
<title>HeapRegionRemSetIterator::has_next(unsigned long&amp;) (1 samples, 0.08%)</title><rect x="1108.2" y="1027.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1111.2" y="1038.0"></text>
</g>
<g>
<title>RSHashTableIter::has_next(unsigned long&amp;) (1 samples, 0.08%)</title><rect x="1108.2" y="1011.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1111.2" y="1022.0"></text>
</g>
<g>
<title>JavaThread::run() (80 samples, 6.60%)</title><rect x="1109.2" y="1139.0" width="77.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1112.2" y="1150.0">JavaThrea..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (80 samples, 6.60%)</title><rect x="1109.2" y="1123.0" width="77.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1112.2" y="1134.0">JavaThrea..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (80 samples, 6.60%)</title><rect x="1109.2" y="1107.0" width="77.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1112.2" y="1118.0">CompileBr..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (80 samples, 6.60%)</title><rect x="1109.2" y="1091.0" width="77.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1112.2" y="1102.0">CompileBr..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (79 samples, 6.52%)</title><rect x="1109.2" y="1075.0" width="76.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1112.2" y="1086.0">C2Compil..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (79 samples, 6.52%)</title><rect x="1109.2" y="1059.0" width="76.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1112.2" y="1070.0">Compile:..</text>
</g>
<g>
<title>Compile::Code_Gen() (44 samples, 3.63%)</title><rect x="1109.2" y="1043.0" width="42.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1112.2" y="1054.0">Comp..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.08%)</title><rect x="1109.2" y="1027.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1112.2" y="1038.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.08%)</title><rect x="1109.2" y="1011.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1112.2" y="1022.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.08%)</title><rect x="1109.2" y="995.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1112.2" y="1006.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.08%)</title><rect x="1109.2" y="979.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1112.2" y="990.0"></text>
</g>
<g>
<title>loadBNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.08%)</title><rect x="1109.2" y="963.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1112.2" y="974.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.17%)</title><rect x="1110.2" y="1027.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1113.2" y="1038.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.08%)</title><rect x="1110.2" y="1011.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1113.2" y="1022.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="1110.2" y="995.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1113.2" y="1006.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.08%)</title><rect x="1111.1" y="1011.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1114.1" y="1022.0"></text>
</g>
<g>
<title>Assembler::movq(Address, RegisterImpl*) (1 samples, 0.08%)</title><rect x="1111.1" y="995.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1114.1" y="1006.0"></text>
</g>
<g>
<title>Relocation::type() (1 samples, 0.08%)</title><rect x="1111.1" y="979.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1114.1" y="990.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 0.33%)</title><rect x="1112.1" y="1027.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1115.1" y="1038.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 0.33%)</title><rect x="1112.1" y="1011.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1115.1" y="1022.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.08%)</title><rect x="1113.1" y="995.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1116.1" y="1006.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.08%)</title><rect x="1114.1" y="995.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1117.1" y="1006.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.08%)</title><rect x="1114.1" y="979.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1117.1" y="990.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.08%)</title><rect x="1115.0" y="995.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1118.0" y="1006.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.08%)</title><rect x="1115.0" y="979.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1118.0" y="990.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.08%)</title><rect x="1116.0" y="1027.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1119.0" y="1038.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.08%)</title><rect x="1116.0" y="1011.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1119.0" y="1022.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.08%)</title><rect x="1116.0" y="995.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1119.0" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.25%)</title><rect x="1117.0" y="1027.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1120.0" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.25%)</title><rect x="1117.0" y="1011.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1120.0" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (3 samples, 0.25%)</title><rect x="1117.0" y="995.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1120.0" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.08%)</title><rect x="1118.0" y="979.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1121.0" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.08%)</title><rect x="1118.9" y="979.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1121.9" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.08%)</title><rect x="1119.9" y="1027.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1122.9" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (32 samples, 2.64%)</title><rect x="1120.9" y="1027.0" width="31.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1123.9" y="1038.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.08%)</title><rect x="1120.9" y="1011.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1123.9" y="1022.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.17%)</title><rect x="1121.8" y="1011.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1124.8" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.25%)</title><rect x="1123.8" y="1011.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1126.8" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.17%)</title><rect x="1123.8" y="995.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1126.8" y="1006.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.08%)</title><rect x="1125.7" y="995.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.7" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.08%)</title><rect x="1125.7" y="979.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1128.7" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (8 samples, 0.66%)</title><rect x="1126.7" y="1011.0" width="7.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1129.7" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.08%)</title><rect x="1133.5" y="995.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.5" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::new_lrg(Node const*, unsigned int) (1 samples, 0.08%)</title><rect x="1133.5" y="979.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1136.5" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 0.50%)</title><rect x="1134.5" y="1011.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.5" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1137.4" y="995.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1140.4" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.08%)</title><rect x="1138.4" y="995.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1141.4" y="1006.0"></text>
</g>
<g>
<title>addP_rReg_immNode::rule() const (1 samples, 0.08%)</title><rect x="1139.4" y="995.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.4" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.08%)</title><rect x="1140.3" y="1011.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.3" y="1022.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.08%)</title><rect x="1140.3" y="995.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.3" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.08%)</title><rect x="1141.3" y="1011.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1144.3" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.08%)</title><rect x="1141.3" y="995.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.3" y="1006.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 0.25%)</title><rect x="1142.3" y="1011.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1145.3" y="1022.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.08%)</title><rect x="1142.3" y="995.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1145.3" y="1006.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.17%)</title><rect x="1143.3" y="995.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.3" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (2 samples, 0.17%)</title><rect x="1143.3" y="979.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1146.3" y="990.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.08%)</title><rect x="1145.2" y="1011.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.2" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.17%)</title><rect x="1146.2" y="1011.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.2" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.17%)</title><rect x="1146.2" y="995.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1149.2" y="1006.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 0.33%)</title><rect x="1148.1" y="1011.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1151.1" y="1022.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.08%)</title><rect x="1150.1" y="995.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.1" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1150.1" y="979.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.1" y="990.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.08%)</title><rect x="1151.1" y="995.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.1" y="1006.0"></text>
</g>
<g>
<title>Compile::Optimize() (26 samples, 2.15%)</title><rect x="1152.0" y="1043.0" width="25.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.0" y="1054.0">C..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.08%)</title><rect x="1152.0" y="1027.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.08%)</title><rect x="1152.0" y="1011.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.0" y="1022.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1152.0" y="995.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1155.0" y="1006.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (3 samples, 0.25%)</title><rect x="1153.0" y="1027.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.0" y="1038.0"></text>
</g>
<g>
<title>AddINode::add_ring(Type const*, Type const*) const (1 samples, 0.08%)</title><rect x="1155.0" y="1011.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.0" y="1022.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1155.0" y="995.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.0" y="1006.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1155.0" y="979.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.0" y="990.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.08%)</title><rect x="1155.0" y="963.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.0" y="974.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.08%)</title><rect x="1155.0" y="947.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.0" y="958.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.08%)</title><rect x="1155.9" y="1027.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.9" y="1038.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.08%)</title><rect x="1155.9" y="1011.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.9" y="1022.0"></text>
</g>
<g>
<title>GrowableArray&lt;Node*&gt;::push(Node* const&amp;) (1 samples, 0.08%)</title><rect x="1155.9" y="995.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool) (1 samples, 0.08%)</title><rect x="1156.9" y="1027.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.9" y="1038.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1156.9" y="1011.0" width="1.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1159.9" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (15 samples, 1.24%)</title><rect x="1157.9" y="1027.0" width="14.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.9" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.08%)</title><rect x="1157.9" y="1011.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.9" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.08%)</title><rect x="1158.8" y="1011.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.8" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (8 samples, 0.66%)</title><rect x="1159.8" y="1011.0" width="7.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.8" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (6 samples, 0.50%)</title><rect x="1161.8" y="995.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.8" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 0.25%)</title><rect x="1164.7" y="979.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.7" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1166.6" y="963.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.6" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.08%)</title><rect x="1167.6" y="1011.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.6" y="1022.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.08%)</title><rect x="1167.6" y="995.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.6" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.25%)</title><rect x="1168.6" y="1011.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.6" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.08%)</title><rect x="1170.5" y="995.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.5" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.08%)</title><rect x="1170.5" y="979.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.5" y="990.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1170.5" y="963.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.5" y="974.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1170.5" y="947.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.5" y="958.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1170.5" y="931.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1173.5" y="942.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.08%)</title><rect x="1170.5" y="915.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.5" y="926.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1170.5" y="899.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.5" y="910.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1170.5" y="883.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.5" y="894.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.08%)</title><rect x="1170.5" y="867.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.5" y="878.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1171.5" y="1011.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1174.5" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.17%)</title><rect x="1172.5" y="1027.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.5" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.17%)</title><rect x="1172.5" y="1011.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.5" y="1022.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1172.5" y="995.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.5" y="1006.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1173.4" y="995.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.4" y="1006.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.08%)</title><rect x="1173.4" y="979.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.4" y="990.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.08%)</title><rect x="1174.4" y="1027.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.4" y="1038.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.08%)</title><rect x="1174.4" y="1011.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.4" y="1022.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.08%)</title><rect x="1174.4" y="995.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.4" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1174.4" y="979.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.4" y="990.0"></text>
</g>
<g>
<title>Node::del_req(unsigned int) (1 samples, 0.08%)</title><rect x="1174.4" y="963.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.4" y="974.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.17%)</title><rect x="1175.4" y="1027.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.4" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.17%)</title><rect x="1175.4" y="1011.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.4" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.17%)</title><rect x="1175.4" y="995.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.4" y="1006.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1176.4" y="979.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.4" y="990.0"></text>
</g>
<g>
<title>IfNode::IfNode(Node*, Node*, float, float) (1 samples, 0.08%)</title><rect x="1176.4" y="963.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.4" y="974.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="1176.4" y="947.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1179.4" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.74%)</title><rect x="1177.3" y="1043.0" width="8.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.3" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.74%)</title><rect x="1177.3" y="1027.0" width="8.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.3" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.74%)</title><rect x="1177.3" y="1011.0" width="8.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.3" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.74%)</title><rect x="1177.3" y="995.0" width="8.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.3" y="1006.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.08%)</title><rect x="1177.3" y="979.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.3" y="990.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.08%)</title><rect x="1177.3" y="963.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.3" y="974.0"></text>
</g>
<g>
<title>GraphKit::gen_subtype_check(Node*, Node*) (1 samples, 0.08%)</title><rect x="1177.3" y="947.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.3" y="958.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1177.3" y="931.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.3" y="942.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1177.3" y="915.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.66%)</title><rect x="1178.3" y="979.0" width="7.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.3" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.66%)</title><rect x="1178.3" y="963.0" width="7.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.3" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.66%)</title><rect x="1178.3" y="947.0" width="7.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.3" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.66%)</title><rect x="1178.3" y="931.0" width="7.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.66%)</title><rect x="1178.3" y="915.0" width="7.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.66%)</title><rect x="1178.3" y="899.0" width="7.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.66%)</title><rect x="1178.3" y="883.0" width="7.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.50%)</title><rect x="1178.3" y="867.0" width="5.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.3" y="878.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1178.3" y="851.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.3" y="862.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1178.3" y="835.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.3" y="846.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1178.3" y="819.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.3" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::map_blocks() (1 samples, 0.08%)</title><rect x="1178.3" y="803.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.3" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.33%)</title><rect x="1179.3" y="851.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.3" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.33%)</title><rect x="1179.3" y="835.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.33%)</title><rect x="1179.3" y="819.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.33%)</title><rect x="1179.3" y="803.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.33%)</title><rect x="1179.3" y="787.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.33%)</title><rect x="1179.3" y="771.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.3" y="782.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1179.3" y="755.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.3" y="766.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1179.3" y="739.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.3" y="750.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1179.3" y="723.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.3" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1179.3" y="707.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.3" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1179.3" y="691.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.3" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1179.3" y="675.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.3" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1179.3" y="659.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.3" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1179.3" y="643.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.3" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.08%)</title><rect x="1179.3" y="627.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.3" y="638.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1179.3" y="611.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.3" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1179.3" y="595.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.3" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1179.3" y="579.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.3" y="590.0"></text>
</g>
<g>
<title>ConstantPool::impl_klass_ref_index_at(int, bool) (1 samples, 0.08%)</title><rect x="1179.3" y="563.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.3" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1180.3" y="755.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.3" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1180.3" y="739.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1180.3" y="723.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1180.3" y="707.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1180.3" y="691.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1180.3" y="675.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.3" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1180.3" y="659.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.3" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1180.3" y="643.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1180.3" y="627.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1180.3" y="611.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1180.3" y="595.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1180.3" y="579.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.3" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1180.3" y="563.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.3" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1180.3" y="547.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1180.3" y="531.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1180.3" y="515.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1180.3" y="499.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1180.3" y="483.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.3" y="494.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1180.3" y="467.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.3" y="478.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1180.3" y="451.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.3" y="462.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1180.3" y="435.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.3" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1180.3" y="419.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.3" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1180.3" y="403.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.3" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1180.3" y="387.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.3" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1180.3" y="371.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.3" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.2" y="467.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.2" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.2" y="451.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.2" y="435.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.2" y="419.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.2" y="403.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.2" y="387.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.2" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.2" y="371.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.2" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.2" y="355.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.2" y="339.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.2" y="323.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.2" y="307.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.2" y="291.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.2" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.2" y="275.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.2" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.2" y="259.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.2" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.2" y="243.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.2" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.2" y="227.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.2" y="211.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.2" y="195.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.2" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.2" y="179.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.2" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.2" y="163.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.2" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.2" y="147.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.2" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.2" y="131.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.2" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.2" y="115.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.2" y="126.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.08%)</title><rect x="1181.2" y="99.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.2" y="110.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.08%)</title><rect x="1181.2" y="83.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.2" y="94.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.08%)</title><rect x="1181.2" y="67.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.2" y="78.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.08%)</title><rect x="1181.2" y="51.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.2" y="62.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.08%)</title><rect x="1181.2" y="35.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.2" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.2" y="755.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.2" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.2" y="739.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.2" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.2" y="723.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.2" y="707.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.2" y="691.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.2" y="675.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.2" y="659.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.2" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.2" y="643.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.2" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.2" y="627.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.2" y="611.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.2" y="595.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.2" y="579.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.2" y="563.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.2" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.2" y="547.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.2" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.2" y="531.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.2" y="515.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.2" y="499.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.2" y="483.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1182.2" y="467.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.2" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1182.2" y="451.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.2" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1182.2" y="435.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1182.2" y="419.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1182.2" y="403.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1182.2" y="387.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1182.2" y="371.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1182.2" y="355.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.2" y="366.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1182.2" y="339.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.2" y="350.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.08%)</title><rect x="1182.2" y="323.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.2" y="334.0"></text>
</g>
<g>
<title>GraphKit::g1_mark_card(IdealKit&amp;, Node*, Node*, unsigned int, Node*, Node*, Node*, TypeFunc const*) (1 samples, 0.08%)</title><rect x="1182.2" y="307.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.2" y="318.0"></text>
</g>
<g>
<title>IdealKit::store(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.08%)</title><rect x="1182.2" y="291.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.2" y="302.0"></text>
</g>
<g>
<title>StoreNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1182.2" y="275.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.2" y="286.0"></text>
</g>
<g>
<title>StoreNode::StoreNode(Node*, Node*, Node*, TypePtr const*, Node*, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1182.2" y="259.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.2" y="270.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1182.2" y="243.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.2" y="254.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.2" y="851.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.2" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.2" y="835.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.2" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.2" y="819.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1183.2" y="803.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1183.2" y="787.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1183.2" y="771.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.08%)</title><rect x="1183.2" y="755.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.2" y="766.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.08%)</title><rect x="1183.2" y="739.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.2" y="750.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.08%)</title><rect x="1183.2" y="723.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.2" y="734.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1183.2" y="707.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.2" y="718.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1183.2" y="691.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.17%)</title><rect x="1184.2" y="867.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.2" y="878.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (2 samples, 0.17%)</title><rect x="1184.2" y="851.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.2" y="862.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.08%)</title><rect x="1184.2" y="835.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.2" y="846.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1184.2" y="819.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.2" y="830.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1184.2" y="803.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.2" y="814.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.08%)</title><rect x="1184.2" y="787.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.2" y="798.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.08%)</title><rect x="1184.2" y="771.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.2" y="782.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.08%)</title><rect x="1184.2" y="755.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.2" y="766.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields_impl(GrowableArray&lt;ciField*&gt;*) (1 samples, 0.08%)</title><rect x="1184.2" y="739.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.2" y="750.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.08%)</title><rect x="1185.1" y="835.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.1" y="846.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.08%)</title><rect x="1185.1" y="819.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.1" y="830.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1185.1" y="803.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.1" y="814.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1185.1" y="787.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.1" y="798.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1185.1" y="771.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.1" y="782.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.08%)</title><rect x="1185.1" y="755.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.1" y="766.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1185.1" y="739.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.1" y="750.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1186.1" y="1075.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.1" y="1086.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.08%)</title><rect x="1186.1" y="1059.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.1" y="1070.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.08%)</title><rect x="1186.1" y="1043.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.1" y="1054.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.08%)</title><rect x="1186.1" y="1027.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.1" y="1038.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.08%)</title><rect x="1186.1" y="1011.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.1" y="1022.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.08%)</title><rect x="1186.1" y="995.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.1" y="1006.0"></text>
</g>
<g>
<title>LinearScan::resolve_data_flow() (1 samples, 0.08%)</title><rect x="1186.1" y="979.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.1" y="990.0"></text>
</g>
<g>
<title>LinearScan::resolve_collect_mappings(BlockBegin*, BlockBegin*, MoveResolver&amp;) (1 samples, 0.08%)</title><rect x="1186.1" y="963.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.1" y="974.0"></text>
</g>
<g>
<title>LinearScan::split_child_at_op_id(Interval*, int, LIR_OpVisitState::OprMode) (1 samples, 0.08%)</title><rect x="1186.1" y="947.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.1" y="958.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.25%)</title><rect x="1187.1" y="1139.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.1" y="1150.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.25%)</title><rect x="1187.1" y="1123.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.1" y="1134.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.08%)</title><rect x="1187.1" y="1107.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.1" y="1118.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.17%)</title><rect x="1188.1" y="1107.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.1" y="1118.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.17%)</title><rect x="1188.1" y="1091.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.1" y="1102.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.17%)</title><rect x="1188.1" y="1075.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.1" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.17%)</title><rect x="1188.1" y="1059.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.1" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.08%)</title><rect x="1188.1" y="1043.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.1" y="1054.0"></text>
</g>
<g>
<title>G1RemSet::prepare_for_oops_into_collection_set_do() (1 samples, 0.08%)</title><rect x="1188.1" y="1027.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.1" y="1038.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::concatenate_logs() (1 samples, 0.08%)</title><rect x="1188.1" y="1011.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.1" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.08%)</title><rect x="1189.0" y="1043.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.0" y="1054.0"></text>
</g>
<g>
<title>HeapRegion::hr_clear(bool, bool, bool) (1 samples, 0.08%)</title><rect x="1189.0" y="1027.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.0" y="1038.0"></text>
</g>
<g>
<title>HeapRegionRemSet::clear_locked() (1 samples, 0.08%)</title><rect x="1189.0" y="1011.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.0" y="1022.0"></text>
</g>
<g>
<title>OtherRegionsTable::clear() (1 samples, 0.08%)</title><rect x="1189.0" y="995.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.0" y="1006.0"></text>
</g>
<g>
<title>SparsePRT::clear() (1 samples, 0.08%)</title><rect x="1189.0" y="979.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.0" y="990.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1189.0" y="963.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1192.0" y="974.0"></text>
</g>
</g>
</svg>
